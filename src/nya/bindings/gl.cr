@[Link("GL")]
lib LibGL
  GLEXT_PROTOTYPES = 1
  VERSION_1_0 = 1
  DEPTH_BUFFER_BIT = 256
  STENCIL_BUFFER_BIT = 1024
  COLOR_BUFFER_BIT = 16384
  FALSE = 0
  TRUE = 1
  POINTS = 0
  LINES = 1
  LINE_LOOP = 2
  LINE_STRIP = 3
  TRIANGLES = 4
  TRIANGLE_STRIP = 5
  TRIANGLE_FAN = 6
  QUADS = 7
  NEVER = 512
  LESS = 513
  EQUAL = 514
  LEQUAL = 515
  GREATER = 516
  NOTEQUAL = 517
  GEQUAL = 518
  ALWAYS = 519
  ZERO = 0
  ONE = 1
  SRC_COLOR = 768
  ONE_MINUS_SRC_COLOR = 769
  SRC_ALPHA = 770
  ONE_MINUS_SRC_ALPHA = 771
  DST_ALPHA = 772
  ONE_MINUS_DST_ALPHA = 773
  DST_COLOR = 774
  ONE_MINUS_DST_COLOR = 775
  SRC_ALPHA_SATURATE = 776
  NONE = 0
  FRONT_LEFT = 1024
  FRONT_RIGHT = 1025
  BACK_LEFT = 1026
  BACK_RIGHT = 1027
  FRONT = 1028
  BACK = 1029
  LEFT = 1030
  RIGHT = 1031
  FRONT_AND_BACK = 1032
  NO_ERROR = 0
  INVALID_ENUM = 1280
  INVALID_VALUE = 1281
  INVALID_OPERATION = 1282
  OUT_OF_MEMORY = 1285
  CW = 2304
  CCW = 2305
  POINT_SIZE = 2833
  POINT_SIZE_RANGE = 2834
  POINT_SIZE_GRANULARITY = 2835
  LINE_SMOOTH = 2848
  LINE_WIDTH = 2849
  LINE_WIDTH_RANGE = 2850
  LINE_WIDTH_GRANULARITY = 2851
  POLYGON_MODE = 2880
  POLYGON_SMOOTH = 2881
  CULL_FACE = 2884
  CULL_FACE_MODE = 2885
  FRONT_FACE = 2886
  DEPTH_RANGE = 2928
  DEPTH_TEST = 2929
  DEPTH_WRITEMASK = 2930
  DEPTH_CLEAR_VALUE = 2931
  DEPTH_FUNC = 2932
  STENCIL_TEST = 2960
  STENCIL_CLEAR_VALUE = 2961
  STENCIL_FUNC = 2962
  STENCIL_VALUE_MASK = 2963
  STENCIL_FAIL = 2964
  STENCIL_PASS_DEPTH_FAIL = 2965
  STENCIL_PASS_DEPTH_PASS = 2966
  STENCIL_REF = 2967
  STENCIL_WRITEMASK = 2968
  VIEWPORT = 2978
  DITHER = 3024
  BLEND_DST = 3040
  BLEND_SRC = 3041
  BLEND = 3042
  LOGIC_OP_MODE = 3056
  DRAW_BUFFER = 3073
  READ_BUFFER = 3074
  SCISSOR_BOX = 3088
  SCISSOR_TEST = 3089
  COLOR_CLEAR_VALUE = 3106
  COLOR_WRITEMASK = 3107
  DOUBLEBUFFER = 3122
  STEREO = 3123
  LINE_SMOOTH_HINT = 3154
  POLYGON_SMOOTH_HINT = 3155
  UNPACK_SWAP_BYTES = 3312
  UNPACK_LSB_FIRST = 3313
  UNPACK_ROW_LENGTH = 3314
  UNPACK_SKIP_ROWS = 3315
  UNPACK_SKIP_PIXELS = 3316
  UNPACK_ALIGNMENT = 3317
  PACK_SWAP_BYTES = 3328
  PACK_LSB_FIRST = 3329
  PACK_ROW_LENGTH = 3330
  PACK_SKIP_ROWS = 3331
  PACK_SKIP_PIXELS = 3332
  PACK_ALIGNMENT = 3333
  MAX_TEXTURE_SIZE = 3379
  MAX_VIEWPORT_DIMS = 3386
  SUBPIXEL_BITS = 3408
  TEXTURE_1D = 3552
  TEXTURE_2D = 3553
  TEXTURE_WIDTH = 4096
  TEXTURE_HEIGHT = 4097
  TEXTURE_BORDER_COLOR = 4100
  DONT_CARE = 4352
  FASTEST = 4353
  NICEST = 4354
  BYTE = 5120
  UNSIGNED_BYTE = 5121
  SHORT = 5122
  UNSIGNED_SHORT = 5123
  INT = 5124
  UNSIGNED_INT = 5125
  FLOAT = 5126
  STACK_OVERFLOW = 1283
  STACK_UNDERFLOW = 1284
  CLEAR = 5376
  AND = 5377
  AND_REVERSE = 5378
  COPY = 5379
  AND_INVERTED = 5380
  NOOP = 5381
  XOR = 5382
  OR = 5383
  NOR = 5384
  EQUIV = 5385
  INVERT = 5386
  OR_REVERSE = 5387
  COPY_INVERTED = 5388
  OR_INVERTED = 5389
  NAND = 5390
  SET = 5391
  TEXTURE = 5890
  COLOR = 6144
  DEPTH = 6145
  STENCIL = 6146
  STENCIL_INDEX = 6401
  DEPTH_COMPONENT = 6402
  RED = 6403
  GREEN = 6404
  BLUE = 6405
  ALPHA = 6406
  RGB = 6407
  RGBA = 6408
  POINT = 6912
  LINE = 6913
  FILL = 6914
  KEEP = 7680
  REPLACE = 7681
  INCR = 7682
  DECR = 7683
  VENDOR = 7936
  RENDERER = 7937
  VERSION = 7938
  EXTENSIONS = 7939
  NEAREST = 9728
  LINEAR = 9729
  NEAREST_MIPMAP_NEAREST = 9984
  LINEAR_MIPMAP_NEAREST = 9985
  NEAREST_MIPMAP_LINEAR = 9986
  LINEAR_MIPMAP_LINEAR = 9987
  TEXTURE_MAG_FILTER = 10240
  TEXTURE_MIN_FILTER = 10241
  TEXTURE_WRAP_S = 10242
  TEXTURE_WRAP_T = 10243
  REPEAT = 10497
  VERSION_1_1 = 1
  COLOR_LOGIC_OP = 3058
  POLYGON_OFFSET_UNITS = 10752
  POLYGON_OFFSET_POINT = 10753
  POLYGON_OFFSET_LINE = 10754
  POLYGON_OFFSET_FILL = 32823
  POLYGON_OFFSET_FACTOR = 32824
  TEXTURE_BINDING_1D = 32872
  TEXTURE_BINDING_2D = 32873
  TEXTURE_INTERNAL_FORMAT = 4099
  TEXTURE_RED_SIZE = 32860
  TEXTURE_GREEN_SIZE = 32861
  TEXTURE_BLUE_SIZE = 32862
  TEXTURE_ALPHA_SIZE = 32863
  DOUBLE = 5130
  PROXY_TEXTURE_1D = 32867
  PROXY_TEXTURE_2D = 32868
  R3_G3_B2 = 10768
  RGB4 = 32847
  RGB5 = 32848
  RGB8 = 32849
  RGB10 = 32850
  RGB12 = 32851
  RGB16 = 32852
  RGBA2 = 32853
  RGBA4 = 32854
  RGB5_A1 = 32855
  RGBA8 = 32856
  RGB10_A2 = 32857
  RGBA12 = 32858
  RGBA16 = 32859
  VERTEX_ARRAY = 32884
  VERSION_1_2 = 1
  UNSIGNED_BYTE_3_3_2 = 32818
  UNSIGNED_SHORT_4_4_4_4 = 32819
  UNSIGNED_SHORT_5_5_5_1 = 32820
  UNSIGNED_INT_8_8_8_8 = 32821
  UNSIGNED_INT_10_10_10_2 = 32822
  TEXTURE_BINDING_3D = 32874
  PACK_SKIP_IMAGES = 32875
  PACK_IMAGE_HEIGHT = 32876
  UNPACK_SKIP_IMAGES = 32877
  UNPACK_IMAGE_HEIGHT = 32878
  TEXTURE_3D = 32879
  PROXY_TEXTURE_3D = 32880
  TEXTURE_DEPTH = 32881
  TEXTURE_WRAP_R = 32882
  MAX_3D_TEXTURE_SIZE = 32883
  UNSIGNED_BYTE_2_3_3_REV = 33634
  UNSIGNED_SHORT_5_6_5 = 33635
  UNSIGNED_SHORT_5_6_5_REV = 33636
  UNSIGNED_SHORT_4_4_4_4_REV = 33637
  UNSIGNED_SHORT_1_5_5_5_REV = 33638
  UNSIGNED_INT_8_8_8_8_REV = 33639
  UNSIGNED_INT_2_10_10_10_REV = 33640
  BGR = 32992
  BGRA = 32993
  MAX_ELEMENTS_VERTICES = 33000
  MAX_ELEMENTS_INDICES = 33001
  CLAMP_TO_EDGE = 33071
  TEXTURE_MIN_LOD = 33082
  TEXTURE_MAX_LOD = 33083
  TEXTURE_BASE_LEVEL = 33084
  TEXTURE_MAX_LEVEL = 33085
  SMOOTH_POINT_SIZE_RANGE = 2834
  SMOOTH_POINT_SIZE_GRANULARITY = 2835
  SMOOTH_LINE_WIDTH_RANGE = 2850
  SMOOTH_LINE_WIDTH_GRANULARITY = 2851
  ALIASED_LINE_WIDTH_RANGE = 33902
  VERSION_1_3 = 1
  TEXTURE0 = 33984
  TEXTURE1 = 33985
  TEXTURE2 = 33986
  TEXTURE3 = 33987
  TEXTURE4 = 33988
  TEXTURE5 = 33989
  TEXTURE6 = 33990
  TEXTURE7 = 33991
  TEXTURE8 = 33992
  TEXTURE9 = 33993
  TEXTURE10 = 33994
  TEXTURE11 = 33995
  TEXTURE12 = 33996
  TEXTURE13 = 33997
  TEXTURE14 = 33998
  TEXTURE15 = 33999
  TEXTURE16 = 34000
  TEXTURE17 = 34001
  TEXTURE18 = 34002
  TEXTURE19 = 34003
  TEXTURE20 = 34004
  TEXTURE21 = 34005
  TEXTURE22 = 34006
  TEXTURE23 = 34007
  TEXTURE24 = 34008
  TEXTURE25 = 34009
  TEXTURE26 = 34010
  TEXTURE27 = 34011
  TEXTURE28 = 34012
  TEXTURE29 = 34013
  TEXTURE30 = 34014
  TEXTURE31 = 34015
  ACTIVE_TEXTURE = 34016
  MULTISAMPLE = 32925
  SAMPLE_ALPHA_TO_COVERAGE = 32926
  SAMPLE_ALPHA_TO_ONE = 32927
  SAMPLE_COVERAGE = 32928
  SAMPLE_BUFFERS = 32936
  SAMPLES = 32937
  SAMPLE_COVERAGE_VALUE = 32938
  SAMPLE_COVERAGE_INVERT = 32939
  TEXTURE_CUBE_MAP = 34067
  TEXTURE_BINDING_CUBE_MAP = 34068
  TEXTURE_CUBE_MAP_POSITIVE_X = 34069
  TEXTURE_CUBE_MAP_NEGATIVE_X = 34070
  TEXTURE_CUBE_MAP_POSITIVE_Y = 34071
  TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072
  TEXTURE_CUBE_MAP_POSITIVE_Z = 34073
  TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074
  PROXY_TEXTURE_CUBE_MAP = 34075
  MAX_CUBE_MAP_TEXTURE_SIZE = 34076
  COMPRESSED_RGB = 34029
  COMPRESSED_RGBA = 34030
  TEXTURE_COMPRESSION_HINT = 34031
  TEXTURE_COMPRESSED_IMAGE_SIZE = 34464
  TEXTURE_COMPRESSED = 34465
  NUM_COMPRESSED_TEXTURE_FORMATS = 34466
  COMPRESSED_TEXTURE_FORMATS = 34467
  CLAMP_TO_BORDER = 33069
  VERSION_1_4 = 1
  BLEND_DST_RGB = 32968
  BLEND_SRC_RGB = 32969
  BLEND_DST_ALPHA = 32970
  BLEND_SRC_ALPHA = 32971
  POINT_FADE_THRESHOLD_SIZE = 33064
  DEPTH_COMPONENT16 = 33189
  DEPTH_COMPONENT24 = 33190
  DEPTH_COMPONENT32 = 33191
  MIRRORED_REPEAT = 33648
  MAX_TEXTURE_LOD_BIAS = 34045
  TEXTURE_LOD_BIAS = 34049
  INCR_WRAP = 34055
  DECR_WRAP = 34056
  TEXTURE_DEPTH_SIZE = 34890
  TEXTURE_COMPARE_MODE = 34892
  TEXTURE_COMPARE_FUNC = 34893
  BLEND_COLOR = 32773
  BLEND_EQUATION = 32777
  CONSTANT_COLOR = 32769
  ONE_MINUS_CONSTANT_COLOR = 32770
  CONSTANT_ALPHA = 32771
  ONE_MINUS_CONSTANT_ALPHA = 32772
  FUNC_ADD = 32774
  FUNC_REVERSE_SUBTRACT = 32779
  FUNC_SUBTRACT = 32778
  MIN = 32775
  MAX = 32776
  VERSION_1_5 = 1
  BUFFER_SIZE = 34660
  BUFFER_USAGE = 34661
  QUERY_COUNTER_BITS = 34916
  CURRENT_QUERY = 34917
  QUERY_RESULT = 34918
  QUERY_RESULT_AVAILABLE = 34919
  ARRAY_BUFFER = 34962
  ELEMENT_ARRAY_BUFFER = 34963
  ARRAY_BUFFER_BINDING = 34964
  ELEMENT_ARRAY_BUFFER_BINDING = 34965
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975
  READ_ONLY = 35000
  WRITE_ONLY = 35001
  READ_WRITE = 35002
  BUFFER_ACCESS = 35003
  BUFFER_MAPPED = 35004
  BUFFER_MAP_POINTER = 35005
  STREAM_DRAW = 35040
  STREAM_READ = 35041
  STREAM_COPY = 35042
  STATIC_DRAW = 35044
  STATIC_READ = 35045
  STATIC_COPY = 35046
  DYNAMIC_DRAW = 35048
  DYNAMIC_READ = 35049
  DYNAMIC_COPY = 35050
  SAMPLES_PASSED = 35092
  SRC1_ALPHA = 34185
  VERSION_2_0 = 1
  BLEND_EQUATION_RGB = 32777
  VERTEX_ATTRIB_ARRAY_ENABLED = 34338
  VERTEX_ATTRIB_ARRAY_SIZE = 34339
  VERTEX_ATTRIB_ARRAY_STRIDE = 34340
  VERTEX_ATTRIB_ARRAY_TYPE = 34341
  CURRENT_VERTEX_ATTRIB = 34342
  VERTEX_PROGRAM_POINT_SIZE = 34370
  VERTEX_ATTRIB_ARRAY_POINTER = 34373
  STENCIL_BACK_FUNC = 34816
  STENCIL_BACK_FAIL = 34817
  STENCIL_BACK_PASS_DEPTH_FAIL = 34818
  STENCIL_BACK_PASS_DEPTH_PASS = 34819
  MAX_DRAW_BUFFERS = 34852
  DRAW_BUFFER0 = 34853
  DRAW_BUFFER1 = 34854
  DRAW_BUFFER2 = 34855
  DRAW_BUFFER3 = 34856
  DRAW_BUFFER4 = 34857
  DRAW_BUFFER5 = 34858
  DRAW_BUFFER6 = 34859
  DRAW_BUFFER7 = 34860
  DRAW_BUFFER8 = 34861
  DRAW_BUFFER9 = 34862
  DRAW_BUFFER10 = 34863
  DRAW_BUFFER11 = 34864
  DRAW_BUFFER12 = 34865
  DRAW_BUFFER13 = 34866
  DRAW_BUFFER14 = 34867
  DRAW_BUFFER15 = 34868
  BLEND_EQUATION_ALPHA = 34877
  MAX_VERTEX_ATTRIBS = 34921
  VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922
  MAX_TEXTURE_IMAGE_UNITS = 34930
  FRAGMENT_SHADER = 35632
  VERTEX_SHADER = 35633
  MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657
  MAX_VERTEX_UNIFORM_COMPONENTS = 35658
  MAX_VARYING_FLOATS = 35659
  MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660
  MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661
  SHADER_TYPE = 35663
  FLOAT_VEC2 = 35664
  FLOAT_VEC3 = 35665
  FLOAT_VEC4 = 35666
  INT_VEC2 = 35667
  INT_VEC3 = 35668
  INT_VEC4 = 35669
  BOOL = 35670
  BOOL_VEC2 = 35671
  BOOL_VEC3 = 35672
  BOOL_VEC4 = 35673
  FLOAT_MAT2 = 35674
  FLOAT_MAT3 = 35675
  FLOAT_MAT4 = 35676
  SAMPLER_1D = 35677
  SAMPLER_2D = 35678
  SAMPLER_3D = 35679
  SAMPLER_CUBE = 35680
  SAMPLER_1D_SHADOW = 35681
  SAMPLER_2D_SHADOW = 35682
  DELETE_STATUS = 35712
  COMPILE_STATUS = 35713
  LINK_STATUS = 35714
  VALIDATE_STATUS = 35715
  INFO_LOG_LENGTH = 35716
  ATTACHED_SHADERS = 35717
  ACTIVE_UNIFORMS = 35718
  ACTIVE_UNIFORM_MAX_LENGTH = 35719
  SHADER_SOURCE_LENGTH = 35720
  ACTIVE_ATTRIBUTES = 35721
  ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722
  FRAGMENT_SHADER_DERIVATIVE_HINT = 35723
  SHADING_LANGUAGE_VERSION = 35724
  CURRENT_PROGRAM = 35725
  POINT_SPRITE_COORD_ORIGIN = 36000
  LOWER_LEFT = 36001
  UPPER_LEFT = 36002
  STENCIL_BACK_REF = 36003
  STENCIL_BACK_VALUE_MASK = 36004
  STENCIL_BACK_WRITEMASK = 36005
  VERSION_2_1 = 1
  PIXEL_PACK_BUFFER = 35051
  PIXEL_UNPACK_BUFFER = 35052
  PIXEL_PACK_BUFFER_BINDING = 35053
  PIXEL_UNPACK_BUFFER_BINDING = 35055
  FLOAT_MAT2X3 = 35685
  FLOAT_MAT2X4 = 35686
  FLOAT_MAT3X2 = 35687
  FLOAT_MAT3X4 = 35688
  FLOAT_MAT4X2 = 35689
  FLOAT_MAT4X3 = 35690
  SRGB = 35904
  SRGB8 = 35905
  SRGB_ALPHA = 35906
  SRGB8_ALPHA8 = 35907
  COMPRESSED_SRGB = 35912
  COMPRESSED_SRGB_ALPHA = 35913
  VERSION_3_0 = 1
  COMPARE_REF_TO_TEXTURE = 34894
  CLIP_DISTANCE0 = 12288
  CLIP_DISTANCE1 = 12289
  CLIP_DISTANCE2 = 12290
  CLIP_DISTANCE3 = 12291
  CLIP_DISTANCE4 = 12292
  CLIP_DISTANCE5 = 12293
  CLIP_DISTANCE6 = 12294
  CLIP_DISTANCE7 = 12295
  MAX_CLIP_DISTANCES = 3378
  MAJOR_VERSION = 33307
  MINOR_VERSION = 33308
  NUM_EXTENSIONS = 33309
  CONTEXT_FLAGS = 33310
  COMPRESSED_RED = 33317
  COMPRESSED_RG = 33318
  CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1
  RGBA32F = 34836
  RGB32F = 34837
  RGBA16F = 34842
  RGB16F = 34843
  VERTEX_ATTRIB_ARRAY_INTEGER = 35069
  MAX_ARRAY_TEXTURE_LAYERS = 35071
  MIN_PROGRAM_TEXEL_OFFSET = 35076
  MAX_PROGRAM_TEXEL_OFFSET = 35077
  CLAMP_READ_COLOR = 35100
  FIXED_ONLY = 35101
  MAX_VARYING_COMPONENTS = 35659
  TEXTURE_1D_ARRAY = 35864
  PROXY_TEXTURE_1D_ARRAY = 35865
  TEXTURE_2D_ARRAY = 35866
  PROXY_TEXTURE_2D_ARRAY = 35867
  TEXTURE_BINDING_1D_ARRAY = 35868
  TEXTURE_BINDING_2D_ARRAY = 35869
  R11F_G11F_B10F = 35898
  UNSIGNED_INT_10F_11F_11F_REV = 35899
  RGB9_E5 = 35901
  UNSIGNED_INT_5_9_9_9_REV = 35902
  TEXTURE_SHARED_SIZE = 35903
  TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958
  TRANSFORM_FEEDBACK_BUFFER_MODE = 35967
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968
  TRANSFORM_FEEDBACK_VARYINGS = 35971
  TRANSFORM_FEEDBACK_BUFFER_START = 35972
  TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973
  PRIMITIVES_GENERATED = 35975
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976
  RASTERIZER_DISCARD = 35977
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979
  INTERLEAVED_ATTRIBS = 35980
  SEPARATE_ATTRIBS = 35981
  TRANSFORM_FEEDBACK_BUFFER = 35982
  TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983
  RGBA32UI = 36208
  RGB32UI = 36209
  RGBA16UI = 36214
  RGB16UI = 36215
  RGBA8UI = 36220
  RGB8UI = 36221
  RGBA32I = 36226
  RGB32I = 36227
  RGBA16I = 36232
  RGB16I = 36233
  RGBA8I = 36238
  RGB8I = 36239
  RED_INTEGER = 36244
  GREEN_INTEGER = 36245
  BLUE_INTEGER = 36246
  RGB_INTEGER = 36248
  RGBA_INTEGER = 36249
  BGR_INTEGER = 36250
  BGRA_INTEGER = 36251
  SAMPLER_1D_ARRAY = 36288
  SAMPLER_2D_ARRAY = 36289
  SAMPLER_1D_ARRAY_SHADOW = 36291
  SAMPLER_2D_ARRAY_SHADOW = 36292
  SAMPLER_CUBE_SHADOW = 36293
  UNSIGNED_INT_VEC2 = 36294
  UNSIGNED_INT_VEC3 = 36295
  UNSIGNED_INT_VEC4 = 36296
  INT_SAMPLER_1D = 36297
  INT_SAMPLER_2D = 36298
  INT_SAMPLER_3D = 36299
  INT_SAMPLER_CUBE = 36300
  INT_SAMPLER_1D_ARRAY = 36302
  INT_SAMPLER_2D_ARRAY = 36303
  UNSIGNED_INT_SAMPLER_1D = 36305
  UNSIGNED_INT_SAMPLER_2D = 36306
  UNSIGNED_INT_SAMPLER_3D = 36307
  UNSIGNED_INT_SAMPLER_CUBE = 36308
  UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310
  UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311
  QUERY_WAIT = 36371
  QUERY_NO_WAIT = 36372
  QUERY_BY_REGION_WAIT = 36373
  QUERY_BY_REGION_NO_WAIT = 36374
  BUFFER_ACCESS_FLAGS = 37151
  BUFFER_MAP_LENGTH = 37152
  BUFFER_MAP_OFFSET = 37153
  DEPTH_COMPONENT32F = 36012
  DEPTH32F_STENCIL8 = 36013
  FLOAT_32_UNSIGNED_INT_24_8_REV = 36269
  INVALID_FRAMEBUFFER_OPERATION = 1286
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297
  FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303
  FRAMEBUFFER_DEFAULT = 33304
  FRAMEBUFFER_UNDEFINED = 33305
  DEPTH_STENCIL_ATTACHMENT = 33306
  MAX_RENDERBUFFER_SIZE = 34024
  DEPTH_STENCIL = 34041
  UNSIGNED_INT_24_8 = 34042
  DEPTH24_STENCIL8 = 35056
  TEXTURE_STENCIL_SIZE = 35057
  TEXTURE_RED_TYPE = 35856
  TEXTURE_GREEN_TYPE = 35857
  TEXTURE_BLUE_TYPE = 35858
  TEXTURE_ALPHA_TYPE = 35859
  TEXTURE_DEPTH_TYPE = 35862
  UNSIGNED_NORMALIZED = 35863
  FRAMEBUFFER_BINDING = 36006
  DRAW_FRAMEBUFFER_BINDING = 36006
  RENDERBUFFER_BINDING = 36007
  READ_FRAMEBUFFER = 36008
  DRAW_FRAMEBUFFER = 36009
  READ_FRAMEBUFFER_BINDING = 36010
  RENDERBUFFER_SAMPLES = 36011
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052
  FRAMEBUFFER_COMPLETE = 36053
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055
  FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059
  FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060
  FRAMEBUFFER_UNSUPPORTED = 36061
  MAX_COLOR_ATTACHMENTS = 36063
  COLOR_ATTACHMENT0 = 36064
  COLOR_ATTACHMENT1 = 36065
  COLOR_ATTACHMENT2 = 36066
  COLOR_ATTACHMENT3 = 36067
  COLOR_ATTACHMENT4 = 36068
  COLOR_ATTACHMENT5 = 36069
  COLOR_ATTACHMENT6 = 36070
  COLOR_ATTACHMENT7 = 36071
  COLOR_ATTACHMENT8 = 36072
  COLOR_ATTACHMENT9 = 36073
  COLOR_ATTACHMENT10 = 36074
  COLOR_ATTACHMENT11 = 36075
  COLOR_ATTACHMENT12 = 36076
  COLOR_ATTACHMENT13 = 36077
  COLOR_ATTACHMENT14 = 36078
  COLOR_ATTACHMENT15 = 36079
  COLOR_ATTACHMENT16 = 36080
  COLOR_ATTACHMENT17 = 36081
  COLOR_ATTACHMENT18 = 36082
  COLOR_ATTACHMENT19 = 36083
  COLOR_ATTACHMENT20 = 36084
  COLOR_ATTACHMENT21 = 36085
  COLOR_ATTACHMENT22 = 36086
  COLOR_ATTACHMENT23 = 36087
  COLOR_ATTACHMENT24 = 36088
  COLOR_ATTACHMENT25 = 36089
  COLOR_ATTACHMENT26 = 36090
  COLOR_ATTACHMENT27 = 36091
  COLOR_ATTACHMENT28 = 36092
  COLOR_ATTACHMENT29 = 36093
  COLOR_ATTACHMENT30 = 36094
  COLOR_ATTACHMENT31 = 36095
  DEPTH_ATTACHMENT = 36096
  STENCIL_ATTACHMENT = 36128
  FRAMEBUFFER = 36160
  RENDERBUFFER = 36161
  RENDERBUFFER_WIDTH = 36162
  RENDERBUFFER_HEIGHT = 36163
  RENDERBUFFER_INTERNAL_FORMAT = 36164
  STENCIL_INDEX1 = 36166
  STENCIL_INDEX4 = 36167
  STENCIL_INDEX8 = 36168
  STENCIL_INDEX16 = 36169
  RENDERBUFFER_RED_SIZE = 36176
  RENDERBUFFER_GREEN_SIZE = 36177
  RENDERBUFFER_BLUE_SIZE = 36178
  RENDERBUFFER_ALPHA_SIZE = 36179
  RENDERBUFFER_DEPTH_SIZE = 36180
  RENDERBUFFER_STENCIL_SIZE = 36181
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182
  MAX_SAMPLES = 36183
  FRAMEBUFFER_SRGB = 36281
  HALF_FLOAT = 5131
  MAP_READ_BIT = 1
  MAP_WRITE_BIT = 2
  MAP_INVALIDATE_RANGE_BIT = 4
  MAP_INVALIDATE_BUFFER_BIT = 8
  MAP_FLUSH_EXPLICIT_BIT = 16
  MAP_UNSYNCHRONIZED_BIT = 32
  COMPRESSED_RED_RGTC1 = 36283
  COMPRESSED_SIGNED_RED_RGTC1 = 36284
  COMPRESSED_RG_RGTC2 = 36285
  COMPRESSED_SIGNED_RG_RGTC2 = 36286
  RG = 33319
  RG_INTEGER = 33320
  R8 = 33321
  R16 = 33322
  RG8 = 33323
  RG16 = 33324
  R16F = 33325
  R32F = 33326
  RG16F = 33327
  RG32F = 33328
  R8I = 33329
  R8UI = 33330
  R16I = 33331
  R16UI = 33332
  R32I = 33333
  R32UI = 33334
  RG8I = 33335
  RG8UI = 33336
  RG16I = 33337
  RG16UI = 33338
  RG32I = 33339
  RG32UI = 33340
  VERTEX_ARRAY_BINDING = 34229
  VERSION_3_1 = 1
  SAMPLER_2D_RECT = 35683
  SAMPLER_2D_RECT_SHADOW = 35684
  SAMPLER_BUFFER = 36290
  INT_SAMPLER_2D_RECT = 36301
  INT_SAMPLER_BUFFER = 36304
  UNSIGNED_INT_SAMPLER_2D_RECT = 36309
  UNSIGNED_INT_SAMPLER_BUFFER = 36312
  TEXTURE_BUFFER = 35882
  MAX_TEXTURE_BUFFER_SIZE = 35883
  TEXTURE_BINDING_BUFFER = 35884
  TEXTURE_BUFFER_DATA_STORE_BINDING = 35885
  TEXTURE_RECTANGLE = 34037
  TEXTURE_BINDING_RECTANGLE = 34038
  PROXY_TEXTURE_RECTANGLE = 34039
  MAX_RECTANGLE_TEXTURE_SIZE = 34040
  R8_SNORM = 36756
  RG8_SNORM = 36757
  RGB8_SNORM = 36758
  RGBA8_SNORM = 36759
  R16_SNORM = 36760
  RG16_SNORM = 36761
  RGB16_SNORM = 36762
  RGBA16_SNORM = 36763
  SIGNED_NORMALIZED = 36764
  PRIMITIVE_RESTART = 36765
  PRIMITIVE_RESTART_INDEX = 36766
  COPY_READ_BUFFER = 36662
  COPY_WRITE_BUFFER = 36663
  UNIFORM_BUFFER = 35345
  UNIFORM_BUFFER_BINDING = 35368
  UNIFORM_BUFFER_START = 35369
  UNIFORM_BUFFER_SIZE = 35370
  MAX_VERTEX_UNIFORM_BLOCKS = 35371
  MAX_GEOMETRY_UNIFORM_BLOCKS = 35372
  MAX_FRAGMENT_UNIFORM_BLOCKS = 35373
  MAX_COMBINED_UNIFORM_BLOCKS = 35374
  MAX_UNIFORM_BUFFER_BINDINGS = 35375
  MAX_UNIFORM_BLOCK_SIZE = 35376
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377
  MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379
  UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380
  ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381
  ACTIVE_UNIFORM_BLOCKS = 35382
  UNIFORM_TYPE = 35383
  UNIFORM_SIZE = 35384
  UNIFORM_NAME_LENGTH = 35385
  UNIFORM_BLOCK_INDEX = 35386
  UNIFORM_OFFSET = 35387
  UNIFORM_ARRAY_STRIDE = 35388
  UNIFORM_MATRIX_STRIDE = 35389
  UNIFORM_IS_ROW_MAJOR = 35390
  UNIFORM_BLOCK_BINDING = 35391
  UNIFORM_BLOCK_DATA_SIZE = 35392
  UNIFORM_BLOCK_NAME_LENGTH = 35393
  UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396
  UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398
  VERSION_3_2 = 1
  CONTEXT_CORE_PROFILE_BIT = 1
  CONTEXT_COMPATIBILITY_PROFILE_BIT = 2
  LINES_ADJACENCY = 10
  LINE_STRIP_ADJACENCY = 11
  TRIANGLES_ADJACENCY = 12
  TRIANGLE_STRIP_ADJACENCY = 13
  PROGRAM_POINT_SIZE = 34370
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881
  FRAMEBUFFER_ATTACHMENT_LAYERED = 36263
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264
  GEOMETRY_SHADER = 36313
  GEOMETRY_VERTICES_OUT = 35094
  GEOMETRY_INPUT_TYPE = 35095
  GEOMETRY_OUTPUT_TYPE = 35096
  MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319
  MAX_GEOMETRY_OUTPUT_VERTICES = 36320
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321
  MAX_VERTEX_OUTPUT_COMPONENTS = 37154
  MAX_GEOMETRY_INPUT_COMPONENTS = 37155
  MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156
  MAX_FRAGMENT_INPUT_COMPONENTS = 37157
  CONTEXT_PROFILE_MASK = 37158
  DEPTH_CLAMP = 34383
  QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428
  FIRST_VERTEX_CONVENTION = 36429
  LAST_VERTEX_CONVENTION = 36430
  PROVOKING_VERTEX = 36431
  TEXTURE_CUBE_MAP_SEAMLESS = 34895
  MAX_SERVER_WAIT_TIMEOUT = 37137
  OBJECT_TYPE = 37138
  SYNC_CONDITION = 37139
  SYNC_STATUS = 37140
  SYNC_FLAGS = 37141
  SYNC_FENCE = 37142
  SYNC_GPU_COMMANDS_COMPLETE = 37143
  UNSIGNALED = 37144
  SIGNALED = 37145
  ALREADY_SIGNALED = 37146
  TIMEOUT_EXPIRED = 37147
  CONDITION_SATISFIED = 37148
  WAIT_FAILED = 37149
  SYNC_FLUSH_COMMANDS_BIT = 1
  SAMPLE_POSITION = 36432
  SAMPLE_MASK = 36433
  SAMPLE_MASK_VALUE = 36434
  MAX_SAMPLE_MASK_WORDS = 36441
  TEXTURE_2D_MULTISAMPLE = 37120
  PROXY_TEXTURE_2D_MULTISAMPLE = 37121
  TEXTURE_2D_MULTISAMPLE_ARRAY = 37122
  PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123
  TEXTURE_BINDING_2D_MULTISAMPLE = 37124
  TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125
  TEXTURE_SAMPLES = 37126
  TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127
  SAMPLER_2D_MULTISAMPLE = 37128
  INT_SAMPLER_2D_MULTISAMPLE = 37129
  UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130
  SAMPLER_2D_MULTISAMPLE_ARRAY = 37131
  INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132
  UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133
  MAX_COLOR_TEXTURE_SAMPLES = 37134
  MAX_DEPTH_TEXTURE_SAMPLES = 37135
  MAX_INTEGER_SAMPLES = 37136
  VERSION_3_3 = 1
  VERTEX_ATTRIB_ARRAY_DIVISOR = 35070
  SRC1_COLOR = 35065
  ONE_MINUS_SRC1_COLOR = 35066
  ONE_MINUS_SRC1_ALPHA = 35067
  MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068
  ANY_SAMPLES_PASSED = 35887
  SAMPLER_BINDING = 35097
  RGB10_A2UI = 36975
  TEXTURE_SWIZZLE_R = 36418
  TEXTURE_SWIZZLE_G = 36419
  TEXTURE_SWIZZLE_B = 36420
  TEXTURE_SWIZZLE_A = 36421
  TEXTURE_SWIZZLE_RGBA = 36422
  TIME_ELAPSED = 35007
  TIMESTAMP = 36392
  INT_2_10_10_10_REV = 36255
  VERSION_4_0 = 1
  SAMPLE_SHADING = 35894
  MIN_SAMPLE_SHADING_VALUE = 35895
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447
  TEXTURE_CUBE_MAP_ARRAY = 36873
  TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874
  PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875
  SAMPLER_CUBE_MAP_ARRAY = 36876
  SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877
  INT_SAMPLER_CUBE_MAP_ARRAY = 36878
  UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879
  DRAW_INDIRECT_BUFFER = 36671
  DRAW_INDIRECT_BUFFER_BINDING = 36675
  GEOMETRY_SHADER_INVOCATIONS = 34943
  MAX_GEOMETRY_SHADER_INVOCATIONS = 36442
  MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443
  MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444
  FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445
  MAX_VERTEX_STREAMS = 36465
  DOUBLE_VEC2 = 36860
  DOUBLE_VEC3 = 36861
  DOUBLE_VEC4 = 36862
  DOUBLE_MAT2 = 36678
  DOUBLE_MAT3 = 36679
  DOUBLE_MAT4 = 36680
  DOUBLE_MAT2X3 = 36681
  DOUBLE_MAT2X4 = 36682
  DOUBLE_MAT3X2 = 36683
  DOUBLE_MAT3X4 = 36684
  DOUBLE_MAT4X2 = 36685
  DOUBLE_MAT4X3 = 36686
  ACTIVE_SUBROUTINES = 36325
  ACTIVE_SUBROUTINE_UNIFORMS = 36326
  ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423
  ACTIVE_SUBROUTINE_MAX_LENGTH = 36424
  ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425
  MAX_SUBROUTINES = 36327
  MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328
  NUM_COMPATIBLE_SUBROUTINES = 36426
  COMPATIBLE_SUBROUTINES = 36427
  PATCHES = 14
  PATCH_VERTICES = 36466
  PATCH_DEFAULT_INNER_LEVEL = 36467
  PATCH_DEFAULT_OUTER_LEVEL = 36468
  TESS_CONTROL_OUTPUT_VERTICES = 36469
  TESS_GEN_MODE = 36470
  TESS_GEN_SPACING = 36471
  TESS_GEN_VERTEX_ORDER = 36472
  TESS_GEN_POINT_MODE = 36473
  ISOLINES = 36474
  FRACTIONAL_ODD = 36475
  FRACTIONAL_EVEN = 36476
  MAX_PATCH_VERTICES = 36477
  MAX_TESS_GEN_LEVEL = 36478
  MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479
  MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480
  MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481
  MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482
  MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483
  MAX_TESS_PATCH_COMPONENTS = 36484
  MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485
  MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486
  MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489
  MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490
  MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924
  MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925
  MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382
  MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383
  UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032
  UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033
  TESS_EVALUATION_SHADER = 36487
  TESS_CONTROL_SHADER = 36488
  TRANSFORM_FEEDBACK = 36386
  TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387
  TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388
  TRANSFORM_FEEDBACK_BINDING = 36389
  MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464
  VERSION_4_1 = 1
  FIXED = 5132
  IMPLEMENTATION_COLOR_READ_TYPE = 35738
  IMPLEMENTATION_COLOR_READ_FORMAT = 35739
  LOW_FLOAT = 36336
  MEDIUM_FLOAT = 36337
  HIGH_FLOAT = 36338
  LOW_INT = 36339
  MEDIUM_INT = 36340
  HIGH_INT = 36341
  SHADER_COMPILER = 36346
  SHADER_BINARY_FORMATS = 36344
  NUM_SHADER_BINARY_FORMATS = 36345
  MAX_VERTEX_UNIFORM_VECTORS = 36347
  MAX_VARYING_VECTORS = 36348
  MAX_FRAGMENT_UNIFORM_VECTORS = 36349
  RGB565 = 36194
  PROGRAM_BINARY_RETRIEVABLE_HINT = 33367
  PROGRAM_BINARY_LENGTH = 34625
  NUM_PROGRAM_BINARY_FORMATS = 34814
  PROGRAM_BINARY_FORMATS = 34815
  VERTEX_SHADER_BIT = 1
  FRAGMENT_SHADER_BIT = 2
  GEOMETRY_SHADER_BIT = 4
  TESS_CONTROL_SHADER_BIT = 8
  TESS_EVALUATION_SHADER_BIT = 16
  ALL_SHADER_BITS = 4294967295_i64
  PROGRAM_SEPARABLE = 33368
  ACTIVE_PROGRAM = 33369
  PROGRAM_PIPELINE_BINDING = 33370
  MAX_VIEWPORTS = 33371
  VIEWPORT_SUBPIXEL_BITS = 33372
  VIEWPORT_BOUNDS_RANGE = 33373
  LAYER_PROVOKING_VERTEX = 33374
  VIEWPORT_INDEX_PROVOKING_VERTEX = 33375
  UNDEFINED_VERTEX = 33376
  VERSION_4_2 = 1
  COPY_READ_BUFFER_BINDING = 36662
  COPY_WRITE_BUFFER_BINDING = 36663
  TRANSFORM_FEEDBACK_ACTIVE = 36388
  TRANSFORM_FEEDBACK_PAUSED = 36387
  UNPACK_COMPRESSED_BLOCK_WIDTH = 37159
  UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160
  UNPACK_COMPRESSED_BLOCK_DEPTH = 37161
  UNPACK_COMPRESSED_BLOCK_SIZE = 37162
  PACK_COMPRESSED_BLOCK_WIDTH = 37163
  PACK_COMPRESSED_BLOCK_HEIGHT = 37164
  PACK_COMPRESSED_BLOCK_DEPTH = 37165
  PACK_COMPRESSED_BLOCK_SIZE = 37166
  NUM_SAMPLE_COUNTS = 37760
  MIN_MAP_BUFFER_ALIGNMENT = 37052
  ATOMIC_COUNTER_BUFFER = 37568
  ATOMIC_COUNTER_BUFFER_BINDING = 37569
  ATOMIC_COUNTER_BUFFER_START = 37570
  ATOMIC_COUNTER_BUFFER_SIZE = 37571
  ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572
  ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573
  ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579
  MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580
  MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581
  MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582
  MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583
  MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584
  MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585
  MAX_VERTEX_ATOMIC_COUNTERS = 37586
  MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587
  MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588
  MAX_GEOMETRY_ATOMIC_COUNTERS = 37589
  MAX_FRAGMENT_ATOMIC_COUNTERS = 37590
  MAX_COMBINED_ATOMIC_COUNTERS = 37591
  MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592
  MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596
  ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593
  UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594
  UNSIGNED_INT_ATOMIC_COUNTER = 37595
  VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1
  ELEMENT_ARRAY_BARRIER_BIT = 2
  UNIFORM_BARRIER_BIT = 4
  TEXTURE_FETCH_BARRIER_BIT = 8
  SHADER_IMAGE_ACCESS_BARRIER_BIT = 32
  COMMAND_BARRIER_BIT = 64
  PIXEL_BUFFER_BARRIER_BIT = 128
  TEXTURE_UPDATE_BARRIER_BIT = 256
  BUFFER_UPDATE_BARRIER_BIT = 512
  FRAMEBUFFER_BARRIER_BIT = 1024
  TRANSFORM_FEEDBACK_BARRIER_BIT = 2048
  ATOMIC_COUNTER_BARRIER_BIT = 4096
  ALL_BARRIER_BITS = 4294967295_i64
  MAX_IMAGE_UNITS = 36664
  MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665
  IMAGE_BINDING_NAME = 36666
  IMAGE_BINDING_LEVEL = 36667
  IMAGE_BINDING_LAYERED = 36668
  IMAGE_BINDING_LAYER = 36669
  IMAGE_BINDING_ACCESS = 36670
  IMAGE_1D = 36940
  IMAGE_2D = 36941
  IMAGE_3D = 36942
  IMAGE_2D_RECT = 36943
  IMAGE_CUBE = 36944
  IMAGE_BUFFER = 36945
  IMAGE_1D_ARRAY = 36946
  IMAGE_2D_ARRAY = 36947
  IMAGE_CUBE_MAP_ARRAY = 36948
  IMAGE_2D_MULTISAMPLE = 36949
  IMAGE_2D_MULTISAMPLE_ARRAY = 36950
  INT_IMAGE_1D = 36951
  INT_IMAGE_2D = 36952
  INT_IMAGE_3D = 36953
  INT_IMAGE_2D_RECT = 36954
  INT_IMAGE_CUBE = 36955
  INT_IMAGE_BUFFER = 36956
  INT_IMAGE_1D_ARRAY = 36957
  INT_IMAGE_2D_ARRAY = 36958
  INT_IMAGE_CUBE_MAP_ARRAY = 36959
  INT_IMAGE_2D_MULTISAMPLE = 36960
  INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961
  UNSIGNED_INT_IMAGE_1D = 36962
  UNSIGNED_INT_IMAGE_2D = 36963
  UNSIGNED_INT_IMAGE_3D = 36964
  UNSIGNED_INT_IMAGE_2D_RECT = 36965
  UNSIGNED_INT_IMAGE_CUBE = 36966
  UNSIGNED_INT_IMAGE_BUFFER = 36967
  UNSIGNED_INT_IMAGE_1D_ARRAY = 36968
  UNSIGNED_INT_IMAGE_2D_ARRAY = 36969
  UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972
  MAX_IMAGE_SAMPLES = 36973
  IMAGE_BINDING_FORMAT = 36974
  IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063
  IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064
  IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065
  MAX_VERTEX_IMAGE_UNIFORMS = 37066
  MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067
  MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068
  MAX_GEOMETRY_IMAGE_UNIFORMS = 37069
  MAX_FRAGMENT_IMAGE_UNIFORMS = 37070
  MAX_COMBINED_IMAGE_UNIFORMS = 37071
  COMPRESSED_RGBA_BPTC_UNORM = 36492
  COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493
  COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494
  COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495
  TEXTURE_IMMUTABLE_FORMAT = 37167
  VERSION_4_3 = 1
  NUM_SHADING_LANGUAGE_VERSIONS = 33513
  VERTEX_ATTRIB_ARRAY_LONG = 34638
  COMPRESSED_RGB8_ETC2 = 37492
  COMPRESSED_SRGB8_ETC2 = 37493
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495
  COMPRESSED_RGBA8_ETC2_EAC = 37496
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497
  COMPRESSED_R11_EAC = 37488
  COMPRESSED_SIGNED_R11_EAC = 37489
  COMPRESSED_RG11_EAC = 37490
  COMPRESSED_SIGNED_RG11_EAC = 37491
  PRIMITIVE_RESTART_FIXED_INDEX = 36201
  ANY_SAMPLES_PASSED_CONSERVATIVE = 36202
  MAX_ELEMENT_INDEX = 36203
  COMPUTE_SHADER = 37305
  MAX_COMPUTE_UNIFORM_BLOCKS = 37307
  MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308
  MAX_COMPUTE_IMAGE_UNIFORMS = 37309
  MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378
  MAX_COMPUTE_UNIFORM_COMPONENTS = 33379
  MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380
  MAX_COMPUTE_ATOMIC_COUNTERS = 33381
  MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382
  MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099
  MAX_COMPUTE_WORK_GROUP_COUNT = 37310
  MAX_COMPUTE_WORK_GROUP_SIZE = 37311
  COMPUTE_WORK_GROUP_SIZE = 33383
  UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101
  DISPATCH_INDIRECT_BUFFER = 37102
  DISPATCH_INDIRECT_BUFFER_BINDING = 37103
  COMPUTE_SHADER_BIT = 32
  DEBUG_OUTPUT_SYNCHRONOUS = 33346
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347
  DEBUG_CALLBACK_FUNCTION = 33348
  DEBUG_CALLBACK_USER_PARAM = 33349
  DEBUG_SOURCE_API = 33350
  DEBUG_SOURCE_WINDOW_SYSTEM = 33351
  DEBUG_SOURCE_SHADER_COMPILER = 33352
  DEBUG_SOURCE_THIRD_PARTY = 33353
  DEBUG_SOURCE_APPLICATION = 33354
  DEBUG_SOURCE_OTHER = 33355
  DEBUG_TYPE_ERROR = 33356
  DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357
  DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358
  DEBUG_TYPE_PORTABILITY = 33359
  DEBUG_TYPE_PERFORMANCE = 33360
  DEBUG_TYPE_OTHER = 33361
  MAX_DEBUG_MESSAGE_LENGTH = 37187
  MAX_DEBUG_LOGGED_MESSAGES = 37188
  DEBUG_LOGGED_MESSAGES = 37189
  DEBUG_SEVERITY_HIGH = 37190
  DEBUG_SEVERITY_MEDIUM = 37191
  DEBUG_SEVERITY_LOW = 37192
  DEBUG_TYPE_MARKER = 33384
  DEBUG_TYPE_PUSH_GROUP = 33385
  DEBUG_TYPE_POP_GROUP = 33386
  DEBUG_SEVERITY_NOTIFICATION = 33387
  MAX_DEBUG_GROUP_STACK_DEPTH = 33388
  DEBUG_GROUP_STACK_DEPTH = 33389
  BUFFER = 33504
  SHADER = 33505
  PROGRAM = 33506
  QUERY = 33507
  PROGRAM_PIPELINE = 33508
  SAMPLER = 33510
  MAX_LABEL_LENGTH = 33512
  DEBUG_OUTPUT = 37600
  CONTEXT_FLAG_DEBUG_BIT = 2
  MAX_UNIFORM_LOCATIONS = 33390
  FRAMEBUFFER_DEFAULT_WIDTH = 37648
  FRAMEBUFFER_DEFAULT_HEIGHT = 37649
  FRAMEBUFFER_DEFAULT_LAYERS = 37650
  FRAMEBUFFER_DEFAULT_SAMPLES = 37651
  FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652
  MAX_FRAMEBUFFER_WIDTH = 37653
  MAX_FRAMEBUFFER_HEIGHT = 37654
  MAX_FRAMEBUFFER_LAYERS = 37655
  MAX_FRAMEBUFFER_SAMPLES = 37656
  INTERNALFORMAT_SUPPORTED = 33391
  INTERNALFORMAT_PREFERRED = 33392
  INTERNALFORMAT_RED_SIZE = 33393
  INTERNALFORMAT_GREEN_SIZE = 33394
  INTERNALFORMAT_BLUE_SIZE = 33395
  INTERNALFORMAT_ALPHA_SIZE = 33396
  INTERNALFORMAT_DEPTH_SIZE = 33397
  INTERNALFORMAT_STENCIL_SIZE = 33398
  INTERNALFORMAT_SHARED_SIZE = 33399
  INTERNALFORMAT_RED_TYPE = 33400
  INTERNALFORMAT_GREEN_TYPE = 33401
  INTERNALFORMAT_BLUE_TYPE = 33402
  INTERNALFORMAT_ALPHA_TYPE = 33403
  INTERNALFORMAT_DEPTH_TYPE = 33404
  INTERNALFORMAT_STENCIL_TYPE = 33405
  MAX_WIDTH = 33406
  MAX_HEIGHT = 33407
  MAX_DEPTH = 33408
  MAX_LAYERS = 33409
  MAX_COMBINED_DIMENSIONS = 33410
  COLOR_COMPONENTS = 33411
  DEPTH_COMPONENTS = 33412
  STENCIL_COMPONENTS = 33413
  COLOR_RENDERABLE = 33414
  DEPTH_RENDERABLE = 33415
  STENCIL_RENDERABLE = 33416
  FRAMEBUFFER_RENDERABLE = 33417
  FRAMEBUFFER_RENDERABLE_LAYERED = 33418
  FRAMEBUFFER_BLEND = 33419
  READ_PIXELS = 33420
  READ_PIXELS_FORMAT = 33421
  READ_PIXELS_TYPE = 33422
  TEXTURE_IMAGE_FORMAT = 33423
  TEXTURE_IMAGE_TYPE = 33424
  GET_TEXTURE_IMAGE_FORMAT = 33425
  GET_TEXTURE_IMAGE_TYPE = 33426
  MIPMAP = 33427
  MANUAL_GENERATE_MIPMAP = 33428
  AUTO_GENERATE_MIPMAP = 33429
  COLOR_ENCODING = 33430
  SRGB_READ = 33431
  SRGB_WRITE = 33432
  FILTER = 33434
  VERTEX_TEXTURE = 33435
  TESS_CONTROL_TEXTURE = 33436
  TESS_EVALUATION_TEXTURE = 33437
  GEOMETRY_TEXTURE = 33438
  FRAGMENT_TEXTURE = 33439
  COMPUTE_TEXTURE = 33440
  TEXTURE_SHADOW = 33441
  TEXTURE_GATHER = 33442
  TEXTURE_GATHER_SHADOW = 33443
  SHADER_IMAGE_LOAD = 33444
  SHADER_IMAGE_STORE = 33445
  SHADER_IMAGE_ATOMIC = 33446
  IMAGE_TEXEL_SIZE = 33447
  IMAGE_COMPATIBILITY_CLASS = 33448
  IMAGE_PIXEL_FORMAT = 33449
  IMAGE_PIXEL_TYPE = 33450
  SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452
  SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453
  SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454
  SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455
  TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457
  TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458
  TEXTURE_COMPRESSED_BLOCK_SIZE = 33459
  CLEAR_BUFFER = 33460
  TEXTURE_VIEW = 33461
  VIEW_COMPATIBILITY_CLASS = 33462
  FULL_SUPPORT = 33463
  CAVEAT_SUPPORT = 33464
  IMAGE_CLASS_4_X_32 = 33465
  IMAGE_CLASS_2_X_32 = 33466
  IMAGE_CLASS_1_X_32 = 33467
  IMAGE_CLASS_4_X_16 = 33468
  IMAGE_CLASS_2_X_16 = 33469
  IMAGE_CLASS_1_X_16 = 33470
  IMAGE_CLASS_4_X_8 = 33471
  IMAGE_CLASS_2_X_8 = 33472
  IMAGE_CLASS_1_X_8 = 33473
  IMAGE_CLASS_11_11_10 = 33474
  IMAGE_CLASS_10_10_10_2 = 33475
  VIEW_CLASS_128_BITS = 33476
  VIEW_CLASS_96_BITS = 33477
  VIEW_CLASS_64_BITS = 33478
  VIEW_CLASS_48_BITS = 33479
  VIEW_CLASS_32_BITS = 33480
  VIEW_CLASS_24_BITS = 33481
  VIEW_CLASS_16_BITS = 33482
  VIEW_CLASS_8_BITS = 33483
  VIEW_CLASS_S3TC_DXT1_RGB = 33484
  VIEW_CLASS_S3TC_DXT1_RGBA = 33485
  VIEW_CLASS_S3TC_DXT3_RGBA = 33486
  VIEW_CLASS_S3TC_DXT5_RGBA = 33487
  VIEW_CLASS_RGTC1_RED = 33488
  VIEW_CLASS_RGTC2_RG = 33489
  VIEW_CLASS_BPTC_UNORM = 33490
  VIEW_CLASS_BPTC_FLOAT = 33491
  UNIFORM = 37601
  UNIFORM_BLOCK = 37602
  PROGRAM_INPUT = 37603
  PROGRAM_OUTPUT = 37604
  BUFFER_VARIABLE = 37605
  SHADER_STORAGE_BLOCK = 37606
  VERTEX_SUBROUTINE = 37608
  TESS_CONTROL_SUBROUTINE = 37609
  TESS_EVALUATION_SUBROUTINE = 37610
  GEOMETRY_SUBROUTINE = 37611
  FRAGMENT_SUBROUTINE = 37612
  COMPUTE_SUBROUTINE = 37613
  VERTEX_SUBROUTINE_UNIFORM = 37614
  TESS_CONTROL_SUBROUTINE_UNIFORM = 37615
  TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616
  GEOMETRY_SUBROUTINE_UNIFORM = 37617
  FRAGMENT_SUBROUTINE_UNIFORM = 37618
  COMPUTE_SUBROUTINE_UNIFORM = 37619
  TRANSFORM_FEEDBACK_VARYING = 37620
  ACTIVE_RESOURCES = 37621
  MAX_NAME_LENGTH = 37622
  MAX_NUM_ACTIVE_VARIABLES = 37623
  MAX_NUM_COMPATIBLE_SUBROUTINES = 37624
  NAME_LENGTH = 37625
  TYPE = 37626
  ARRAY_SIZE = 37627
  OFFSET = 37628
  BLOCK_INDEX = 37629
  ARRAY_STRIDE = 37630
  MATRIX_STRIDE = 37631
  IS_ROW_MAJOR = 37632
  ATOMIC_COUNTER_BUFFER_INDEX = 37633
  BUFFER_BINDING = 37634
  BUFFER_DATA_SIZE = 37635
  NUM_ACTIVE_VARIABLES = 37636
  ACTIVE_VARIABLES = 37637
  REFERENCED_BY_VERTEX_SHADER = 37638
  REFERENCED_BY_TESS_CONTROL_SHADER = 37639
  REFERENCED_BY_TESS_EVALUATION_SHADER = 37640
  REFERENCED_BY_GEOMETRY_SHADER = 37641
  REFERENCED_BY_FRAGMENT_SHADER = 37642
  REFERENCED_BY_COMPUTE_SHADER = 37643
  TOP_LEVEL_ARRAY_SIZE = 37644
  TOP_LEVEL_ARRAY_STRIDE = 37645
  LOCATION = 37646
  LOCATION_INDEX = 37647
  IS_PER_PATCH = 37607
  SHADER_STORAGE_BUFFER = 37074
  SHADER_STORAGE_BUFFER_BINDING = 37075
  SHADER_STORAGE_BUFFER_START = 37076
  SHADER_STORAGE_BUFFER_SIZE = 37077
  MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078
  MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079
  MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080
  MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081
  MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082
  MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083
  MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084
  MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085
  MAX_SHADER_STORAGE_BLOCK_SIZE = 37086
  SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087
  SHADER_STORAGE_BARRIER_BIT = 8192
  MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665
  DEPTH_STENCIL_TEXTURE_MODE = 37098
  TEXTURE_BUFFER_OFFSET = 37277
  TEXTURE_BUFFER_SIZE = 37278
  TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279
  TEXTURE_VIEW_MIN_LEVEL = 33499
  TEXTURE_VIEW_NUM_LEVELS = 33500
  TEXTURE_VIEW_MIN_LAYER = 33501
  TEXTURE_VIEW_NUM_LAYERS = 33502
  TEXTURE_IMMUTABLE_LEVELS = 33503
  VERTEX_ATTRIB_BINDING = 33492
  VERTEX_ATTRIB_RELATIVE_OFFSET = 33493
  VERTEX_BINDING_DIVISOR = 33494
  VERTEX_BINDING_OFFSET = 33495
  VERTEX_BINDING_STRIDE = 33496
  MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497
  MAX_VERTEX_ATTRIB_BINDINGS = 33498
  VERTEX_BINDING_BUFFER = 36687
  VERSION_4_4 = 1
  MAX_VERTEX_ATTRIB_STRIDE = 33509
  PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313
  TEXTURE_BUFFER_BINDING = 35882
  MAP_PERSISTENT_BIT = 64
  MAP_COHERENT_BIT = 128
  DYNAMIC_STORAGE_BIT = 256
  CLIENT_STORAGE_BIT = 512
  CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384
  BUFFER_IMMUTABLE_STORAGE = 33311
  BUFFER_STORAGE_FLAGS = 33312
  CLEAR_TEXTURE = 37733
  LOCATION_COMPONENT = 37706
  TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707
  TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708
  QUERY_BUFFER = 37266
  QUERY_BUFFER_BARRIER_BIT = 32768
  QUERY_BUFFER_BINDING = 37267
  QUERY_RESULT_NO_WAIT = 37268
  MIRROR_CLAMP_TO_EDGE = 34627
  VERSION_4_5 = 1
  CONTEXT_LOST = 1287
  NEGATIVE_ONE_TO_ONE = 37726
  ZERO_TO_ONE = 37727
  CLIP_ORIGIN = 37724
  CLIP_DEPTH_MODE = 37725
  QUERY_WAIT_INVERTED = 36375
  QUERY_NO_WAIT_INVERTED = 36376
  QUERY_BY_REGION_WAIT_INVERTED = 36377
  QUERY_BY_REGION_NO_WAIT_INVERTED = 36378
  MAX_CULL_DISTANCES = 33529
  MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 33530
  TEXTURE_TARGET = 4102
  QUERY_TARGET = 33514
  GUILTY_CONTEXT_RESET = 33363
  INNOCENT_CONTEXT_RESET = 33364
  UNKNOWN_CONTEXT_RESET = 33365
  RESET_NOTIFICATION_STRATEGY = 33366
  LOSE_CONTEXT_ON_RESET = 33362
  NO_RESET_NOTIFICATION = 33377
  CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4
  CONTEXT_RELEASE_BEHAVIOR = 33531
  CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532
  VERSION_4_6 = 1
  SHADER_BINARY_FORMAT_SPIR_V = 38225
  SPIR_V_BINARY = 38226
  PARAMETER_BUFFER = 33006
  PARAMETER_BUFFER_BINDING = 33007
  CONTEXT_FLAG_NO_ERROR_BIT = 8
  VERTICES_SUBMITTED = 33518
  PRIMITIVES_SUBMITTED = 33519
  VERTEX_SHADER_INVOCATIONS = 33520
  TESS_CONTROL_SHADER_PATCHES = 33521
  TESS_EVALUATION_SHADER_INVOCATIONS = 33522
  GEOMETRY_SHADER_PRIMITIVES_EMITTED = 33523
  FRAGMENT_SHADER_INVOCATIONS = 33524
  COMPUTE_SHADER_INVOCATIONS = 33525
  CLIPPING_INPUT_PRIMITIVES = 33526
  CLIPPING_OUTPUT_PRIMITIVES = 33527
  POLYGON_OFFSET_CLAMP = 36379
  SPIR_V_EXTENSIONS = 38227
  NUM_SPIR_V_EXTENSIONS = 38228
  TEXTURE_MAX_ANISOTROPY = 34046
  MAX_TEXTURE_MAX_ANISOTROPY = 34047
  TRANSFORM_FEEDBACK_OVERFLOW = 33516
  TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 33517
  ARB_ES2_COMPATIBILITY = 1
  ARB_ES3_1_COMPATIBILITY = 1
  ARB_ES3_2_COMPATIBILITY = 1
  PRIMITIVE_BOUNDING_BOX_ARB = 37566
  MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 37761
  MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 37762
  ARB_ES3_COMPATIBILITY = 1
  ARB_ARRAYS_OF_ARRAYS = 1
  ARB_BASE_INSTANCE = 1
  ARB_BINDLESS_TEXTURE = 1
  UNSIGNED_INT64_ARB = 5135
  ARB_BLEND_FUNC_EXTENDED = 1
  ARB_BUFFER_STORAGE = 1
  ARB_CL_EVENT = 1
  SYNC_CL_EVENT_ARB = 33344
  SYNC_CL_EVENT_COMPLETE_ARB = 33345
  ARB_CLEAR_BUFFER_OBJECT = 1
  ARB_CLEAR_TEXTURE = 1
  ARB_CLIP_CONTROL = 1
  ARB_COMPRESSED_TEXTURE_PIXEL_STORAGE = 1
  ARB_COMPUTE_SHADER = 1
  ARB_COMPUTE_VARIABLE_GROUP_SIZE = 1
  MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 37700
  MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 37099
  MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 37701
  MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 37311
  ARB_CONDITIONAL_RENDER_INVERTED = 1
  ARB_CONSERVATIVE_DEPTH = 1
  ARB_COPY_BUFFER = 1
  ARB_COPY_IMAGE = 1
  ARB_CULL_DISTANCE = 1
  ARB_DEBUG_OUTPUT = 1
  DEBUG_OUTPUT_SYNCHRONOUS_ARB = 33346
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 33347
  DEBUG_CALLBACK_FUNCTION_ARB = 33348
  DEBUG_CALLBACK_USER_PARAM_ARB = 33349
  DEBUG_SOURCE_API_ARB = 33350
  DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 33351
  DEBUG_SOURCE_SHADER_COMPILER_ARB = 33352
  DEBUG_SOURCE_THIRD_PARTY_ARB = 33353
  DEBUG_SOURCE_APPLICATION_ARB = 33354
  DEBUG_SOURCE_OTHER_ARB = 33355
  DEBUG_TYPE_ERROR_ARB = 33356
  DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 33357
  DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 33358
  DEBUG_TYPE_PORTABILITY_ARB = 33359
  DEBUG_TYPE_PERFORMANCE_ARB = 33360
  DEBUG_TYPE_OTHER_ARB = 33361
  MAX_DEBUG_MESSAGE_LENGTH_ARB = 37187
  MAX_DEBUG_LOGGED_MESSAGES_ARB = 37188
  DEBUG_LOGGED_MESSAGES_ARB = 37189
  DEBUG_SEVERITY_HIGH_ARB = 37190
  DEBUG_SEVERITY_MEDIUM_ARB = 37191
  DEBUG_SEVERITY_LOW_ARB = 37192
  ARB_DEPTH_BUFFER_FLOAT = 1
  ARB_DEPTH_CLAMP = 1
  ARB_DERIVATIVE_CONTROL = 1
  ARB_DIRECT_STATE_ACCESS = 1
  ARB_DRAW_BUFFERS_BLEND = 1
  ARB_DRAW_ELEMENTS_BASE_VERTEX = 1
  ARB_DRAW_INDIRECT = 1
  ARB_DRAW_INSTANCED = 1
  ARB_ENHANCED_LAYOUTS = 1
  ARB_EXPLICIT_ATTRIB_LOCATION = 1
  ARB_EXPLICIT_UNIFORM_LOCATION = 1
  ARB_FRAGMENT_COORD_CONVENTIONS = 1
  ARB_FRAGMENT_LAYER_VIEWPORT = 1
  ARB_FRAGMENT_SHADER_INTERLOCK = 1
  ARB_FRAMEBUFFER_NO_ATTACHMENTS = 1
  ARB_FRAMEBUFFER_OBJECT = 1
  ARB_FRAMEBUFFER_SRGB = 1
  ARB_GEOMETRY_SHADER4 = 1
  LINES_ADJACENCY_ARB = 10
  LINE_STRIP_ADJACENCY_ARB = 11
  TRIANGLES_ADJACENCY_ARB = 12
  TRIANGLE_STRIP_ADJACENCY_ARB = 13
  PROGRAM_POINT_SIZE_ARB = 34370
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 35881
  FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 36263
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 36264
  FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265
  GEOMETRY_SHADER_ARB = 36313
  GEOMETRY_VERTICES_OUT_ARB = 36314
  GEOMETRY_INPUT_TYPE_ARB = 36315
  GEOMETRY_OUTPUT_TYPE_ARB = 36316
  MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317
  MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318
  MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 36319
  MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 36320
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 36321
  ARB_GET_PROGRAM_BINARY = 1
  ARB_GET_TEXTURE_SUB_IMAGE = 1
  ARB_GL_SPIRV = 1
  SHADER_BINARY_FORMAT_SPIR_V_ARB = 38225
  SPIR_V_BINARY_ARB = 38226
  ARB_GPU_SHADER5 = 1
  ARB_GPU_SHADER_FP64 = 1
  ARB_GPU_SHADER_INT64 = 1
  INT64_ARB = 5134
  INT64_VEC2_ARB = 36841
  INT64_VEC3_ARB = 36842
  INT64_VEC4_ARB = 36843
  UNSIGNED_INT64_VEC2_ARB = 36853
  UNSIGNED_INT64_VEC3_ARB = 36854
  UNSIGNED_INT64_VEC4_ARB = 36855
  ARB_HALF_FLOAT_VERTEX = 1
  ARB_IMAGING = 1
  ARB_INDIRECT_PARAMETERS = 1
  PARAMETER_BUFFER_ARB = 33006
  PARAMETER_BUFFER_BINDING_ARB = 33007
  ARB_INSTANCED_ARRAYS = 1
  VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070
  ARB_INTERNALFORMAT_QUERY = 1
  ARB_INTERNALFORMAT_QUERY2 = 1
  SRGB_DECODE_ARB = 33433
  ARB_INVALIDATE_SUBDATA = 1
  ARB_MAP_BUFFER_ALIGNMENT = 1
  ARB_MAP_BUFFER_RANGE = 1
  ARB_MULTI_BIND = 1
  ARB_MULTI_DRAW_INDIRECT = 1
  ARB_OCCLUSION_QUERY2 = 1
  ARB_PARALLEL_SHADER_COMPILE = 1
  MAX_SHADER_COMPILER_THREADS_ARB = 37296
  COMPLETION_STATUS_ARB = 37297
  ARB_PIPELINE_STATISTICS_QUERY = 1
  VERTICES_SUBMITTED_ARB = 33518
  PRIMITIVES_SUBMITTED_ARB = 33519
  VERTEX_SHADER_INVOCATIONS_ARB = 33520
  TESS_CONTROL_SHADER_PATCHES_ARB = 33521
  TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 33522
  GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 33523
  FRAGMENT_SHADER_INVOCATIONS_ARB = 33524
  COMPUTE_SHADER_INVOCATIONS_ARB = 33525
  CLIPPING_INPUT_PRIMITIVES_ARB = 33526
  CLIPPING_OUTPUT_PRIMITIVES_ARB = 33527
  ARB_PIXEL_BUFFER_OBJECT = 1
  PIXEL_PACK_BUFFER_ARB = 35051
  PIXEL_UNPACK_BUFFER_ARB = 35052
  PIXEL_PACK_BUFFER_BINDING_ARB = 35053
  PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055
  ARB_POLYGON_OFFSET_CLAMP = 1
  ARB_POST_DEPTH_COVERAGE = 1
  ARB_PROGRAM_INTERFACE_QUERY = 1
  ARB_PROVOKING_VERTEX = 1
  ARB_QUERY_BUFFER_OBJECT = 1
  ARB_ROBUST_BUFFER_ACCESS_BEHAVIOR = 1
  ARB_ROBUSTNESS = 1
  CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 4
  LOSE_CONTEXT_ON_RESET_ARB = 33362
  GUILTY_CONTEXT_RESET_ARB = 33363
  INNOCENT_CONTEXT_RESET_ARB = 33364
  UNKNOWN_CONTEXT_RESET_ARB = 33365
  RESET_NOTIFICATION_STRATEGY_ARB = 33366
  NO_RESET_NOTIFICATION_ARB = 33377
  ARB_ROBUSTNESS_ISOLATION = 1
  ARB_SAMPLE_LOCATIONS = 1
  SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 37693
  SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 37694
  SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 37695
  PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 37696
  SAMPLE_LOCATION_ARB = 36432
  PROGRAMMABLE_SAMPLE_LOCATION_ARB = 37697
  FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 37698
  FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 37699
  ARB_SAMPLE_SHADING = 1
  SAMPLE_SHADING_ARB = 35894
  MIN_SAMPLE_SHADING_VALUE_ARB = 35895
  ARB_SAMPLER_OBJECTS = 1
  ARB_SEAMLESS_CUBE_MAP = 1
  ARB_SEAMLESS_CUBEMAP_PER_TEXTURE = 1
  ARB_SEPARATE_SHADER_OBJECTS = 1
  ARB_SHADER_ATOMIC_COUNTER_OPS = 1
  ARB_SHADER_ATOMIC_COUNTERS = 1
  ARB_SHADER_BALLOT = 1
  ARB_SHADER_BIT_ENCODING = 1
  ARB_SHADER_CLOCK = 1
  ARB_SHADER_DRAW_PARAMETERS = 1
  ARB_SHADER_GROUP_VOTE = 1
  ARB_SHADER_IMAGE_LOAD_STORE = 1
  ARB_SHADER_IMAGE_SIZE = 1
  ARB_SHADER_PRECISION = 1
  ARB_SHADER_STENCIL_EXPORT = 1
  ARB_SHADER_STORAGE_BUFFER_OBJECT = 1
  ARB_SHADER_SUBROUTINE = 1
  ARB_SHADER_TEXTURE_IMAGE_SAMPLES = 1
  ARB_SHADER_VIEWPORT_LAYER_ARRAY = 1
  ARB_SHADING_LANGUAGE_420PACK = 1
  ARB_SHADING_LANGUAGE_INCLUDE = 1
  SHADER_INCLUDE_ARB = 36270
  NAMED_STRING_LENGTH_ARB = 36329
  NAMED_STRING_TYPE_ARB = 36330
  ARB_SHADING_LANGUAGE_PACKING = 1
  ARB_SPARSE_BUFFER = 1
  SPARSE_STORAGE_BIT_ARB = 1024
  SPARSE_BUFFER_PAGE_SIZE_ARB = 33528
  ARB_SPARSE_TEXTURE = 1
  TEXTURE_SPARSE_ARB = 37286
  VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287
  NUM_SPARSE_LEVELS_ARB = 37290
  NUM_VIRTUAL_PAGE_SIZES_ARB = 37288
  VIRTUAL_PAGE_SIZE_X_ARB = 37269
  VIRTUAL_PAGE_SIZE_Y_ARB = 37270
  VIRTUAL_PAGE_SIZE_Z_ARB = 37271
  MAX_SPARSE_TEXTURE_SIZE_ARB = 37272
  MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273
  MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 37274
  SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289
  ARB_SPARSE_TEXTURE2 = 1
  ARB_SPARSE_TEXTURE_CLAMP = 1
  ARB_SPIRV_EXTENSIONS = 1
  ARB_STENCIL_TEXTURING = 1
  ARB_SYNC = 1
  ARB_TESSELLATION_SHADER = 1
  ARB_TEXTURE_BARRIER = 1
  ARB_TEXTURE_BORDER_CLAMP = 1
  CLAMP_TO_BORDER_ARB = 33069
  ARB_TEXTURE_BUFFER_OBJECT = 1
  TEXTURE_BUFFER_ARB = 35882
  MAX_TEXTURE_BUFFER_SIZE_ARB = 35883
  TEXTURE_BINDING_BUFFER_ARB = 35884
  TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 35885
  TEXTURE_BUFFER_FORMAT_ARB = 35886
  ARB_TEXTURE_BUFFER_OBJECT_RGB32 = 1
  ARB_TEXTURE_BUFFER_RANGE = 1
  ARB_TEXTURE_COMPRESSION_BPTC = 1
  COMPRESSED_RGBA_BPTC_UNORM_ARB = 36492
  COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 36493
  COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 36494
  COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 36495
  ARB_TEXTURE_COMPRESSION_RGTC = 1
  ARB_TEXTURE_CUBE_MAP_ARRAY = 1
  TEXTURE_CUBE_MAP_ARRAY_ARB = 36873
  TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 36874
  PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 36875
  SAMPLER_CUBE_MAP_ARRAY_ARB = 36876
  SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 36877
  INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36878
  UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36879
  ARB_TEXTURE_FILTER_ANISOTROPIC = 1
  ARB_TEXTURE_FILTER_MINMAX = 1
  TEXTURE_REDUCTION_MODE_ARB = 37734
  WEIGHTED_AVERAGE_ARB = 37735
  ARB_TEXTURE_GATHER = 1
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36446
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36447
  MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 36767
  ARB_TEXTURE_MIRROR_CLAMP_TO_EDGE = 1
  ARB_TEXTURE_MIRRORED_REPEAT = 1
  MIRRORED_REPEAT_ARB = 33648
  ARB_TEXTURE_MULTISAMPLE = 1
  ARB_TEXTURE_NON_POWER_OF_TWO = 1
  ARB_TEXTURE_QUERY_LEVELS = 1
  ARB_TEXTURE_QUERY_LOD = 1
  ARB_TEXTURE_RG = 1
  ARB_TEXTURE_RGB10_A2UI = 1
  ARB_TEXTURE_STENCIL8 = 1
  ARB_TEXTURE_STORAGE = 1
  ARB_TEXTURE_STORAGE_MULTISAMPLE = 1
  ARB_TEXTURE_SWIZZLE = 1
  ARB_TEXTURE_VIEW = 1
  ARB_TIMER_QUERY = 1
  ARB_TRANSFORM_FEEDBACK2 = 1
  ARB_TRANSFORM_FEEDBACK3 = 1
  ARB_TRANSFORM_FEEDBACK_INSTANCED = 1
  ARB_TRANSFORM_FEEDBACK_OVERFLOW_QUERY = 1
  TRANSFORM_FEEDBACK_OVERFLOW_ARB = 33516
  TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 33517
  ARB_UNIFORM_BUFFER_OBJECT = 1
  ARB_VERTEX_ARRAY_BGRA = 1
  ARB_VERTEX_ARRAY_OBJECT = 1
  ARB_VERTEX_ATTRIB_64BIT = 1
  ARB_VERTEX_ATTRIB_BINDING = 1
  ARB_VERTEX_TYPE_10F_11F_11F_REV = 1
  ARB_VERTEX_TYPE_2_10_10_10_REV = 1
  ARB_VIEWPORT_ARRAY = 1
  KHR_BLEND_EQUATION_ADVANCED = 1
  MULTIPLY_KHR = 37524
  SCREEN_KHR = 37525
  OVERLAY_KHR = 37526
  DARKEN_KHR = 37527
  LIGHTEN_KHR = 37528
  COLORDODGE_KHR = 37529
  COLORBURN_KHR = 37530
  HARDLIGHT_KHR = 37531
  SOFTLIGHT_KHR = 37532
  DIFFERENCE_KHR = 37534
  EXCLUSION_KHR = 37536
  HSL_HUE_KHR = 37549
  HSL_SATURATION_KHR = 37550
  HSL_COLOR_KHR = 37551
  HSL_LUMINOSITY_KHR = 37552
  KHR_BLEND_EQUATION_ADVANCED_COHERENT = 1
  BLEND_ADVANCED_COHERENT_KHR = 37509
  KHR_CONTEXT_FLUSH_CONTROL = 1
  KHR_DEBUG = 1
  KHR_NO_ERROR = 1
  CONTEXT_FLAG_NO_ERROR_BIT_KHR = 8
  KHR_PARALLEL_SHADER_COMPILE = 1
  MAX_SHADER_COMPILER_THREADS_KHR = 37296
  COMPLETION_STATUS_KHR = 37297
  KHR_ROBUST_BUFFER_ACCESS_BEHAVIOR = 1
  KHR_ROBUSTNESS = 1
  CONTEXT_ROBUST_ACCESS = 37107
  KHR_TEXTURE_COMPRESSION_ASTC_HDR = 1
  COMPRESSED_RGBA_ASTC_4X4_KHR = 37808
  COMPRESSED_RGBA_ASTC_5X4_KHR = 37809
  COMPRESSED_RGBA_ASTC_5X5_KHR = 37810
  COMPRESSED_RGBA_ASTC_6X5_KHR = 37811
  COMPRESSED_RGBA_ASTC_6X6_KHR = 37812
  COMPRESSED_RGBA_ASTC_8X5_KHR = 37813
  COMPRESSED_RGBA_ASTC_8X6_KHR = 37814
  COMPRESSED_RGBA_ASTC_8X8_KHR = 37815
  COMPRESSED_RGBA_ASTC_10X5_KHR = 37816
  COMPRESSED_RGBA_ASTC_10X6_KHR = 37817
  COMPRESSED_RGBA_ASTC_10X8_KHR = 37818
  COMPRESSED_RGBA_ASTC_10X10_KHR = 37819
  COMPRESSED_RGBA_ASTC_12X10_KHR = 37820
  COMPRESSED_RGBA_ASTC_12X12_KHR = 37821
  COMPRESSED_SRGB8_ALPHA8_ASTC_4X4_KHR = 37840
  COMPRESSED_SRGB8_ALPHA8_ASTC_5X4_KHR = 37841
  COMPRESSED_SRGB8_ALPHA8_ASTC_5X5_KHR = 37842
  COMPRESSED_SRGB8_ALPHA8_ASTC_6X5_KHR = 37843
  COMPRESSED_SRGB8_ALPHA8_ASTC_6X6_KHR = 37844
  COMPRESSED_SRGB8_ALPHA8_ASTC_8X5_KHR = 37845
  COMPRESSED_SRGB8_ALPHA8_ASTC_8X6_KHR = 37846
  COMPRESSED_SRGB8_ALPHA8_ASTC_8X8_KHR = 37847
  COMPRESSED_SRGB8_ALPHA8_ASTC_10X5_KHR = 37848
  COMPRESSED_SRGB8_ALPHA8_ASTC_10X6_KHR = 37849
  COMPRESSED_SRGB8_ALPHA8_ASTC_10X8_KHR = 37850
  COMPRESSED_SRGB8_ALPHA8_ASTC_10X10_KHR = 37851
  COMPRESSED_SRGB8_ALPHA8_ASTC_12X10_KHR = 37852
  COMPRESSED_SRGB8_ALPHA8_ASTC_12X12_KHR = 37853
  KHR_TEXTURE_COMPRESSION_ASTC_LDR = 1
  KHR_TEXTURE_COMPRESSION_ASTC_SLICED_3D = 1
  AMD_PERFORMANCE_MONITOR = 1
  COUNTER_TYPE_AMD = 35776
  COUNTER_RANGE_AMD = 35777
  UNSIGNED_INT64_AMD = 35778
  PERCENTAGE_AMD = 35779
  PERFMON_RESULT_AVAILABLE_AMD = 35780
  PERFMON_RESULT_SIZE_AMD = 35781
  PERFMON_RESULT_AMD = 35782
  APPLE_RGB_422 = 1
  RGB_422_APPLE = 35359
  UNSIGNED_SHORT_8_8_APPLE = 34234
  UNSIGNED_SHORT_8_8_REV_APPLE = 34235
  RGB_RAW_422_APPLE = 35409
  EXT_DEBUG_LABEL = 1
  PROGRAM_PIPELINE_OBJECT_EXT = 35407
  PROGRAM_OBJECT_EXT = 35648
  SHADER_OBJECT_EXT = 35656
  BUFFER_OBJECT_EXT = 37201
  QUERY_OBJECT_EXT = 37203
  VERTEX_ARRAY_OBJECT_EXT = 37204
  EXT_DEBUG_MARKER = 1
  EXT_DIRECT_STATE_ACCESS = 1
  PROGRAM_MATRIX_EXT = 36397
  TRANSPOSE_PROGRAM_MATRIX_EXT = 36398
  PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399
  EXT_DRAW_INSTANCED = 1
  EXT_POLYGON_OFFSET_CLAMP = 1
  POLYGON_OFFSET_CLAMP_EXT = 36379
  EXT_POST_DEPTH_COVERAGE = 1
  EXT_RASTER_MULTISAMPLE = 1
  RASTER_MULTISAMPLE_EXT = 37671
  RASTER_SAMPLES_EXT = 37672
  MAX_RASTER_SAMPLES_EXT = 37673
  RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674
  MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675
  EFFECTIVE_RASTER_SAMPLES_EXT = 37676
  EXT_SEPARATE_SHADER_OBJECTS = 1
  ACTIVE_PROGRAM_EXT = 35725
  EXT_SHADER_INTEGER_MIX = 1
  EXT_TEXTURE_COMPRESSION_S3TC = 1
  COMPRESSED_RGB_S3TC_DXT1_EXT = 33776
  COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777
  COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778
  COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779
  EXT_TEXTURE_FILTER_MINMAX = 1
  EXT_TEXTURE_SRGB_DECODE = 1
  TEXTURE_SRGB_DECODE_EXT = 35400
  DECODE_EXT = 35401
  SKIP_DECODE_EXT = 35402
  EXT_WINDOW_RECTANGLES = 1
  INCLUSIVE_EXT = 36624
  EXCLUSIVE_EXT = 36625
  WINDOW_RECTANGLE_EXT = 36626
  WINDOW_RECTANGLE_MODE_EXT = 36627
  MAX_WINDOW_RECTANGLES_EXT = 36628
  NUM_WINDOW_RECTANGLES_EXT = 36629
  INTEL_CONSERVATIVE_RASTERIZATION = 1
  CONSERVATIVE_RASTERIZATION_INTEL = 33790
  INTEL_FRAMEBUFFER_CMAA = 1
  INTEL_PERFORMANCE_QUERY = 1
  PERFQUERY_SINGLE_CONTEXT_INTEL = 0
  PERFQUERY_GLOBAL_CONTEXT_INTEL = 1
  PERFQUERY_WAIT_INTEL = 33787
  PERFQUERY_FLUSH_INTEL = 33786
  PERFQUERY_DONOT_FLUSH_INTEL = 33785
  PERFQUERY_COUNTER_EVENT_INTEL = 38128
  PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129
  PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130
  PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131
  PERFQUERY_COUNTER_RAW_INTEL = 38132
  PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133
  PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136
  PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137
  PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138
  PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139
  PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140
  PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141
  PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142
  PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143
  PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144
  NV_BINDLESS_MULTI_DRAW_INDIRECT = 1
  NV_BINDLESS_MULTI_DRAW_INDIRECT_COUNT = 1
  NV_BINDLESS_TEXTURE = 1
  NV_BLEND_EQUATION_ADVANCED = 1
  BLEND_OVERLAP_NV = 37505
  BLEND_PREMULTIPLIED_SRC_NV = 37504
  BLUE_NV = 6405
  COLORBURN_NV = 37530
  COLORDODGE_NV = 37529
  CONJOINT_NV = 37508
  CONTRAST_NV = 37537
  DARKEN_NV = 37527
  DIFFERENCE_NV = 37534
  DISJOINT_NV = 37507
  DST_ATOP_NV = 37519
  DST_IN_NV = 37515
  DST_NV = 37511
  DST_OUT_NV = 37517
  DST_OVER_NV = 37513
  EXCLUSION_NV = 37536
  GREEN_NV = 6404
  HARDLIGHT_NV = 37531
  HARDMIX_NV = 37545
  HSL_COLOR_NV = 37551
  HSL_HUE_NV = 37549
  HSL_LUMINOSITY_NV = 37552
  HSL_SATURATION_NV = 37550
  INVERT_OVG_NV = 37556
  INVERT_RGB_NV = 37539
  LIGHTEN_NV = 37528
  LINEARBURN_NV = 37541
  LINEARDODGE_NV = 37540
  LINEARLIGHT_NV = 37543
  MINUS_CLAMPED_NV = 37555
  MINUS_NV = 37535
  MULTIPLY_NV = 37524
  OVERLAY_NV = 37526
  PINLIGHT_NV = 37544
  PLUS_CLAMPED_ALPHA_NV = 37554
  PLUS_CLAMPED_NV = 37553
  PLUS_DARKER_NV = 37522
  PLUS_NV = 37521
  RED_NV = 6403
  SCREEN_NV = 37525
  SOFTLIGHT_NV = 37532
  SRC_ATOP_NV = 37518
  SRC_IN_NV = 37514
  SRC_NV = 37510
  SRC_OUT_NV = 37516
  SRC_OVER_NV = 37512
  UNCORRELATED_NV = 37506
  VIVIDLIGHT_NV = 37542
  XOR_NV = 5382
  NV_BLEND_EQUATION_ADVANCED_COHERENT = 1
  BLEND_ADVANCED_COHERENT_NV = 37509
  NV_BLEND_MINMAX_FACTOR = 1
  FACTOR_MIN_AMD = 36892
  FACTOR_MAX_AMD = 36893
  NV_CLIP_SPACE_W_SCALING = 1
  VIEWPORT_POSITION_W_SCALE_NV = 37756
  VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 37757
  VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 37758
  NV_COMMAND_LIST = 1
  TERMINATE_SEQUENCE_COMMAND_NV = 0
  NOP_COMMAND_NV = 1
  DRAW_ELEMENTS_COMMAND_NV = 2
  DRAW_ARRAYS_COMMAND_NV = 3
  DRAW_ELEMENTS_STRIP_COMMAND_NV = 4
  DRAW_ARRAYS_STRIP_COMMAND_NV = 5
  DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 6
  DRAW_ARRAYS_INSTANCED_COMMAND_NV = 7
  ELEMENT_ADDRESS_COMMAND_NV = 8
  ATTRIBUTE_ADDRESS_COMMAND_NV = 9
  UNIFORM_ADDRESS_COMMAND_NV = 10
  BLEND_COLOR_COMMAND_NV = 11
  STENCIL_REF_COMMAND_NV = 12
  LINE_WIDTH_COMMAND_NV = 13
  POLYGON_OFFSET_COMMAND_NV = 14
  ALPHA_REF_COMMAND_NV = 15
  VIEWPORT_COMMAND_NV = 16
  SCISSOR_COMMAND_NV = 17
  FRONT_FACE_COMMAND_NV = 18
  NV_CONDITIONAL_RENDER = 1
  QUERY_WAIT_NV = 36371
  QUERY_NO_WAIT_NV = 36372
  QUERY_BY_REGION_WAIT_NV = 36373
  QUERY_BY_REGION_NO_WAIT_NV = 36374
  NV_CONSERVATIVE_RASTER = 1
  CONSERVATIVE_RASTERIZATION_NV = 37702
  SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703
  SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704
  MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705
  NV_CONSERVATIVE_RASTER_DILATE = 1
  CONSERVATIVE_RASTER_DILATE_NV = 37753
  CONSERVATIVE_RASTER_DILATE_RANGE_NV = 37754
  CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 37755
  NV_CONSERVATIVE_RASTER_PRE_SNAP_TRIANGLES = 1
  CONSERVATIVE_RASTER_MODE_NV = 38221
  CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 38222
  CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 38223
  NV_DRAW_VULKAN_IMAGE = 1
  NV_FILL_RECTANGLE = 1
  FILL_RECTANGLE_NV = 37692
  NV_FRAGMENT_COVERAGE_TO_COLOR = 1
  FRAGMENT_COVERAGE_TO_COLOR_NV = 37597
  FRAGMENT_COVERAGE_COLOR_NV = 37598
  NV_FRAGMENT_SHADER_INTERLOCK = 1
  NV_FRAMEBUFFER_MIXED_SAMPLES = 1
  COVERAGE_MODULATION_TABLE_NV = 37681
  COLOR_SAMPLES_NV = 36384
  DEPTH_SAMPLES_NV = 37677
  STENCIL_SAMPLES_NV = 37678
  MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679
  MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680
  COVERAGE_MODULATION_NV = 37682
  COVERAGE_MODULATION_TABLE_SIZE_NV = 37683
  NV_FRAMEBUFFER_MULTISAMPLE_COVERAGE = 1
  RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011
  RENDERBUFFER_COLOR_SAMPLES_NV = 36368
  MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369
  MULTISAMPLE_COVERAGE_MODES_NV = 36370
  NV_GEOMETRY_SHADER_PASSTHROUGH = 1
  NV_GPU_SHADER5 = 1
  INT64_NV = 5134
  UNSIGNED_INT64_NV = 5135
  INT8_NV = 36832
  INT8_VEC2_NV = 36833
  INT8_VEC3_NV = 36834
  INT8_VEC4_NV = 36835
  INT16_NV = 36836
  INT16_VEC2_NV = 36837
  INT16_VEC3_NV = 36838
  INT16_VEC4_NV = 36839
  INT64_VEC2_NV = 36841
  INT64_VEC3_NV = 36842
  INT64_VEC4_NV = 36843
  UNSIGNED_INT8_NV = 36844
  UNSIGNED_INT8_VEC2_NV = 36845
  UNSIGNED_INT8_VEC3_NV = 36846
  UNSIGNED_INT8_VEC4_NV = 36847
  UNSIGNED_INT16_NV = 36848
  UNSIGNED_INT16_VEC2_NV = 36849
  UNSIGNED_INT16_VEC3_NV = 36850
  UNSIGNED_INT16_VEC4_NV = 36851
  UNSIGNED_INT64_VEC2_NV = 36853
  UNSIGNED_INT64_VEC3_NV = 36854
  UNSIGNED_INT64_VEC4_NV = 36855
  FLOAT16_NV = 36856
  FLOAT16_VEC2_NV = 36857
  FLOAT16_VEC3_NV = 36858
  FLOAT16_VEC4_NV = 36859
  NV_INTERNALFORMAT_SAMPLE_QUERY = 1
  MULTISAMPLES_NV = 37745
  SUPERSAMPLE_SCALE_X_NV = 37746
  SUPERSAMPLE_SCALE_Y_NV = 37747
  CONFORMANT_NV = 37748
  NV_PATH_RENDERING = 1
  PATH_FORMAT_SVG_NV = 36976
  PATH_FORMAT_PS_NV = 36977
  STANDARD_FONT_NAME_NV = 36978
  SYSTEM_FONT_NAME_NV = 36979
  FILE_NAME_NV = 36980
  PATH_STROKE_WIDTH_NV = 36981
  PATH_END_CAPS_NV = 36982
  PATH_INITIAL_END_CAP_NV = 36983
  PATH_TERMINAL_END_CAP_NV = 36984
  PATH_JOIN_STYLE_NV = 36985
  PATH_MITER_LIMIT_NV = 36986
  PATH_DASH_CAPS_NV = 36987
  PATH_INITIAL_DASH_CAP_NV = 36988
  PATH_TERMINAL_DASH_CAP_NV = 36989
  PATH_DASH_OFFSET_NV = 36990
  PATH_CLIENT_LENGTH_NV = 36991
  PATH_FILL_MODE_NV = 36992
  PATH_FILL_MASK_NV = 36993
  PATH_FILL_COVER_MODE_NV = 36994
  PATH_STROKE_COVER_MODE_NV = 36995
  PATH_STROKE_MASK_NV = 36996
  COUNT_UP_NV = 37000
  COUNT_DOWN_NV = 37001
  PATH_OBJECT_BOUNDING_BOX_NV = 37002
  CONVEX_HULL_NV = 37003
  BOUNDING_BOX_NV = 37005
  TRANSLATE_X_NV = 37006
  TRANSLATE_Y_NV = 37007
  TRANSLATE_2D_NV = 37008
  TRANSLATE_3D_NV = 37009
  AFFINE_2D_NV = 37010
  AFFINE_3D_NV = 37012
  TRANSPOSE_AFFINE_2D_NV = 37014
  TRANSPOSE_AFFINE_3D_NV = 37016
  UTF8_NV = 37018
  UTF16_NV = 37019
  BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020
  PATH_COMMAND_COUNT_NV = 37021
  PATH_COORD_COUNT_NV = 37022
  PATH_DASH_ARRAY_COUNT_NV = 37023
  PATH_COMPUTED_LENGTH_NV = 37024
  PATH_FILL_BOUNDING_BOX_NV = 37025
  PATH_STROKE_BOUNDING_BOX_NV = 37026
  SQUARE_NV = 37027
  ROUND_NV = 37028
  TRIANGULAR_NV = 37029
  BEVEL_NV = 37030
  MITER_REVERT_NV = 37031
  MITER_TRUNCATE_NV = 37032
  SKIP_MISSING_GLYPH_NV = 37033
  USE_MISSING_GLYPH_NV = 37034
  PATH_ERROR_POSITION_NV = 37035
  ACCUM_ADJACENT_PAIRS_NV = 37037
  ADJACENT_PAIRS_NV = 37038
  FIRST_TO_REST_NV = 37039
  PATH_GEN_MODE_NV = 37040
  PATH_GEN_COEFF_NV = 37041
  PATH_GEN_COMPONENTS_NV = 37043
  PATH_STENCIL_FUNC_NV = 37047
  PATH_STENCIL_REF_NV = 37048
  PATH_STENCIL_VALUE_MASK_NV = 37049
  PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053
  PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054
  PATH_COVER_DEPTH_FUNC_NV = 37055
  PATH_DASH_OFFSET_RESET_NV = 37044
  MOVE_TO_RESETS_NV = 37045
  MOVE_TO_CONTINUES_NV = 37046
  CLOSE_PATH_NV = 0
  MOVE_TO_NV = 2
  RELATIVE_MOVE_TO_NV = 3
  LINE_TO_NV = 4
  RELATIVE_LINE_TO_NV = 5
  HORIZONTAL_LINE_TO_NV = 6
  RELATIVE_HORIZONTAL_LINE_TO_NV = 7
  VERTICAL_LINE_TO_NV = 8
  RELATIVE_VERTICAL_LINE_TO_NV = 9
  QUADRATIC_CURVE_TO_NV = 10
  RELATIVE_QUADRATIC_CURVE_TO_NV = 11
  CUBIC_CURVE_TO_NV = 12
  RELATIVE_CUBIC_CURVE_TO_NV = 13
  SMOOTH_QUADRATIC_CURVE_TO_NV = 14
  RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15
  SMOOTH_CUBIC_CURVE_TO_NV = 16
  RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17
  SMALL_CCW_ARC_TO_NV = 18
  RELATIVE_SMALL_CCW_ARC_TO_NV = 19
  SMALL_CW_ARC_TO_NV = 20
  RELATIVE_SMALL_CW_ARC_TO_NV = 21
  LARGE_CCW_ARC_TO_NV = 22
  RELATIVE_LARGE_CCW_ARC_TO_NV = 23
  LARGE_CW_ARC_TO_NV = 24
  RELATIVE_LARGE_CW_ARC_TO_NV = 25
  RESTART_PATH_NV = 240
  DUP_FIRST_CUBIC_CURVE_TO_NV = 242
  DUP_LAST_CUBIC_CURVE_TO_NV = 244
  RECT_NV = 246
  CIRCULAR_CCW_ARC_TO_NV = 248
  CIRCULAR_CW_ARC_TO_NV = 250
  CIRCULAR_TANGENT_ARC_TO_NV = 252
  ARC_TO_NV = 254
  RELATIVE_ARC_TO_NV = 255
  BOLD_BIT_NV = 1
  ITALIC_BIT_NV = 2
  GLYPH_WIDTH_BIT_NV = 1
  GLYPH_HEIGHT_BIT_NV = 2
  GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4
  GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8
  GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16
  GLYPH_VERTICAL_BEARING_X_BIT_NV = 32
  GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64
  GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128
  GLYPH_HAS_KERNING_BIT_NV = 256
  FONT_X_MIN_BOUNDS_BIT_NV = 65536
  FONT_Y_MIN_BOUNDS_BIT_NV = 131072
  FONT_X_MAX_BOUNDS_BIT_NV = 262144
  FONT_Y_MAX_BOUNDS_BIT_NV = 524288
  FONT_UNITS_PER_EM_BIT_NV = 1048576
  FONT_ASCENDER_BIT_NV = 2097152
  FONT_DESCENDER_BIT_NV = 4194304
  FONT_HEIGHT_BIT_NV = 8388608
  FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216
  FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432
  FONT_UNDERLINE_POSITION_BIT_NV = 67108864
  FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728
  FONT_HAS_KERNING_BIT_NV = 268435456
  ROUNDED_RECT_NV = 232
  RELATIVE_ROUNDED_RECT_NV = 233
  ROUNDED_RECT2_NV = 234
  RELATIVE_ROUNDED_RECT2_NV = 235
  ROUNDED_RECT4_NV = 236
  RELATIVE_ROUNDED_RECT4_NV = 237
  ROUNDED_RECT8_NV = 238
  RELATIVE_ROUNDED_RECT8_NV = 239
  RELATIVE_RECT_NV = 247
  FONT_GLYPHS_AVAILABLE_NV = 37736
  FONT_TARGET_UNAVAILABLE_NV = 37737
  FONT_UNAVAILABLE_NV = 37738
  FONT_UNINTELLIGIBLE_NV = 37739
  CONIC_CURVE_TO_NV = 26
  RELATIVE_CONIC_CURVE_TO_NV = 27
  FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912
  STANDARD_FONT_FORMAT_NV = 37740
  PATH_PROJECTION_NV = 5889
  PATH_MODELVIEW_NV = 5888
  PATH_MODELVIEW_STACK_DEPTH_NV = 2979
  PATH_MODELVIEW_MATRIX_NV = 2982
  PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382
  PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019
  PATH_PROJECTION_STACK_DEPTH_NV = 2980
  PATH_PROJECTION_MATRIX_NV = 2983
  PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384
  PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020
  FRAGMENT_INPUT_NV = 37741
  NV_PATH_RENDERING_SHARED_EDGE = 1
  SHARED_EDGE_NV = 192
  NV_SAMPLE_LOCATIONS = 1
  SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693
  SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694
  SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695
  PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696
  SAMPLE_LOCATION_NV = 36432
  PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697
  FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698
  FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699
  NV_SAMPLE_MASK_OVERRIDE_COVERAGE = 1
  NV_SHADER_ATOMIC_COUNTERS = 1
  NV_SHADER_ATOMIC_FLOAT = 1
  NV_SHADER_ATOMIC_FLOAT64 = 1
  NV_SHADER_ATOMIC_FP16_VECTOR = 1
  NV_SHADER_ATOMIC_INT64 = 1
  NV_SHADER_BUFFER_LOAD = 1
  BUFFER_GPU_ADDRESS_NV = 36637
  GPU_ADDRESS_NV = 36660
  MAX_SHADER_BUFFER_ADDRESS_NV = 36661
  NV_SHADER_BUFFER_STORE = 1
  SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 16
  NV_SHADER_THREAD_GROUP = 1
  WARP_SIZE_NV = 37689
  WARPS_PER_SM_NV = 37690
  SM_COUNT_NV = 37691
  NV_SHADER_THREAD_SHUFFLE = 1
  NV_STEREO_VIEW_RENDERING = 1
  NV_TEXTURE_BARRIER = 1
  NV_TEXTURE_RECTANGLE_COMPRESSED = 1
  NV_UNIFORM_BUFFER_UNIFIED_MEMORY = 1
  UNIFORM_BUFFER_UNIFIED_NV = 37742
  UNIFORM_BUFFER_ADDRESS_NV = 37743
  UNIFORM_BUFFER_LENGTH_NV = 37744
  NV_VERTEX_ATTRIB_INTEGER_64BIT = 1
  NV_VERTEX_BUFFER_UNIFIED_MEMORY = 1
  VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638
  ELEMENT_ARRAY_UNIFIED_NV = 36639
  VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640
  VERTEX_ARRAY_ADDRESS_NV = 36641
  NORMAL_ARRAY_ADDRESS_NV = 36642
  COLOR_ARRAY_ADDRESS_NV = 36643
  INDEX_ARRAY_ADDRESS_NV = 36644
  TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645
  EDGE_FLAG_ARRAY_ADDRESS_NV = 36646
  SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647
  FOG_COORD_ARRAY_ADDRESS_NV = 36648
  ELEMENT_ARRAY_ADDRESS_NV = 36649
  VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650
  VERTEX_ARRAY_LENGTH_NV = 36651
  NORMAL_ARRAY_LENGTH_NV = 36652
  COLOR_ARRAY_LENGTH_NV = 36653
  INDEX_ARRAY_LENGTH_NV = 36654
  TEXTURE_COORD_ARRAY_LENGTH_NV = 36655
  EDGE_FLAG_ARRAY_LENGTH_NV = 36656
  SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657
  FOG_COORD_ARRAY_LENGTH_NV = 36658
  ELEMENT_ARRAY_LENGTH_NV = 36659
  DRAW_INDIRECT_UNIFIED_NV = 36672
  DRAW_INDIRECT_ADDRESS_NV = 36673
  DRAW_INDIRECT_LENGTH_NV = 36674
  NV_VIEWPORT_ARRAY2 = 1
  NV_VIEWPORT_SWIZZLE = 1
  VIEWPORT_SWIZZLE_POSITIVE_X_NV = 37712
  VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 37713
  VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 37714
  VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 37715
  VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 37716
  VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 37717
  VIEWPORT_SWIZZLE_POSITIVE_W_NV = 37718
  VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 37719
  VIEWPORT_SWIZZLE_X_NV = 37720
  VIEWPORT_SWIZZLE_Y_NV = 37721
  VIEWPORT_SWIZZLE_Z_NV = 37722
  VIEWPORT_SWIZZLE_W_NV = 37723
  OVR_MULTIVIEW = 1
  FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 38448
  FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 38450
  MAX_VIEWS_OVR = 38449
  FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 38451
  OVR_MULTIVIEW2 = 1
  QUAD_STRIP = 8
  POLYGON = 9
  NORMAL_ARRAY = 32885
  COLOR_ARRAY = 32886
  INDEX_ARRAY = 32887
  TEXTURE_COORD_ARRAY = 32888
  EDGE_FLAG_ARRAY = 32889
  VERTEX_ARRAY_SIZE = 32890
  VERTEX_ARRAY_TYPE = 32891
  VERTEX_ARRAY_STRIDE = 32892
  NORMAL_ARRAY_TYPE = 32894
  NORMAL_ARRAY_STRIDE = 32895
  COLOR_ARRAY_SIZE = 32897
  COLOR_ARRAY_TYPE = 32898
  COLOR_ARRAY_STRIDE = 32899
  INDEX_ARRAY_TYPE = 32901
  INDEX_ARRAY_STRIDE = 32902
  TEXTURE_COORD_ARRAY_SIZE = 32904
  TEXTURE_COORD_ARRAY_TYPE = 32905
  TEXTURE_COORD_ARRAY_STRIDE = 32906
  EDGE_FLAG_ARRAY_STRIDE = 32908
  VERTEX_ARRAY_POINTER = 32910
  NORMAL_ARRAY_POINTER = 32911
  COLOR_ARRAY_POINTER = 32912
  INDEX_ARRAY_POINTER = 32913
  TEXTURE_COORD_ARRAY_POINTER = 32914
  EDGE_FLAG_ARRAY_POINTER = 32915
  V2F = 10784
  V3F = 10785
  C4UB_V2F = 10786
  C4UB_V3F = 10787
  C3F_V3F = 10788
  N3F_V3F = 10789
  C4F_N3F_V3F = 10790
  T2F_V3F = 10791
  T4F_V4F = 10792
  T2F_C4UB_V3F = 10793
  T2F_C3F_V3F = 10794
  T2F_N3F_V3F = 10795
  T2F_C4F_N3F_V3F = 10796
  T4F_C4F_N3F_V4F = 10797
  MATRIX_MODE = 2976
  MODELVIEW = 5888
  PROJECTION = 5889
  POINT_SMOOTH = 2832
  LINE_STIPPLE = 2852
  LINE_STIPPLE_PATTERN = 2853
  LINE_STIPPLE_REPEAT = 2854
  POLYGON_STIPPLE = 2882
  EDGE_FLAG = 2883
  COMPILE = 4864
  COMPILE_AND_EXECUTE = 4865
  LIST_BASE = 2866
  LIST_INDEX = 2867
  LIST_MODE = 2864
  DEPTH_BITS = 3414
  LIGHTING = 2896
  LIGHT0 = 16384
  LIGHT1 = 16385
  LIGHT2 = 16386
  LIGHT3 = 16387
  LIGHT4 = 16388
  LIGHT5 = 16389
  LIGHT6 = 16390
  LIGHT7 = 16391
  SPOT_EXPONENT = 4613
  SPOT_CUTOFF = 4614
  CONSTANT_ATTENUATION = 4615
  LINEAR_ATTENUATION = 4616
  QUADRATIC_ATTENUATION = 4617
  AMBIENT = 4608
  DIFFUSE = 4609
  SPECULAR = 4610
  SHININESS = 5633
  EMISSION = 5632
  POSITION = 4611
  SPOT_DIRECTION = 4612
  AMBIENT_AND_DIFFUSE = 5634
  COLOR_INDEXES = 5635
  LIGHT_MODEL_TWO_SIDE = 2898
  LIGHT_MODEL_LOCAL_VIEWER = 2897
  LIGHT_MODEL_AMBIENT = 2899
  SHADE_MODEL = 2900
  FLAT = 7424
  SMOOTH = 7425
  COLOR_MATERIAL = 2903
  COLOR_MATERIAL_FACE = 2901
  COLOR_MATERIAL_PARAMETER = 2902
  NORMALIZE = 2977
  CLIP_PLANE0 = 12288
  CLIP_PLANE1 = 12289
  CLIP_PLANE2 = 12290
  CLIP_PLANE3 = 12291
  CLIP_PLANE4 = 12292
  CLIP_PLANE5 = 12293
  ACCUM_RED_BITS = 3416
  ACCUM_GREEN_BITS = 3417
  ACCUM_BLUE_BITS = 3418
  ACCUM_ALPHA_BITS = 3419
  ACCUM_CLEAR_VALUE = 2944
  ACCUM = 256
  ADD = 260
  LOAD = 257
  MULT = 259
  RETURN = 258
  ALPHA_TEST = 3008
  ALPHA_TEST_REF = 3010
  ALPHA_TEST_FUNC = 3009
  FEEDBACK = 7169
  RENDER = 7168
  SELECT = 7170
  POINT_TOKEN = 1793
  LINE_TOKEN = 1794
  LINE_RESET_TOKEN = 1799
  POLYGON_TOKEN = 1795
  BITMAP_TOKEN = 1796
  DRAW_PIXEL_TOKEN = 1797
  COPY_PIXEL_TOKEN = 1798
  PASS_THROUGH_TOKEN = 1792
  FEEDBACK_BUFFER_POINTER = 3568
  FEEDBACK_BUFFER_SIZE = 3569
  FEEDBACK_BUFFER_TYPE = 3570
  SELECTION_BUFFER_POINTER = 3571
  SELECTION_BUFFER_SIZE = 3572
  FOG = 2912
  FOG_MODE = 2917
  FOG_DENSITY = 2914
  FOG_COLOR = 2918
  FOG_INDEX = 2913
  FOG_START = 2915
  FOG_END = 2916
  EXP = 2048
  EXP2 = 2049
  LOGIC_OP = 3057
  INDEX_LOGIC_OP = 3057
  STENCIL_BITS = 3415
  AUX0 = 1033
  AUX1 = 1034
  AUX2 = 1035
  AUX3 = 1036
  COLOR_INDEX = 6400
  LUMINANCE = 6409
  LUMINANCE_ALPHA = 6410
  ALPHA_BITS = 3413
  RED_BITS = 3410
  GREEN_BITS = 3411
  BLUE_BITS = 3412
  INDEX_BITS = 3409
  AUX_BUFFERS = 3072
  BITMAP = 6656
  MAX_LIST_NESTING = 2865
  MAX_EVAL_ORDER = 3376
  MAX_LIGHTS = 3377
  MAX_CLIP_PLANES = 3378
  MAX_PIXEL_MAP_TABLE = 3380
  MAX_ATTRIB_STACK_DEPTH = 3381
  MAX_MODELVIEW_STACK_DEPTH = 3382
  MAX_NAME_STACK_DEPTH = 3383
  MAX_PROJECTION_STACK_DEPTH = 3384
  MAX_TEXTURE_STACK_DEPTH = 3385
  MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387
  ATTRIB_STACK_DEPTH = 2992
  CLIENT_ATTRIB_STACK_DEPTH = 2993
  CURRENT_INDEX = 2817
  CURRENT_COLOR = 2816
  CURRENT_NORMAL = 2818
  CURRENT_RASTER_COLOR = 2820
  CURRENT_RASTER_DISTANCE = 2825
  CURRENT_RASTER_INDEX = 2821
  CURRENT_RASTER_POSITION = 2823
  CURRENT_RASTER_TEXTURE_COORDS = 2822
  CURRENT_RASTER_POSITION_VALID = 2824
  CURRENT_TEXTURE_COORDS = 2819
  INDEX_CLEAR_VALUE = 3104
  INDEX_MODE = 3120
  INDEX_WRITEMASK = 3105
  MODELVIEW_MATRIX = 2982
  MODELVIEW_STACK_DEPTH = 2979
  NAME_STACK_DEPTH = 3440
  PROJECTION_MATRIX = 2983
  PROJECTION_STACK_DEPTH = 2980
  RENDER_MODE = 3136
  RGBA_MODE = 3121
  TEXTURE_MATRIX = 2984
  TEXTURE_STACK_DEPTH = 2981
  AUTO_NORMAL = 3456
  MAP1_COLOR_4 = 3472
  MAP1_INDEX = 3473
  MAP1_NORMAL = 3474
  MAP1_TEXTURE_COORD_1 = 3475
  MAP1_TEXTURE_COORD_2 = 3476
  MAP1_TEXTURE_COORD_3 = 3477
  MAP1_TEXTURE_COORD_4 = 3478
  MAP1_VERTEX_3 = 3479
  MAP1_VERTEX_4 = 3480
  MAP2_COLOR_4 = 3504
  MAP2_INDEX = 3505
  MAP2_NORMAL = 3506
  MAP2_TEXTURE_COORD_1 = 3507
  MAP2_TEXTURE_COORD_2 = 3508
  MAP2_TEXTURE_COORD_3 = 3509
  MAP2_TEXTURE_COORD_4 = 3510
  MAP2_VERTEX_3 = 3511
  MAP2_VERTEX_4 = 3512
  MAP1_GRID_DOMAIN = 3536
  MAP1_GRID_SEGMENTS = 3537
  MAP2_GRID_DOMAIN = 3538
  MAP2_GRID_SEGMENTS = 3539
  COEFF = 2560
  ORDER = 2561
  DOMAIN = 2562
  PERSPECTIVE_CORRECTION_HINT = 3152
  POINT_SMOOTH_HINT = 3153
  FOG_HINT = 3156
  MAP_COLOR = 3344
  MAP_STENCIL = 3345
  INDEX_SHIFT = 3346
  INDEX_OFFSET = 3347
  RED_SCALE = 3348
  RED_BIAS = 3349
  GREEN_SCALE = 3352
  GREEN_BIAS = 3353
  BLUE_SCALE = 3354
  BLUE_BIAS = 3355
  ALPHA_SCALE = 3356
  ALPHA_BIAS = 3357
  DEPTH_SCALE = 3358
  DEPTH_BIAS = 3359
  PIXEL_MAP_S_TO_S_SIZE = 3249
  PIXEL_MAP_I_TO_I_SIZE = 3248
  PIXEL_MAP_I_TO_R_SIZE = 3250
  PIXEL_MAP_I_TO_G_SIZE = 3251
  PIXEL_MAP_I_TO_B_SIZE = 3252
  PIXEL_MAP_I_TO_A_SIZE = 3253
  PIXEL_MAP_R_TO_R_SIZE = 3254
  PIXEL_MAP_G_TO_G_SIZE = 3255
  PIXEL_MAP_B_TO_B_SIZE = 3256
  PIXEL_MAP_A_TO_A_SIZE = 3257
  PIXEL_MAP_S_TO_S = 3185
  PIXEL_MAP_I_TO_I = 3184
  PIXEL_MAP_I_TO_R = 3186
  PIXEL_MAP_I_TO_G = 3187
  PIXEL_MAP_I_TO_B = 3188
  PIXEL_MAP_I_TO_A = 3189
  PIXEL_MAP_R_TO_R = 3190
  PIXEL_MAP_G_TO_G = 3191
  PIXEL_MAP_B_TO_B = 3192
  PIXEL_MAP_A_TO_A = 3193
  ZOOM_X = 3350
  ZOOM_Y = 3351
  TEXTURE_ENV = 8960
  TEXTURE_ENV_MODE = 8704
  TEXTURE_ENV_COLOR = 8705
  TEXTURE_GEN_S = 3168
  TEXTURE_GEN_T = 3169
  TEXTURE_GEN_R = 3170
  TEXTURE_GEN_Q = 3171
  TEXTURE_GEN_MODE = 9472
  TEXTURE_BORDER = 4101
  TEXTURE_COMPONENTS = 4099
  TEXTURE_LUMINANCE_SIZE = 32864
  TEXTURE_INTENSITY_SIZE = 32865
  OBJECT_LINEAR = 9217
  OBJECT_PLANE = 9473
  EYE_LINEAR = 9216
  EYE_PLANE = 9474
  SPHERE_MAP = 9218
  DECAL = 8449
  MODULATE = 8448
  CLAMP = 10496
  S = 8192
  T = 8193
  R = 8194
  Q = 8195
  CURRENT_BIT = 1
  POINT_BIT = 2
  LINE_BIT = 4
  POLYGON_BIT = 8
  POLYGON_STIPPLE_BIT = 16
  PIXEL_MODE_BIT = 32
  LIGHTING_BIT = 64
  FOG_BIT = 128
  ACCUM_BUFFER_BIT = 512
  VIEWPORT_BIT = 2048
  TRANSFORM_BIT = 4096
  ENABLE_BIT = 8192
  HINT_BIT = 32768
  EVAL_BIT = 65536
  LIST_BIT = 131072
  TEXTURE_BIT = 262144
  SCISSOR_BIT = 524288
  ALL_ATTRIB_BITS = 4294967295_i64
  TEXTURE_PRIORITY = 32870
  TEXTURE_RESIDENT = 32871
  ALPHA4 = 32827
  ALPHA8 = 32828
  ALPHA12 = 32829
  ALPHA16 = 32830
  LUMINANCE4 = 32831
  LUMINANCE8 = 32832
  LUMINANCE12 = 32833
  LUMINANCE16 = 32834
  LUMINANCE4_ALPHA4 = 32835
  LUMINANCE6_ALPHA2 = 32836
  LUMINANCE8_ALPHA8 = 32837
  LUMINANCE12_ALPHA4 = 32838
  LUMINANCE12_ALPHA12 = 32839
  LUMINANCE16_ALPHA16 = 32840
  INTENSITY = 32841
  INTENSITY4 = 32842
  INTENSITY8 = 32843
  INTENSITY12 = 32844
  INTENSITY16 = 32845
  CLIENT_PIXEL_STORE_BIT = 1
  CLIENT_VERTEX_ARRAY_BIT = 2
  ALL_CLIENT_ATTRIB_BITS = 4294967295_i64
  CLIENT_ALL_ATTRIB_BITS = 4294967295_i64
  RESCALE_NORMAL = 32826
  LIGHT_MODEL_COLOR_CONTROL = 33272
  SINGLE_COLOR = 33273
  SEPARATE_SPECULAR_COLOR = 33274
  ALIASED_POINT_SIZE_RANGE = 33901
  COLOR_TABLE = 32976
  POST_CONVOLUTION_COLOR_TABLE = 32977
  POST_COLOR_MATRIX_COLOR_TABLE = 32978
  PROXY_COLOR_TABLE = 32979
  PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980
  PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981
  COLOR_TABLE_SCALE = 32982
  COLOR_TABLE_BIAS = 32983
  COLOR_TABLE_FORMAT = 32984
  COLOR_TABLE_WIDTH = 32985
  COLOR_TABLE_RED_SIZE = 32986
  COLOR_TABLE_GREEN_SIZE = 32987
  COLOR_TABLE_BLUE_SIZE = 32988
  COLOR_TABLE_ALPHA_SIZE = 32989
  COLOR_TABLE_LUMINANCE_SIZE = 32990
  COLOR_TABLE_INTENSITY_SIZE = 32991
  CONVOLUTION_1D = 32784
  CONVOLUTION_2D = 32785
  SEPARABLE_2D = 32786
  CONVOLUTION_BORDER_MODE = 32787
  CONVOLUTION_FILTER_SCALE = 32788
  CONVOLUTION_FILTER_BIAS = 32789
  REDUCE = 32790
  CONVOLUTION_FORMAT = 32791
  CONVOLUTION_WIDTH = 32792
  CONVOLUTION_HEIGHT = 32793
  MAX_CONVOLUTION_WIDTH = 32794
  MAX_CONVOLUTION_HEIGHT = 32795
  POST_CONVOLUTION_RED_SCALE = 32796
  POST_CONVOLUTION_GREEN_SCALE = 32797
  POST_CONVOLUTION_BLUE_SCALE = 32798
  POST_CONVOLUTION_ALPHA_SCALE = 32799
  POST_CONVOLUTION_RED_BIAS = 32800
  POST_CONVOLUTION_GREEN_BIAS = 32801
  POST_CONVOLUTION_BLUE_BIAS = 32802
  POST_CONVOLUTION_ALPHA_BIAS = 32803
  CONSTANT_BORDER = 33105
  REPLICATE_BORDER = 33107
  CONVOLUTION_BORDER_COLOR = 33108
  COLOR_MATRIX = 32945
  COLOR_MATRIX_STACK_DEPTH = 32946
  MAX_COLOR_MATRIX_STACK_DEPTH = 32947
  POST_COLOR_MATRIX_RED_SCALE = 32948
  POST_COLOR_MATRIX_GREEN_SCALE = 32949
  POST_COLOR_MATRIX_BLUE_SCALE = 32950
  POST_COLOR_MATRIX_ALPHA_SCALE = 32951
  POST_COLOR_MATRIX_RED_BIAS = 32952
  POST_COLOR_MATRIX_GREEN_BIAS = 32953
  POST_COLOR_MATRIX_BLUE_BIAS = 32954
  POST_COLOR_MATRIX_ALPHA_BIAS = 32955
  HISTOGRAM = 32804
  PROXY_HISTOGRAM = 32805
  HISTOGRAM_WIDTH = 32806
  HISTOGRAM_FORMAT = 32807
  HISTOGRAM_RED_SIZE = 32808
  HISTOGRAM_GREEN_SIZE = 32809
  HISTOGRAM_BLUE_SIZE = 32810
  HISTOGRAM_ALPHA_SIZE = 32811
  HISTOGRAM_LUMINANCE_SIZE = 32812
  HISTOGRAM_SINK = 32813
  MINMAX = 32814
  MINMAX_FORMAT = 32815
  MINMAX_SINK = 32816
  TABLE_TOO_LARGE = 32817
  CLIENT_ACTIVE_TEXTURE = 34017
  MAX_TEXTURE_UNITS = 34018
  NORMAL_MAP = 34065
  REFLECTION_MAP = 34066
  COMPRESSED_ALPHA = 34025
  COMPRESSED_LUMINANCE = 34026
  COMPRESSED_LUMINANCE_ALPHA = 34027
  COMPRESSED_INTENSITY = 34028
  MULTISAMPLE_BIT = 536870912
  TRANSPOSE_MODELVIEW_MATRIX = 34019
  TRANSPOSE_PROJECTION_MATRIX = 34020
  TRANSPOSE_TEXTURE_MATRIX = 34021
  TRANSPOSE_COLOR_MATRIX = 34022
  COMBINE = 34160
  COMBINE_RGB = 34161
  COMBINE_ALPHA = 34162
  SOURCE0_RGB = 34176
  SOURCE1_RGB = 34177
  SOURCE2_RGB = 34178
  SOURCE0_ALPHA = 34184
  SOURCE1_ALPHA = 34185
  SOURCE2_ALPHA = 34186
  OPERAND0_RGB = 34192
  OPERAND1_RGB = 34193
  OPERAND2_RGB = 34194
  OPERAND0_ALPHA = 34200
  OPERAND1_ALPHA = 34201
  OPERAND2_ALPHA = 34202
  RGB_SCALE = 34163
  ADD_SIGNED = 34164
  INTERPOLATE = 34165
  SUBTRACT = 34023
  CONSTANT = 34166
  PRIMARY_COLOR = 34167
  PREVIOUS = 34168
  DOT3_RGB = 34478
  DOT3_RGBA = 34479
  ARB_MULTITEXTURE = 1
  TEXTURE0_ARB = 33984
  TEXTURE1_ARB = 33985
  TEXTURE2_ARB = 33986
  TEXTURE3_ARB = 33987
  TEXTURE4_ARB = 33988
  TEXTURE5_ARB = 33989
  TEXTURE6_ARB = 33990
  TEXTURE7_ARB = 33991
  TEXTURE8_ARB = 33992
  TEXTURE9_ARB = 33993
  TEXTURE10_ARB = 33994
  TEXTURE11_ARB = 33995
  TEXTURE12_ARB = 33996
  TEXTURE13_ARB = 33997
  TEXTURE14_ARB = 33998
  TEXTURE15_ARB = 33999
  TEXTURE16_ARB = 34000
  TEXTURE17_ARB = 34001
  TEXTURE18_ARB = 34002
  TEXTURE19_ARB = 34003
  TEXTURE20_ARB = 34004
  TEXTURE21_ARB = 34005
  TEXTURE22_ARB = 34006
  TEXTURE23_ARB = 34007
  TEXTURE24_ARB = 34008
  TEXTURE25_ARB = 34009
  TEXTURE26_ARB = 34010
  TEXTURE27_ARB = 34011
  TEXTURE28_ARB = 34012
  TEXTURE29_ARB = 34013
  TEXTURE30_ARB = 34014
  TEXTURE31_ARB = 34015
  ACTIVE_TEXTURE_ARB = 34016
  CLIENT_ACTIVE_TEXTURE_ARB = 34017
  MAX_TEXTURE_UNITS_ARB = 34018
  GLEXT_VERSION = 20171010
  ARB_COLOR_BUFFER_FLOAT = 1
  RGBA_FLOAT_MODE_ARB = 34848
  CLAMP_VERTEX_COLOR_ARB = 35098
  CLAMP_FRAGMENT_COLOR_ARB = 35099
  CLAMP_READ_COLOR_ARB = 35100
  FIXED_ONLY_ARB = 35101
  ARB_COMPATIBILITY = 1
  ARB_DEPTH_TEXTURE = 1
  DEPTH_COMPONENT16_ARB = 33189
  DEPTH_COMPONENT24_ARB = 33190
  DEPTH_COMPONENT32_ARB = 33191
  TEXTURE_DEPTH_SIZE_ARB = 34890
  DEPTH_TEXTURE_MODE_ARB = 34891
  ARB_DRAW_BUFFERS = 1
  MAX_DRAW_BUFFERS_ARB = 34852
  DRAW_BUFFER0_ARB = 34853
  DRAW_BUFFER1_ARB = 34854
  DRAW_BUFFER2_ARB = 34855
  DRAW_BUFFER3_ARB = 34856
  DRAW_BUFFER4_ARB = 34857
  DRAW_BUFFER5_ARB = 34858
  DRAW_BUFFER6_ARB = 34859
  DRAW_BUFFER7_ARB = 34860
  DRAW_BUFFER8_ARB = 34861
  DRAW_BUFFER9_ARB = 34862
  DRAW_BUFFER10_ARB = 34863
  DRAW_BUFFER11_ARB = 34864
  DRAW_BUFFER12_ARB = 34865
  DRAW_BUFFER13_ARB = 34866
  DRAW_BUFFER14_ARB = 34867
  DRAW_BUFFER15_ARB = 34868
  ARB_FRAGMENT_PROGRAM = 1
  FRAGMENT_PROGRAM_ARB = 34820
  PROGRAM_FORMAT_ASCII_ARB = 34933
  PROGRAM_LENGTH_ARB = 34343
  PROGRAM_FORMAT_ARB = 34934
  PROGRAM_BINDING_ARB = 34423
  PROGRAM_INSTRUCTIONS_ARB = 34976
  MAX_PROGRAM_INSTRUCTIONS_ARB = 34977
  PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978
  MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979
  PROGRAM_TEMPORARIES_ARB = 34980
  MAX_PROGRAM_TEMPORARIES_ARB = 34981
  PROGRAM_NATIVE_TEMPORARIES_ARB = 34982
  MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983
  PROGRAM_PARAMETERS_ARB = 34984
  MAX_PROGRAM_PARAMETERS_ARB = 34985
  PROGRAM_NATIVE_PARAMETERS_ARB = 34986
  MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987
  PROGRAM_ATTRIBS_ARB = 34988
  MAX_PROGRAM_ATTRIBS_ARB = 34989
  PROGRAM_NATIVE_ATTRIBS_ARB = 34990
  MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991
  MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996
  MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997
  PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998
  PROGRAM_ALU_INSTRUCTIONS_ARB = 34821
  PROGRAM_TEX_INSTRUCTIONS_ARB = 34822
  PROGRAM_TEX_INDIRECTIONS_ARB = 34823
  PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824
  PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825
  PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826
  MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827
  MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828
  MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829
  MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830
  MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831
  MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832
  PROGRAM_STRING_ARB = 34344
  PROGRAM_ERROR_POSITION_ARB = 34379
  CURRENT_MATRIX_ARB = 34369
  TRANSPOSE_CURRENT_MATRIX_ARB = 34999
  CURRENT_MATRIX_STACK_DEPTH_ARB = 34368
  MAX_PROGRAM_MATRICES_ARB = 34351
  MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350
  MAX_TEXTURE_COORDS_ARB = 34929
  MAX_TEXTURE_IMAGE_UNITS_ARB = 34930
  PROGRAM_ERROR_STRING_ARB = 34932
  MATRIX0_ARB = 35008
  MATRIX1_ARB = 35009
  MATRIX2_ARB = 35010
  MATRIX3_ARB = 35011
  MATRIX4_ARB = 35012
  MATRIX5_ARB = 35013
  MATRIX6_ARB = 35014
  MATRIX7_ARB = 35015
  MATRIX8_ARB = 35016
  MATRIX9_ARB = 35017
  MATRIX10_ARB = 35018
  MATRIX11_ARB = 35019
  MATRIX12_ARB = 35020
  MATRIX13_ARB = 35021
  MATRIX14_ARB = 35022
  MATRIX15_ARB = 35023
  MATRIX16_ARB = 35024
  MATRIX17_ARB = 35025
  MATRIX18_ARB = 35026
  MATRIX19_ARB = 35027
  MATRIX20_ARB = 35028
  MATRIX21_ARB = 35029
  MATRIX22_ARB = 35030
  MATRIX23_ARB = 35031
  MATRIX24_ARB = 35032
  MATRIX25_ARB = 35033
  MATRIX26_ARB = 35034
  MATRIX27_ARB = 35035
  MATRIX28_ARB = 35036
  MATRIX29_ARB = 35037
  MATRIX30_ARB = 35038
  MATRIX31_ARB = 35039
  ARB_FRAGMENT_PROGRAM_SHADOW = 1
  ARB_FRAGMENT_SHADER = 1
  FRAGMENT_SHADER_ARB = 35632
  MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657
  FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723
  ARB_HALF_FLOAT_PIXEL = 1
  HALF_FLOAT_ARB = 5131
  ARB_MATRIX_PALETTE = 1
  MATRIX_PALETTE_ARB = 34880
  MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881
  MAX_PALETTE_MATRICES_ARB = 34882
  CURRENT_PALETTE_MATRIX_ARB = 34883
  MATRIX_INDEX_ARRAY_ARB = 34884
  CURRENT_MATRIX_INDEX_ARB = 34885
  MATRIX_INDEX_ARRAY_SIZE_ARB = 34886
  MATRIX_INDEX_ARRAY_TYPE_ARB = 34887
  MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888
  MATRIX_INDEX_ARRAY_POINTER_ARB = 34889
  ARB_MULTISAMPLE = 1
  MULTISAMPLE_ARB = 32925
  SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926
  SAMPLE_ALPHA_TO_ONE_ARB = 32927
  SAMPLE_COVERAGE_ARB = 32928
  SAMPLE_BUFFERS_ARB = 32936
  SAMPLES_ARB = 32937
  SAMPLE_COVERAGE_VALUE_ARB = 32938
  SAMPLE_COVERAGE_INVERT_ARB = 32939
  MULTISAMPLE_BIT_ARB = 536870912
  ARB_OCCLUSION_QUERY = 1
  QUERY_COUNTER_BITS_ARB = 34916
  CURRENT_QUERY_ARB = 34917
  QUERY_RESULT_ARB = 34918
  QUERY_RESULT_AVAILABLE_ARB = 34919
  SAMPLES_PASSED_ARB = 35092
  ARB_POINT_PARAMETERS = 1
  POINT_SIZE_MIN_ARB = 33062
  POINT_SIZE_MAX_ARB = 33063
  POINT_FADE_THRESHOLD_SIZE_ARB = 33064
  POINT_DISTANCE_ATTENUATION_ARB = 33065
  ARB_POINT_SPRITE = 1
  POINT_SPRITE_ARB = 34913
  COORD_REPLACE_ARB = 34914
  ARB_SHADER_OBJECTS = 1
  PROGRAM_OBJECT_ARB = 35648
  SHADER_OBJECT_ARB = 35656
  OBJECT_TYPE_ARB = 35662
  OBJECT_SUBTYPE_ARB = 35663
  FLOAT_VEC2_ARB = 35664
  FLOAT_VEC3_ARB = 35665
  FLOAT_VEC4_ARB = 35666
  INT_VEC2_ARB = 35667
  INT_VEC3_ARB = 35668
  INT_VEC4_ARB = 35669
  BOOL_ARB = 35670
  BOOL_VEC2_ARB = 35671
  BOOL_VEC3_ARB = 35672
  BOOL_VEC4_ARB = 35673
  FLOAT_MAT2_ARB = 35674
  FLOAT_MAT3_ARB = 35675
  FLOAT_MAT4_ARB = 35676
  SAMPLER_1D_ARB = 35677
  SAMPLER_2D_ARB = 35678
  SAMPLER_3D_ARB = 35679
  SAMPLER_CUBE_ARB = 35680
  SAMPLER_1D_SHADOW_ARB = 35681
  SAMPLER_2D_SHADOW_ARB = 35682
  SAMPLER_2D_RECT_ARB = 35683
  SAMPLER_2D_RECT_SHADOW_ARB = 35684
  OBJECT_DELETE_STATUS_ARB = 35712
  OBJECT_COMPILE_STATUS_ARB = 35713
  OBJECT_LINK_STATUS_ARB = 35714
  OBJECT_VALIDATE_STATUS_ARB = 35715
  OBJECT_INFO_LOG_LENGTH_ARB = 35716
  OBJECT_ATTACHED_OBJECTS_ARB = 35717
  OBJECT_ACTIVE_UNIFORMS_ARB = 35718
  OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719
  OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720
  ARB_SHADER_TEXTURE_LOD = 1
  ARB_SHADING_LANGUAGE_100 = 1
  SHADING_LANGUAGE_VERSION_ARB = 35724
  ARB_SHADOW = 1
  TEXTURE_COMPARE_MODE_ARB = 34892
  TEXTURE_COMPARE_FUNC_ARB = 34893
  COMPARE_R_TO_TEXTURE_ARB = 34894
  ARB_SHADOW_AMBIENT = 1
  TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959
  ARB_TEXTURE_COMPRESSION = 1
  COMPRESSED_ALPHA_ARB = 34025
  COMPRESSED_LUMINANCE_ARB = 34026
  COMPRESSED_LUMINANCE_ALPHA_ARB = 34027
  COMPRESSED_INTENSITY_ARB = 34028
  COMPRESSED_RGB_ARB = 34029
  COMPRESSED_RGBA_ARB = 34030
  TEXTURE_COMPRESSION_HINT_ARB = 34031
  TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464
  TEXTURE_COMPRESSED_ARB = 34465
  NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466
  COMPRESSED_TEXTURE_FORMATS_ARB = 34467
  ARB_TEXTURE_CUBE_MAP = 1
  NORMAL_MAP_ARB = 34065
  REFLECTION_MAP_ARB = 34066
  TEXTURE_CUBE_MAP_ARB = 34067
  TEXTURE_BINDING_CUBE_MAP_ARB = 34068
  TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069
  TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070
  TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071
  TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072
  TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073
  TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074
  PROXY_TEXTURE_CUBE_MAP_ARB = 34075
  MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076
  ARB_TEXTURE_ENV_ADD = 1
  ARB_TEXTURE_ENV_COMBINE = 1
  COMBINE_ARB = 34160
  COMBINE_RGB_ARB = 34161
  COMBINE_ALPHA_ARB = 34162
  SOURCE0_RGB_ARB = 34176
  SOURCE1_RGB_ARB = 34177
  SOURCE2_RGB_ARB = 34178
  SOURCE0_ALPHA_ARB = 34184
  SOURCE1_ALPHA_ARB = 34185
  SOURCE2_ALPHA_ARB = 34186
  OPERAND0_RGB_ARB = 34192
  OPERAND1_RGB_ARB = 34193
  OPERAND2_RGB_ARB = 34194
  OPERAND0_ALPHA_ARB = 34200
  OPERAND1_ALPHA_ARB = 34201
  OPERAND2_ALPHA_ARB = 34202
  RGB_SCALE_ARB = 34163
  ADD_SIGNED_ARB = 34164
  INTERPOLATE_ARB = 34165
  SUBTRACT_ARB = 34023
  CONSTANT_ARB = 34166
  PRIMARY_COLOR_ARB = 34167
  PREVIOUS_ARB = 34168
  ARB_TEXTURE_ENV_CROSSBAR = 1
  ARB_TEXTURE_ENV_DOT3 = 1
  DOT3_RGB_ARB = 34478
  DOT3_RGBA_ARB = 34479
  ARB_TEXTURE_FLOAT = 1
  TEXTURE_RED_TYPE_ARB = 35856
  TEXTURE_GREEN_TYPE_ARB = 35857
  TEXTURE_BLUE_TYPE_ARB = 35858
  TEXTURE_ALPHA_TYPE_ARB = 35859
  TEXTURE_LUMINANCE_TYPE_ARB = 35860
  TEXTURE_INTENSITY_TYPE_ARB = 35861
  TEXTURE_DEPTH_TYPE_ARB = 35862
  UNSIGNED_NORMALIZED_ARB = 35863
  RGBA32F_ARB = 34836
  RGB32F_ARB = 34837
  ALPHA32F_ARB = 34838
  INTENSITY32F_ARB = 34839
  LUMINANCE32F_ARB = 34840
  LUMINANCE_ALPHA32F_ARB = 34841
  RGBA16F_ARB = 34842
  RGB16F_ARB = 34843
  ALPHA16F_ARB = 34844
  INTENSITY16F_ARB = 34845
  LUMINANCE16F_ARB = 34846
  LUMINANCE_ALPHA16F_ARB = 34847
  ARB_TEXTURE_RECTANGLE = 1
  TEXTURE_RECTANGLE_ARB = 34037
  TEXTURE_BINDING_RECTANGLE_ARB = 34038
  PROXY_TEXTURE_RECTANGLE_ARB = 34039
  MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040
  ARB_TRANSPOSE_MATRIX = 1
  TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019
  TRANSPOSE_PROJECTION_MATRIX_ARB = 34020
  TRANSPOSE_TEXTURE_MATRIX_ARB = 34021
  TRANSPOSE_COLOR_MATRIX_ARB = 34022
  ARB_VERTEX_BLEND = 1
  MAX_VERTEX_UNITS_ARB = 34468
  ACTIVE_VERTEX_UNITS_ARB = 34469
  WEIGHT_SUM_UNITY_ARB = 34470
  VERTEX_BLEND_ARB = 34471
  CURRENT_WEIGHT_ARB = 34472
  WEIGHT_ARRAY_TYPE_ARB = 34473
  WEIGHT_ARRAY_STRIDE_ARB = 34474
  WEIGHT_ARRAY_SIZE_ARB = 34475
  WEIGHT_ARRAY_POINTER_ARB = 34476
  WEIGHT_ARRAY_ARB = 34477
  MODELVIEW0_ARB = 5888
  MODELVIEW1_ARB = 34058
  MODELVIEW2_ARB = 34594
  MODELVIEW3_ARB = 34595
  MODELVIEW4_ARB = 34596
  MODELVIEW5_ARB = 34597
  MODELVIEW6_ARB = 34598
  MODELVIEW7_ARB = 34599
  MODELVIEW8_ARB = 34600
  MODELVIEW9_ARB = 34601
  MODELVIEW10_ARB = 34602
  MODELVIEW11_ARB = 34603
  MODELVIEW12_ARB = 34604
  MODELVIEW13_ARB = 34605
  MODELVIEW14_ARB = 34606
  MODELVIEW15_ARB = 34607
  MODELVIEW16_ARB = 34608
  MODELVIEW17_ARB = 34609
  MODELVIEW18_ARB = 34610
  MODELVIEW19_ARB = 34611
  MODELVIEW20_ARB = 34612
  MODELVIEW21_ARB = 34613
  MODELVIEW22_ARB = 34614
  MODELVIEW23_ARB = 34615
  MODELVIEW24_ARB = 34616
  MODELVIEW25_ARB = 34617
  MODELVIEW26_ARB = 34618
  MODELVIEW27_ARB = 34619
  MODELVIEW28_ARB = 34620
  MODELVIEW29_ARB = 34621
  MODELVIEW30_ARB = 34622
  MODELVIEW31_ARB = 34623
  ARB_VERTEX_BUFFER_OBJECT = 1
  BUFFER_SIZE_ARB = 34660
  BUFFER_USAGE_ARB = 34661
  ARRAY_BUFFER_ARB = 34962
  ELEMENT_ARRAY_BUFFER_ARB = 34963
  ARRAY_BUFFER_BINDING_ARB = 34964
  ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965
  VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966
  NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967
  COLOR_ARRAY_BUFFER_BINDING_ARB = 34968
  INDEX_ARRAY_BUFFER_BINDING_ARB = 34969
  TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970
  EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971
  SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972
  FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973
  WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975
  READ_ONLY_ARB = 35000
  WRITE_ONLY_ARB = 35001
  READ_WRITE_ARB = 35002
  BUFFER_ACCESS_ARB = 35003
  BUFFER_MAPPED_ARB = 35004
  BUFFER_MAP_POINTER_ARB = 35005
  STREAM_DRAW_ARB = 35040
  STREAM_READ_ARB = 35041
  STREAM_COPY_ARB = 35042
  STATIC_DRAW_ARB = 35044
  STATIC_READ_ARB = 35045
  STATIC_COPY_ARB = 35046
  DYNAMIC_DRAW_ARB = 35048
  DYNAMIC_READ_ARB = 35049
  DYNAMIC_COPY_ARB = 35050
  ARB_VERTEX_PROGRAM = 1
  COLOR_SUM_ARB = 33880
  VERTEX_PROGRAM_ARB = 34336
  VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338
  VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339
  VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340
  VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341
  CURRENT_VERTEX_ATTRIB_ARB = 34342
  VERTEX_PROGRAM_POINT_SIZE_ARB = 34370
  VERTEX_PROGRAM_TWO_SIDE_ARB = 34371
  VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373
  MAX_VERTEX_ATTRIBS_ARB = 34921
  VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922
  PROGRAM_ADDRESS_REGISTERS_ARB = 34992
  MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993
  PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994
  MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995
  ARB_VERTEX_SHADER = 1
  VERTEX_SHADER_ARB = 35633
  MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658
  MAX_VARYING_FLOATS_ARB = 35659
  MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660
  MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661
  OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721
  OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722
  ARB_WINDOW_POS = 1
  OES_BYTE_COORDINATES = 1
  OES_COMPRESSED_PALETTED_TEXTURE = 1
  PALETTE4_RGB8_OES = 35728
  PALETTE4_RGBA8_OES = 35729
  PALETTE4_R5_G6_B5_OES = 35730
  PALETTE4_RGBA4_OES = 35731
  PALETTE4_RGB5_A1_OES = 35732
  PALETTE8_RGB8_OES = 35733
  PALETTE8_RGBA8_OES = 35734
  PALETTE8_R5_G6_B5_OES = 35735
  PALETTE8_RGBA4_OES = 35736
  PALETTE8_RGB5_A1_OES = 35737
  OES_FIXED_POINT = 1
  FIXED_OES = 5132
  OES_QUERY_MATRIX = 1
  OES_READ_FORMAT = 1
  IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738
  IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739
  OES_SINGLE_PRECISION = 1
  MULTISAMPLE_3DFX = 34482
  SAMPLE_BUFFERS_3DFX = 34483
  SAMPLES_3DFX = 34484
  MULTISAMPLE_BIT_3DFX = 536870912
  COMPRESSED_RGB_FXT1_3DFX = 34480
  COMPRESSED_RGBA_FXT1_3DFX = 34481
  AMD_BLEND_MINMAX_FACTOR = 1
  AMD_CONSERVATIVE_DEPTH = 1
  AMD_DEBUG_OUTPUT = 1
  MAX_DEBUG_MESSAGE_LENGTH_AMD = 37187
  MAX_DEBUG_LOGGED_MESSAGES_AMD = 37188
  DEBUG_LOGGED_MESSAGES_AMD = 37189
  DEBUG_SEVERITY_HIGH_AMD = 37190
  DEBUG_SEVERITY_MEDIUM_AMD = 37191
  DEBUG_SEVERITY_LOW_AMD = 37192
  DEBUG_CATEGORY_API_ERROR_AMD = 37193
  DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 37194
  DEBUG_CATEGORY_DEPRECATION_AMD = 37195
  DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 37196
  DEBUG_CATEGORY_PERFORMANCE_AMD = 37197
  DEBUG_CATEGORY_SHADER_COMPILER_AMD = 37198
  DEBUG_CATEGORY_APPLICATION_AMD = 37199
  DEBUG_CATEGORY_OTHER_AMD = 37200
  AMD_DEPTH_CLAMP_SEPARATE = 1
  DEPTH_CLAMP_NEAR_AMD = 36894
  DEPTH_CLAMP_FAR_AMD = 36895
  AMD_DRAW_BUFFERS_BLEND = 1
  AMD_FRAMEBUFFER_SAMPLE_POSITIONS = 1
  SUBSAMPLE_DISTANCE_AMD = 34879
  PIXELS_PER_SAMPLE_PATTERN_X_AMD = 37294
  PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 37295
  ALL_PIXELS_AMD = 4294967295_i64
  AMD_GCN_SHADER = 1
  AMD_GPU_SHADER_HALF_FLOAT = 1
  FLOAT16_MAT2_AMD = 37317
  FLOAT16_MAT3_AMD = 37318
  FLOAT16_MAT4_AMD = 37319
  FLOAT16_MAT2X3_AMD = 37320
  FLOAT16_MAT2X4_AMD = 37321
  FLOAT16_MAT3X2_AMD = 37322
  FLOAT16_MAT3X4_AMD = 37323
  FLOAT16_MAT4X2_AMD = 37324
  FLOAT16_MAT4X3_AMD = 37325
  AMD_GPU_SHADER_INT16 = 1
  AMD_GPU_SHADER_INT64 = 1
  AMD_INTERLEAVED_ELEMENTS = 1
  VERTEX_ELEMENT_SWIZZLE_AMD = 37284
  VERTEX_ID_SWIZZLE_AMD = 37285
  AMD_MULTI_DRAW_INDIRECT = 1
  AMD_NAME_GEN_DELETE = 1
  DATA_BUFFER_AMD = 37201
  PERFORMANCE_MONITOR_AMD = 37202
  QUERY_OBJECT_AMD = 37203
  VERTEX_ARRAY_OBJECT_AMD = 37204
  SAMPLER_OBJECT_AMD = 37205
  AMD_OCCLUSION_QUERY_EVENT = 1
  OCCLUSION_QUERY_EVENT_MASK_AMD = 34639
  QUERY_DEPTH_PASS_EVENT_BIT_AMD = 1
  QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 2
  QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 4
  QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 8
  QUERY_ALL_EVENT_BITS_AMD = 4294967295_i64
  AMD_PINNED_MEMORY = 1
  EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 37216
  AMD_QUERY_BUFFER_OBJECT = 1
  QUERY_BUFFER_AMD = 37266
  QUERY_BUFFER_BINDING_AMD = 37267
  QUERY_RESULT_NO_WAIT_AMD = 37268
  AMD_SAMPLE_POSITIONS = 1
  AMD_SEAMLESS_CUBEMAP_PER_TEXTURE = 1
  AMD_SHADER_ATOMIC_COUNTER_OPS = 1
  AMD_SHADER_BALLOT = 1
  AMD_SHADER_EXPLICIT_VERTEX_PARAMETER = 1
  AMD_SHADER_IMAGE_LOAD_STORE_LOD = 1
  AMD_SHADER_STENCIL_EXPORT = 1
  AMD_SHADER_TRINARY_MINMAX = 1
  AMD_SPARSE_TEXTURE = 1
  VIRTUAL_PAGE_SIZE_X_AMD = 37269
  VIRTUAL_PAGE_SIZE_Y_AMD = 37270
  VIRTUAL_PAGE_SIZE_Z_AMD = 37271
  MAX_SPARSE_TEXTURE_SIZE_AMD = 37272
  MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 37273
  MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 37274
  MIN_SPARSE_LEVEL_AMD = 37275
  MIN_LOD_WARNING_AMD = 37276
  TEXTURE_STORAGE_SPARSE_BIT_AMD = 1
  AMD_STENCIL_OPERATION_EXTENDED = 1
  SET_AMD = 34634
  REPLACE_VALUE_AMD = 34635
  STENCIL_OP_VALUE_AMD = 34636
  STENCIL_BACK_OP_VALUE_AMD = 34637
  AMD_TEXTURE_GATHER_BIAS_LOD = 1
  AMD_TEXTURE_TEXTURE4 = 1
  AMD_TRANSFORM_FEEDBACK3_LINES_TRIANGLES = 1
  AMD_TRANSFORM_FEEDBACK4 = 1
  STREAM_RASTERIZATION_AMD = 37280
  AMD_VERTEX_SHADER_LAYER = 1
  AMD_VERTEX_SHADER_TESSELLATOR = 1
  SAMPLER_BUFFER_AMD = 36865
  INT_SAMPLER_BUFFER_AMD = 36866
  UNSIGNED_INT_SAMPLER_BUFFER_AMD = 36867
  TESSELLATION_MODE_AMD = 36868
  TESSELLATION_FACTOR_AMD = 36869
  DISCRETE_AMD = 36870
  CONTINUOUS_AMD = 36871
  AMD_VERTEX_SHADER_VIEWPORT_INDEX = 1
  APPLE_AUX_DEPTH_STENCIL = 1
  AUX_DEPTH_STENCIL_APPLE = 35348
  APPLE_CLIENT_STORAGE = 1
  UNPACK_CLIENT_STORAGE_APPLE = 34226
  APPLE_ELEMENT_ARRAY = 1
  ELEMENT_ARRAY_APPLE = 35340
  ELEMENT_ARRAY_TYPE_APPLE = 35341
  ELEMENT_ARRAY_POINTER_APPLE = 35342
  APPLE_FENCE = 1
  DRAW_PIXELS_APPLE = 35338
  FENCE_APPLE = 35339
  APPLE_FLOAT_PIXELS = 1
  HALF_APPLE = 5131
  RGBA_FLOAT32_APPLE = 34836
  RGB_FLOAT32_APPLE = 34837
  ALPHA_FLOAT32_APPLE = 34838
  INTENSITY_FLOAT32_APPLE = 34839
  LUMINANCE_FLOAT32_APPLE = 34840
  LUMINANCE_ALPHA_FLOAT32_APPLE = 34841
  RGBA_FLOAT16_APPLE = 34842
  RGB_FLOAT16_APPLE = 34843
  ALPHA_FLOAT16_APPLE = 34844
  INTENSITY_FLOAT16_APPLE = 34845
  LUMINANCE_FLOAT16_APPLE = 34846
  LUMINANCE_ALPHA_FLOAT16_APPLE = 34847
  COLOR_FLOAT_APPLE = 35343
  APPLE_FLUSH_BUFFER_RANGE = 1
  BUFFER_SERIALIZED_MODIFY_APPLE = 35346
  BUFFER_FLUSHING_UNMAP_APPLE = 35347
  APPLE_OBJECT_PURGEABLE = 1
  BUFFER_OBJECT_APPLE = 34227
  RELEASED_APPLE = 35353
  VOLATILE_APPLE = 35354
  RETAINED_APPLE = 35355
  UNDEFINED_APPLE = 35356
  PURGEABLE_APPLE = 35357
  APPLE_ROW_BYTES = 1
  PACK_ROW_BYTES_APPLE = 35349
  UNPACK_ROW_BYTES_APPLE = 35350
  APPLE_SPECULAR_VECTOR = 1
  LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224
  APPLE_TEXTURE_RANGE = 1
  TEXTURE_RANGE_LENGTH_APPLE = 34231
  TEXTURE_RANGE_POINTER_APPLE = 34232
  TEXTURE_STORAGE_HINT_APPLE = 34236
  STORAGE_PRIVATE_APPLE = 34237
  STORAGE_CACHED_APPLE = 34238
  STORAGE_SHARED_APPLE = 34239
  APPLE_TRANSFORM_HINT = 1
  TRANSFORM_HINT_APPLE = 34225
  APPLE_VERTEX_ARRAY_OBJECT = 1
  VERTEX_ARRAY_BINDING_APPLE = 34229
  APPLE_VERTEX_ARRAY_RANGE = 1
  VERTEX_ARRAY_RANGE_APPLE = 34077
  VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078
  VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079
  VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081
  STORAGE_CLIENT_APPLE = 34228
  APPLE_VERTEX_PROGRAM_EVALUATORS = 1
  VERTEX_ATTRIB_MAP1_APPLE = 35328
  VERTEX_ATTRIB_MAP2_APPLE = 35329
  VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330
  VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331
  VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332
  VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333
  VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334
  VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335
  VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336
  VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337
  APPLE_YCBCR_422 = 1
  YCBCR_422_APPLE = 34233
  ATI_DRAW_BUFFERS = 1
  MAX_DRAW_BUFFERS_ATI = 34852
  DRAW_BUFFER0_ATI = 34853
  DRAW_BUFFER1_ATI = 34854
  DRAW_BUFFER2_ATI = 34855
  DRAW_BUFFER3_ATI = 34856
  DRAW_BUFFER4_ATI = 34857
  DRAW_BUFFER5_ATI = 34858
  DRAW_BUFFER6_ATI = 34859
  DRAW_BUFFER7_ATI = 34860
  DRAW_BUFFER8_ATI = 34861
  DRAW_BUFFER9_ATI = 34862
  DRAW_BUFFER10_ATI = 34863
  DRAW_BUFFER11_ATI = 34864
  DRAW_BUFFER12_ATI = 34865
  DRAW_BUFFER13_ATI = 34866
  DRAW_BUFFER14_ATI = 34867
  DRAW_BUFFER15_ATI = 34868
  ATI_ELEMENT_ARRAY = 1
  ELEMENT_ARRAY_ATI = 34664
  ELEMENT_ARRAY_TYPE_ATI = 34665
  ELEMENT_ARRAY_POINTER_ATI = 34666
  ATI_ENVMAP_BUMPMAP = 1
  BUMP_ROT_MATRIX_ATI = 34677
  BUMP_ROT_MATRIX_SIZE_ATI = 34678
  BUMP_NUM_TEX_UNITS_ATI = 34679
  BUMP_TEX_UNITS_ATI = 34680
  DUDV_ATI = 34681
  DU8DV8_ATI = 34682
  BUMP_ENVMAP_ATI = 34683
  BUMP_TARGET_ATI = 34684
  ATI_FRAGMENT_SHADER = 1
  FRAGMENT_SHADER_ATI = 35104
  REG_0_ATI = 35105
  REG_1_ATI = 35106
  REG_2_ATI = 35107
  REG_3_ATI = 35108
  REG_4_ATI = 35109
  REG_5_ATI = 35110
  REG_6_ATI = 35111
  REG_7_ATI = 35112
  REG_8_ATI = 35113
  REG_9_ATI = 35114
  REG_10_ATI = 35115
  REG_11_ATI = 35116
  REG_12_ATI = 35117
  REG_13_ATI = 35118
  REG_14_ATI = 35119
  REG_15_ATI = 35120
  REG_16_ATI = 35121
  REG_17_ATI = 35122
  REG_18_ATI = 35123
  REG_19_ATI = 35124
  REG_20_ATI = 35125
  REG_21_ATI = 35126
  REG_22_ATI = 35127
  REG_23_ATI = 35128
  REG_24_ATI = 35129
  REG_25_ATI = 35130
  REG_26_ATI = 35131
  REG_27_ATI = 35132
  REG_28_ATI = 35133
  REG_29_ATI = 35134
  REG_30_ATI = 35135
  REG_31_ATI = 35136
  CON_0_ATI = 35137
  CON_1_ATI = 35138
  CON_2_ATI = 35139
  CON_3_ATI = 35140
  CON_4_ATI = 35141
  CON_5_ATI = 35142
  CON_6_ATI = 35143
  CON_7_ATI = 35144
  CON_8_ATI = 35145
  CON_9_ATI = 35146
  CON_10_ATI = 35147
  CON_11_ATI = 35148
  CON_12_ATI = 35149
  CON_13_ATI = 35150
  CON_14_ATI = 35151
  CON_15_ATI = 35152
  CON_16_ATI = 35153
  CON_17_ATI = 35154
  CON_18_ATI = 35155
  CON_19_ATI = 35156
  CON_20_ATI = 35157
  CON_21_ATI = 35158
  CON_22_ATI = 35159
  CON_23_ATI = 35160
  CON_24_ATI = 35161
  CON_25_ATI = 35162
  CON_26_ATI = 35163
  CON_27_ATI = 35164
  CON_28_ATI = 35165
  CON_29_ATI = 35166
  CON_30_ATI = 35167
  CON_31_ATI = 35168
  MOV_ATI = 35169
  ADD_ATI = 35171
  MUL_ATI = 35172
  SUB_ATI = 35173
  DOT3_ATI = 35174
  DOT4_ATI = 35175
  MAD_ATI = 35176
  LERP_ATI = 35177
  CND_ATI = 35178
  CND0_ATI = 35179
  DOT2_ADD_ATI = 35180
  SECONDARY_INTERPOLATOR_ATI = 35181
  NUM_FRAGMENT_REGISTERS_ATI = 35182
  NUM_FRAGMENT_CONSTANTS_ATI = 35183
  NUM_PASSES_ATI = 35184
  NUM_INSTRUCTIONS_PER_PASS_ATI = 35185
  NUM_INSTRUCTIONS_TOTAL_ATI = 35186
  NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187
  NUM_LOOPBACK_COMPONENTS_ATI = 35188
  COLOR_ALPHA_PAIRING_ATI = 35189
  SWIZZLE_STR_ATI = 35190
  SWIZZLE_STQ_ATI = 35191
  SWIZZLE_STR_DR_ATI = 35192
  SWIZZLE_STQ_DQ_ATI = 35193
  SWIZZLE_STRQ_ATI = 35194
  SWIZZLE_STRQ_DQ_ATI = 35195
  RED_BIT_ATI = 1
  GREEN_BIT_ATI = 2
  BLUE_BIT_ATI = 4
  HALF_BIT_ATI = 8
  QUARTER_BIT_ATI = 16
  EIGHTH_BIT_ATI = 32
  SATURATE_BIT_ATI = 64
  COMP_BIT_ATI = 2
  NEGATE_BIT_ATI = 4
  BIAS_BIT_ATI = 8
  ATI_MAP_OBJECT_BUFFER = 1
  ATI_MEMINFO = 1
  VBO_FREE_MEMORY_ATI = 34811
  TEXTURE_FREE_MEMORY_ATI = 34812
  RENDERBUFFER_FREE_MEMORY_ATI = 34813
  ATI_PIXEL_FORMAT_FLOAT = 1
  RGBA_FLOAT_MODE_ATI = 34848
  COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 34869
  ATI_PN_TRIANGLES = 1
  PN_TRIANGLES_ATI = 34800
  MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801
  PN_TRIANGLES_POINT_MODE_ATI = 34802
  PN_TRIANGLES_NORMAL_MODE_ATI = 34803
  PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804
  PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805
  PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806
  PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807
  PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808
  ATI_SEPARATE_STENCIL = 1
  STENCIL_BACK_FUNC_ATI = 34816
  STENCIL_BACK_FAIL_ATI = 34817
  STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818
  STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819
  ATI_TEXT_FRAGMENT_SHADER = 1
  TEXT_FRAGMENT_SHADER_ATI = 33280
  ATI_TEXTURE_ENV_COMBINE3 = 1
  MODULATE_ADD_ATI = 34628
  MODULATE_SIGNED_ADD_ATI = 34629
  MODULATE_SUBTRACT_ATI = 34630
  ATI_TEXTURE_FLOAT = 1
  RGBA_FLOAT32_ATI = 34836
  RGB_FLOAT32_ATI = 34837
  ALPHA_FLOAT32_ATI = 34838
  INTENSITY_FLOAT32_ATI = 34839
  LUMINANCE_FLOAT32_ATI = 34840
  LUMINANCE_ALPHA_FLOAT32_ATI = 34841
  RGBA_FLOAT16_ATI = 34842
  RGB_FLOAT16_ATI = 34843
  ALPHA_FLOAT16_ATI = 34844
  INTENSITY_FLOAT16_ATI = 34845
  LUMINANCE_FLOAT16_ATI = 34846
  LUMINANCE_ALPHA_FLOAT16_ATI = 34847
  ATI_TEXTURE_MIRROR_ONCE = 1
  MIRROR_CLAMP_ATI = 34626
  MIRROR_CLAMP_TO_EDGE_ATI = 34627
  ATI_VERTEX_ARRAY_OBJECT = 1
  STATIC_ATI = 34656
  DYNAMIC_ATI = 34657
  PRESERVE_ATI = 34658
  DISCARD_ATI = 34659
  OBJECT_BUFFER_SIZE_ATI = 34660
  OBJECT_BUFFER_USAGE_ATI = 34661
  ARRAY_OBJECT_BUFFER_ATI = 34662
  ARRAY_OBJECT_OFFSET_ATI = 34663
  ATI_VERTEX_ATTRIB_ARRAY_OBJECT = 1
  ATI_VERTEX_STREAMS = 1
  MAX_VERTEX_STREAMS_ATI = 34667
  VERTEX_STREAM0_ATI = 34668
  VERTEX_STREAM1_ATI = 34669
  VERTEX_STREAM2_ATI = 34670
  VERTEX_STREAM3_ATI = 34671
  VERTEX_STREAM4_ATI = 34672
  VERTEX_STREAM5_ATI = 34673
  VERTEX_STREAM6_ATI = 34674
  VERTEX_STREAM7_ATI = 34675
  VERTEX_SOURCE_ATI = 34676
  EXT_422_PIXELS = 1
  EXT_ABGR = 1
  ABGR_EXT = 32768
  EXT_BGRA = 1
  BGR_EXT = 32992
  BGRA_EXT = 32993
  EXT_BINDABLE_UNIFORM = 1
  MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322
  MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323
  MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324
  MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333
  UNIFORM_BUFFER_EXT = 36334
  UNIFORM_BUFFER_BINDING_EXT = 36335
  EXT_BLEND_COLOR = 1
  CONSTANT_COLOR_EXT = 32769
  ONE_MINUS_CONSTANT_COLOR_EXT = 32770
  CONSTANT_ALPHA_EXT = 32771
  ONE_MINUS_CONSTANT_ALPHA_EXT = 32772
  BLEND_COLOR_EXT = 32773
  EXT_BLEND_EQUATION_SEPARATE = 1
  BLEND_EQUATION_RGB_EXT = 32777
  BLEND_EQUATION_ALPHA_EXT = 34877
  EXT_BLEND_FUNC_SEPARATE = 1
  BLEND_DST_RGB_EXT = 32968
  BLEND_SRC_RGB_EXT = 32969
  BLEND_DST_ALPHA_EXT = 32970
  BLEND_SRC_ALPHA_EXT = 32971
  EXT_BLEND_LOGIC_OP = 1
  EXT_BLEND_MINMAX = 1
  MIN_EXT = 32775
  MAX_EXT = 32776
  FUNC_ADD_EXT = 32774
  BLEND_EQUATION_EXT = 32777
  EXT_BLEND_SUBTRACT = 1
  FUNC_SUBTRACT_EXT = 32778
  FUNC_REVERSE_SUBTRACT_EXT = 32779
  EXT_CLIP_VOLUME_HINT = 1
  CLIP_VOLUME_CLIPPING_HINT_EXT = 33008
  EXT_CMYKA = 1
  CMYK_EXT = 32780
  CMYKA_EXT = 32781
  PACK_CMYK_HINT_EXT = 32782
  UNPACK_CMYK_HINT_EXT = 32783
  EXT_COLOR_SUBTABLE = 1
  EXT_COMPILED_VERTEX_ARRAY = 1
  ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192
  ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193
  EXT_CONVOLUTION = 1
  CONVOLUTION_1D_EXT = 32784
  CONVOLUTION_2D_EXT = 32785
  SEPARABLE_2D_EXT = 32786
  CONVOLUTION_BORDER_MODE_EXT = 32787
  CONVOLUTION_FILTER_SCALE_EXT = 32788
  CONVOLUTION_FILTER_BIAS_EXT = 32789
  REDUCE_EXT = 32790
  CONVOLUTION_FORMAT_EXT = 32791
  CONVOLUTION_WIDTH_EXT = 32792
  CONVOLUTION_HEIGHT_EXT = 32793
  MAX_CONVOLUTION_WIDTH_EXT = 32794
  MAX_CONVOLUTION_HEIGHT_EXT = 32795
  POST_CONVOLUTION_RED_SCALE_EXT = 32796
  POST_CONVOLUTION_GREEN_SCALE_EXT = 32797
  POST_CONVOLUTION_BLUE_SCALE_EXT = 32798
  POST_CONVOLUTION_ALPHA_SCALE_EXT = 32799
  POST_CONVOLUTION_RED_BIAS_EXT = 32800
  POST_CONVOLUTION_GREEN_BIAS_EXT = 32801
  POST_CONVOLUTION_BLUE_BIAS_EXT = 32802
  POST_CONVOLUTION_ALPHA_BIAS_EXT = 32803
  EXT_COORDINATE_FRAME = 1
  TANGENT_ARRAY_EXT = 33849
  BINORMAL_ARRAY_EXT = 33850
  CURRENT_TANGENT_EXT = 33851
  CURRENT_BINORMAL_EXT = 33852
  TANGENT_ARRAY_TYPE_EXT = 33854
  TANGENT_ARRAY_STRIDE_EXT = 33855
  BINORMAL_ARRAY_TYPE_EXT = 33856
  BINORMAL_ARRAY_STRIDE_EXT = 33857
  TANGENT_ARRAY_POINTER_EXT = 33858
  BINORMAL_ARRAY_POINTER_EXT = 33859
  MAP1_TANGENT_EXT = 33860
  MAP2_TANGENT_EXT = 33861
  MAP1_BINORMAL_EXT = 33862
  MAP2_BINORMAL_EXT = 33863
  EXT_COPY_TEXTURE = 1
  EXT_CULL_VERTEX = 1
  CULL_VERTEX_EXT = 33194
  CULL_VERTEX_EYE_POSITION_EXT = 33195
  CULL_VERTEX_OBJECT_POSITION_EXT = 33196
  EXT_DEPTH_BOUNDS_TEST = 1
  DEPTH_BOUNDS_TEST_EXT = 34960
  DEPTH_BOUNDS_EXT = 34961
  EXT_DRAW_BUFFERS2 = 1
  EXT_DRAW_RANGE_ELEMENTS = 1
  MAX_ELEMENTS_VERTICES_EXT = 33000
  MAX_ELEMENTS_INDICES_EXT = 33001
  EXT_EXTERNAL_BUFFER = 1
  EXT_FOG_COORD = 1
  FOG_COORDINATE_SOURCE_EXT = 33872
  FOG_COORDINATE_EXT = 33873
  FRAGMENT_DEPTH_EXT = 33874
  CURRENT_FOG_COORDINATE_EXT = 33875
  FOG_COORDINATE_ARRAY_TYPE_EXT = 33876
  FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877
  FOG_COORDINATE_ARRAY_POINTER_EXT = 33878
  FOG_COORDINATE_ARRAY_EXT = 33879
  EXT_FRAMEBUFFER_BLIT = 1
  READ_FRAMEBUFFER_EXT = 36008
  DRAW_FRAMEBUFFER_EXT = 36009
  DRAW_FRAMEBUFFER_BINDING_EXT = 36006
  READ_FRAMEBUFFER_BINDING_EXT = 36010
  EXT_FRAMEBUFFER_MULTISAMPLE = 1
  RENDERBUFFER_SAMPLES_EXT = 36011
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182
  MAX_SAMPLES_EXT = 36183
  EXT_FRAMEBUFFER_MULTISAMPLE_BLIT_SCALED = 1
  SCALED_RESOLVE_FASTEST_EXT = 37050
  SCALED_RESOLVE_NICEST_EXT = 37051
  EXT_FRAMEBUFFER_OBJECT = 1
  INVALID_FRAMEBUFFER_OPERATION_EXT = 1286
  MAX_RENDERBUFFER_SIZE_EXT = 34024
  FRAMEBUFFER_BINDING_EXT = 36006
  RENDERBUFFER_BINDING_EXT = 36007
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051
  FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052
  FRAMEBUFFER_COMPLETE_EXT = 36053
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057
  FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058
  FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059
  FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060
  FRAMEBUFFER_UNSUPPORTED_EXT = 36061
  MAX_COLOR_ATTACHMENTS_EXT = 36063
  COLOR_ATTACHMENT0_EXT = 36064
  COLOR_ATTACHMENT1_EXT = 36065
  COLOR_ATTACHMENT2_EXT = 36066
  COLOR_ATTACHMENT3_EXT = 36067
  COLOR_ATTACHMENT4_EXT = 36068
  COLOR_ATTACHMENT5_EXT = 36069
  COLOR_ATTACHMENT6_EXT = 36070
  COLOR_ATTACHMENT7_EXT = 36071
  COLOR_ATTACHMENT8_EXT = 36072
  COLOR_ATTACHMENT9_EXT = 36073
  COLOR_ATTACHMENT10_EXT = 36074
  COLOR_ATTACHMENT11_EXT = 36075
  COLOR_ATTACHMENT12_EXT = 36076
  COLOR_ATTACHMENT13_EXT = 36077
  COLOR_ATTACHMENT14_EXT = 36078
  COLOR_ATTACHMENT15_EXT = 36079
  DEPTH_ATTACHMENT_EXT = 36096
  STENCIL_ATTACHMENT_EXT = 36128
  FRAMEBUFFER_EXT = 36160
  RENDERBUFFER_EXT = 36161
  RENDERBUFFER_WIDTH_EXT = 36162
  RENDERBUFFER_HEIGHT_EXT = 36163
  RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164
  STENCIL_INDEX1_EXT = 36166
  STENCIL_INDEX4_EXT = 36167
  STENCIL_INDEX8_EXT = 36168
  STENCIL_INDEX16_EXT = 36169
  RENDERBUFFER_RED_SIZE_EXT = 36176
  RENDERBUFFER_GREEN_SIZE_EXT = 36177
  RENDERBUFFER_BLUE_SIZE_EXT = 36178
  RENDERBUFFER_ALPHA_SIZE_EXT = 36179
  RENDERBUFFER_DEPTH_SIZE_EXT = 36180
  RENDERBUFFER_STENCIL_SIZE_EXT = 36181
  EXT_FRAMEBUFFER_SRGB = 1
  FRAMEBUFFER_SRGB_EXT = 36281
  FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282
  EXT_GEOMETRY_SHADER4 = 1
  GEOMETRY_SHADER_EXT = 36313
  GEOMETRY_VERTICES_OUT_EXT = 36314
  GEOMETRY_INPUT_TYPE_EXT = 36315
  GEOMETRY_OUTPUT_TYPE_EXT = 36316
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881
  MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317
  MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318
  MAX_VARYING_COMPONENTS_EXT = 35659
  MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319
  MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321
  LINES_ADJACENCY_EXT = 10
  LINE_STRIP_ADJACENCY_EXT = 11
  TRIANGLES_ADJACENCY_EXT = 12
  TRIANGLE_STRIP_ADJACENCY_EXT = 13
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264
  FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265
  FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052
  PROGRAM_POINT_SIZE_EXT = 34370
  EXT_GPU_PROGRAM_PARAMETERS = 1
  EXT_GPU_SHADER4 = 1
  VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069
  SAMPLER_1D_ARRAY_EXT = 36288
  SAMPLER_2D_ARRAY_EXT = 36289
  SAMPLER_BUFFER_EXT = 36290
  SAMPLER_1D_ARRAY_SHADOW_EXT = 36291
  SAMPLER_2D_ARRAY_SHADOW_EXT = 36292
  SAMPLER_CUBE_SHADOW_EXT = 36293
  UNSIGNED_INT_VEC2_EXT = 36294
  UNSIGNED_INT_VEC3_EXT = 36295
  UNSIGNED_INT_VEC4_EXT = 36296
  INT_SAMPLER_1D_EXT = 36297
  INT_SAMPLER_2D_EXT = 36298
  INT_SAMPLER_3D_EXT = 36299
  INT_SAMPLER_CUBE_EXT = 36300
  INT_SAMPLER_2D_RECT_EXT = 36301
  INT_SAMPLER_1D_ARRAY_EXT = 36302
  INT_SAMPLER_2D_ARRAY_EXT = 36303
  INT_SAMPLER_BUFFER_EXT = 36304
  UNSIGNED_INT_SAMPLER_1D_EXT = 36305
  UNSIGNED_INT_SAMPLER_2D_EXT = 36306
  UNSIGNED_INT_SAMPLER_3D_EXT = 36307
  UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308
  UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309
  UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310
  UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311
  UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312
  MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076
  MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077
  EXT_HISTOGRAM = 1
  HISTOGRAM_EXT = 32804
  PROXY_HISTOGRAM_EXT = 32805
  HISTOGRAM_WIDTH_EXT = 32806
  HISTOGRAM_FORMAT_EXT = 32807
  HISTOGRAM_RED_SIZE_EXT = 32808
  HISTOGRAM_GREEN_SIZE_EXT = 32809
  HISTOGRAM_BLUE_SIZE_EXT = 32810
  HISTOGRAM_ALPHA_SIZE_EXT = 32811
  HISTOGRAM_LUMINANCE_SIZE_EXT = 32812
  HISTOGRAM_SINK_EXT = 32813
  MINMAX_EXT = 32814
  MINMAX_FORMAT_EXT = 32815
  MINMAX_SINK_EXT = 32816
  TABLE_TOO_LARGE_EXT = 32817
  EXT_INDEX_ARRAY_FORMATS = 1
  IUI_V2F_EXT = 33197
  IUI_V3F_EXT = 33198
  IUI_N3F_V2F_EXT = 33199
  IUI_N3F_V3F_EXT = 33200
  T2F_IUI_V2F_EXT = 33201
  T2F_IUI_V3F_EXT = 33202
  T2F_IUI_N3F_V2F_EXT = 33203
  T2F_IUI_N3F_V3F_EXT = 33204
  EXT_INDEX_FUNC = 1
  INDEX_TEST_EXT = 33205
  INDEX_TEST_FUNC_EXT = 33206
  INDEX_TEST_REF_EXT = 33207
  EXT_INDEX_MATERIAL = 1
  INDEX_MATERIAL_EXT = 33208
  INDEX_MATERIAL_PARAMETER_EXT = 33209
  INDEX_MATERIAL_FACE_EXT = 33210
  EXT_INDEX_TEXTURE = 1
  EXT_LIGHT_TEXTURE = 1
  FRAGMENT_MATERIAL_EXT = 33609
  FRAGMENT_NORMAL_EXT = 33610
  FRAGMENT_COLOR_EXT = 33612
  ATTENUATION_EXT = 33613
  SHADOW_ATTENUATION_EXT = 33614
  TEXTURE_APPLICATION_MODE_EXT = 33615
  TEXTURE_LIGHT_EXT = 33616
  TEXTURE_MATERIAL_FACE_EXT = 33617
  TEXTURE_MATERIAL_PARAMETER_EXT = 33618
  EXT_MEMORY_OBJECT = 1
  TEXTURE_TILING_EXT = 38272
  DEDICATED_MEMORY_OBJECT_EXT = 38273
  PROTECTED_MEMORY_OBJECT_EXT = 38299
  NUM_TILING_TYPES_EXT = 38274
  TILING_TYPES_EXT = 38275
  OPTIMAL_TILING_EXT = 38276
  LINEAR_TILING_EXT = 38277
  NUM_DEVICE_UUIDS_EXT = 38294
  DEVICE_UUID_EXT = 38295
  DRIVER_UUID_EXT = 38296
  UUID_SIZE_EXT = 16
  EXT_MEMORY_OBJECT_FD = 1
  HANDLE_TYPE_OPAQUE_FD_EXT = 38278
  EXT_MEMORY_OBJECT_WIN32 = 1
  HANDLE_TYPE_OPAQUE_WIN32_EXT = 38279
  HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 38280
  DEVICE_LUID_EXT = 38297
  DEVICE_NODE_MASK_EXT = 38298
  LUID_SIZE_EXT = 8
  HANDLE_TYPE_D3D12_TILEPOOL_EXT = 38281
  HANDLE_TYPE_D3D12_RESOURCE_EXT = 38282
  HANDLE_TYPE_D3D11_IMAGE_EXT = 38283
  HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 38284
  EXT_MISC_ATTRIBUTE = 1
  EXT_MULTI_DRAW_ARRAYS = 1
  EXT_MULTISAMPLE = 1
  MULTISAMPLE_EXT = 32925
  SAMPLE_ALPHA_TO_MASK_EXT = 32926
  SAMPLE_ALPHA_TO_ONE_EXT = 32927
  SAMPLE_MASK_EXT = 32928
  SAMPLE_BUFFERS_EXT = 32936
  SAMPLES_EXT = 32937
  SAMPLE_MASK_VALUE_EXT = 32938
  SAMPLE_MASK_INVERT_EXT = 32939
  SAMPLE_PATTERN_EXT = 32940
  MULTISAMPLE_BIT_EXT = 536870912
  EXT_PACKED_DEPTH_STENCIL = 1
  DEPTH_STENCIL_EXT = 34041
  UNSIGNED_INT_24_8_EXT = 34042
  DEPTH24_STENCIL8_EXT = 35056
  TEXTURE_STENCIL_SIZE_EXT = 35057
  EXT_PACKED_FLOAT = 1
  R11F_G11F_B10F_EXT = 35898
  UNSIGNED_INT_10F_11F_11F_REV_EXT = 35899
  RGBA_SIGNED_COMPONENTS_EXT = 35900
  EXT_PACKED_PIXELS = 1
  UNSIGNED_BYTE_3_3_2_EXT = 32818
  UNSIGNED_SHORT_4_4_4_4_EXT = 32819
  UNSIGNED_SHORT_5_5_5_1_EXT = 32820
  UNSIGNED_INT_8_8_8_8_EXT = 32821
  UNSIGNED_INT_10_10_10_2_EXT = 32822
  EXT_PALETTED_TEXTURE = 1
  COLOR_INDEX1_EXT = 32994
  COLOR_INDEX2_EXT = 32995
  COLOR_INDEX4_EXT = 32996
  COLOR_INDEX8_EXT = 32997
  COLOR_INDEX12_EXT = 32998
  COLOR_INDEX16_EXT = 32999
  TEXTURE_INDEX_SIZE_EXT = 33005
  EXT_PIXEL_BUFFER_OBJECT = 1
  PIXEL_PACK_BUFFER_EXT = 35051
  PIXEL_UNPACK_BUFFER_EXT = 35052
  PIXEL_PACK_BUFFER_BINDING_EXT = 35053
  PIXEL_UNPACK_BUFFER_BINDING_EXT = 35055
  EXT_PIXEL_TRANSFORM = 1
  PIXEL_TRANSFORM_2D_EXT = 33584
  PIXEL_MAG_FILTER_EXT = 33585
  PIXEL_MIN_FILTER_EXT = 33586
  PIXEL_CUBIC_WEIGHT_EXT = 33587
  CUBIC_EXT = 33588
  AVERAGE_EXT = 33589
  PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590
  MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591
  PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592
  EXT_PIXEL_TRANSFORM_COLOR_TABLE = 1
  EXT_POINT_PARAMETERS = 1
  POINT_SIZE_MIN_EXT = 33062
  POINT_SIZE_MAX_EXT = 33063
  POINT_FADE_THRESHOLD_SIZE_EXT = 33064
  DISTANCE_ATTENUATION_EXT = 33065
  EXT_POLYGON_OFFSET = 1
  POLYGON_OFFSET_EXT = 32823
  POLYGON_OFFSET_FACTOR_EXT = 32824
  POLYGON_OFFSET_BIAS_EXT = 32825
  EXT_PROVOKING_VERTEX = 1
  QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428
  FIRST_VERTEX_CONVENTION_EXT = 36429
  LAST_VERTEX_CONVENTION_EXT = 36430
  PROVOKING_VERTEX_EXT = 36431
  EXT_RESCALE_NORMAL = 1
  RESCALE_NORMAL_EXT = 32826
  EXT_SECONDARY_COLOR = 1
  COLOR_SUM_EXT = 33880
  CURRENT_SECONDARY_COLOR_EXT = 33881
  SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882
  SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883
  SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884
  SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885
  SECONDARY_COLOR_ARRAY_EXT = 33886
  EXT_SEMAPHORE = 1
  LAYOUT_GENERAL_EXT = 38285
  LAYOUT_COLOR_ATTACHMENT_EXT = 38286
  LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 38287
  LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 38288
  LAYOUT_SHADER_READ_ONLY_EXT = 38289
  LAYOUT_TRANSFER_SRC_EXT = 38290
  LAYOUT_TRANSFER_DST_EXT = 38291
  EXT_SEMAPHORE_FD = 1
  EXT_SEMAPHORE_WIN32 = 1
  HANDLE_TYPE_D3D12_FENCE_EXT = 38292
  D3D12_FENCE_VALUE_EXT = 38293
  EXT_SEPARATE_SPECULAR_COLOR = 1
  LIGHT_MODEL_COLOR_CONTROL_EXT = 33272
  SINGLE_COLOR_EXT = 33273
  SEPARATE_SPECULAR_COLOR_EXT = 33274
  EXT_SHADER_IMAGE_LOAD_FORMATTED = 1
  EXT_SHADER_IMAGE_LOAD_STORE = 1
  MAX_IMAGE_UNITS_EXT = 36664
  MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 36665
  IMAGE_BINDING_NAME_EXT = 36666
  IMAGE_BINDING_LEVEL_EXT = 36667
  IMAGE_BINDING_LAYERED_EXT = 36668
  IMAGE_BINDING_LAYER_EXT = 36669
  IMAGE_BINDING_ACCESS_EXT = 36670
  IMAGE_1D_EXT = 36940
  IMAGE_2D_EXT = 36941
  IMAGE_3D_EXT = 36942
  IMAGE_2D_RECT_EXT = 36943
  IMAGE_CUBE_EXT = 36944
  IMAGE_BUFFER_EXT = 36945
  IMAGE_1D_ARRAY_EXT = 36946
  IMAGE_2D_ARRAY_EXT = 36947
  IMAGE_CUBE_MAP_ARRAY_EXT = 36948
  IMAGE_2D_MULTISAMPLE_EXT = 36949
  IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36950
  INT_IMAGE_1D_EXT = 36951
  INT_IMAGE_2D_EXT = 36952
  INT_IMAGE_3D_EXT = 36953
  INT_IMAGE_2D_RECT_EXT = 36954
  INT_IMAGE_CUBE_EXT = 36955
  INT_IMAGE_BUFFER_EXT = 36956
  INT_IMAGE_1D_ARRAY_EXT = 36957
  INT_IMAGE_2D_ARRAY_EXT = 36958
  INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959
  INT_IMAGE_2D_MULTISAMPLE_EXT = 36960
  INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36961
  UNSIGNED_INT_IMAGE_1D_EXT = 36962
  UNSIGNED_INT_IMAGE_2D_EXT = 36963
  UNSIGNED_INT_IMAGE_3D_EXT = 36964
  UNSIGNED_INT_IMAGE_2D_RECT_EXT = 36965
  UNSIGNED_INT_IMAGE_CUBE_EXT = 36966
  UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967
  UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 36968
  UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 36969
  UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 36971
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36972
  MAX_IMAGE_SAMPLES_EXT = 36973
  IMAGE_BINDING_FORMAT_EXT = 36974
  VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 1
  ELEMENT_ARRAY_BARRIER_BIT_EXT = 2
  UNIFORM_BARRIER_BIT_EXT = 4
  TEXTURE_FETCH_BARRIER_BIT_EXT = 8
  SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 32
  COMMAND_BARRIER_BIT_EXT = 64
  PIXEL_BUFFER_BARRIER_BIT_EXT = 128
  TEXTURE_UPDATE_BARRIER_BIT_EXT = 256
  BUFFER_UPDATE_BARRIER_BIT_EXT = 512
  FRAMEBUFFER_BARRIER_BIT_EXT = 1024
  TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 2048
  ATOMIC_COUNTER_BARRIER_BIT_EXT = 4096
  ALL_BARRIER_BITS_EXT = 4294967295_i64
  EXT_SHADOW_FUNCS = 1
  EXT_SHARED_TEXTURE_PALETTE = 1
  SHARED_TEXTURE_PALETTE_EXT = 33275
  EXT_SPARSE_TEXTURE2 = 1
  EXT_STENCIL_CLEAR_TAG = 1
  STENCIL_TAG_BITS_EXT = 35058
  STENCIL_CLEAR_TAG_VALUE_EXT = 35059
  EXT_STENCIL_TWO_SIDE = 1
  STENCIL_TEST_TWO_SIDE_EXT = 35088
  ACTIVE_STENCIL_FACE_EXT = 35089
  EXT_STENCIL_WRAP = 1
  INCR_WRAP_EXT = 34055
  DECR_WRAP_EXT = 34056
  EXT_SUBTEXTURE = 1
  EXT_TEXTURE = 1
  ALPHA4_EXT = 32827
  ALPHA8_EXT = 32828
  ALPHA12_EXT = 32829
  ALPHA16_EXT = 32830
  LUMINANCE4_EXT = 32831
  LUMINANCE8_EXT = 32832
  LUMINANCE12_EXT = 32833
  LUMINANCE16_EXT = 32834
  LUMINANCE4_ALPHA4_EXT = 32835
  LUMINANCE6_ALPHA2_EXT = 32836
  LUMINANCE8_ALPHA8_EXT = 32837
  LUMINANCE12_ALPHA4_EXT = 32838
  LUMINANCE12_ALPHA12_EXT = 32839
  LUMINANCE16_ALPHA16_EXT = 32840
  INTENSITY_EXT = 32841
  INTENSITY4_EXT = 32842
  INTENSITY8_EXT = 32843
  INTENSITY12_EXT = 32844
  INTENSITY16_EXT = 32845
  RGB2_EXT = 32846
  RGB4_EXT = 32847
  RGB5_EXT = 32848
  RGB8_EXT = 32849
  RGB10_EXT = 32850
  RGB12_EXT = 32851
  RGB16_EXT = 32852
  RGBA2_EXT = 32853
  RGBA4_EXT = 32854
  RGB5_A1_EXT = 32855
  RGBA8_EXT = 32856
  RGB10_A2_EXT = 32857
  RGBA12_EXT = 32858
  RGBA16_EXT = 32859
  TEXTURE_RED_SIZE_EXT = 32860
  TEXTURE_GREEN_SIZE_EXT = 32861
  TEXTURE_BLUE_SIZE_EXT = 32862
  TEXTURE_ALPHA_SIZE_EXT = 32863
  TEXTURE_LUMINANCE_SIZE_EXT = 32864
  TEXTURE_INTENSITY_SIZE_EXT = 32865
  REPLACE_EXT = 32866
  PROXY_TEXTURE_1D_EXT = 32867
  PROXY_TEXTURE_2D_EXT = 32868
  TEXTURE_TOO_LARGE_EXT = 32869
  EXT_TEXTURE3D = 1
  PACK_SKIP_IMAGES_EXT = 32875
  PACK_IMAGE_HEIGHT_EXT = 32876
  UNPACK_SKIP_IMAGES_EXT = 32877
  UNPACK_IMAGE_HEIGHT_EXT = 32878
  TEXTURE_3D_EXT = 32879
  PROXY_TEXTURE_3D_EXT = 32880
  TEXTURE_DEPTH_EXT = 32881
  TEXTURE_WRAP_R_EXT = 32882
  MAX_3D_TEXTURE_SIZE_EXT = 32883
  EXT_TEXTURE_ARRAY = 1
  TEXTURE_1D_ARRAY_EXT = 35864
  PROXY_TEXTURE_1D_ARRAY_EXT = 35865
  TEXTURE_2D_ARRAY_EXT = 35866
  PROXY_TEXTURE_2D_ARRAY_EXT = 35867
  TEXTURE_BINDING_1D_ARRAY_EXT = 35868
  TEXTURE_BINDING_2D_ARRAY_EXT = 35869
  MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071
  COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894
  EXT_TEXTURE_BUFFER_OBJECT = 1
  TEXTURE_BUFFER_EXT = 35882
  MAX_TEXTURE_BUFFER_SIZE_EXT = 35883
  TEXTURE_BINDING_BUFFER_EXT = 35884
  TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885
  TEXTURE_BUFFER_FORMAT_EXT = 35886
  EXT_TEXTURE_COMPRESSION_LATC = 1
  COMPRESSED_LUMINANCE_LATC1_EXT = 35952
  COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 35953
  COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 35954
  COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 35955
  EXT_TEXTURE_COMPRESSION_RGTC = 1
  COMPRESSED_RED_RGTC1_EXT = 36283
  COMPRESSED_SIGNED_RED_RGTC1_EXT = 36284
  COMPRESSED_RED_GREEN_RGTC2_EXT = 36285
  COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286
  EXT_TEXTURE_CUBE_MAP = 1
  NORMAL_MAP_EXT = 34065
  REFLECTION_MAP_EXT = 34066
  TEXTURE_CUBE_MAP_EXT = 34067
  TEXTURE_BINDING_CUBE_MAP_EXT = 34068
  TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 34069
  TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 34070
  TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 34071
  TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 34072
  TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 34073
  TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 34074
  PROXY_TEXTURE_CUBE_MAP_EXT = 34075
  MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 34076
  EXT_TEXTURE_ENV_ADD = 1
  EXT_TEXTURE_ENV_COMBINE = 1
  COMBINE_EXT = 34160
  COMBINE_RGB_EXT = 34161
  COMBINE_ALPHA_EXT = 34162
  RGB_SCALE_EXT = 34163
  ADD_SIGNED_EXT = 34164
  INTERPOLATE_EXT = 34165
  CONSTANT_EXT = 34166
  PRIMARY_COLOR_EXT = 34167
  PREVIOUS_EXT = 34168
  SOURCE0_RGB_EXT = 34176
  SOURCE1_RGB_EXT = 34177
  SOURCE2_RGB_EXT = 34178
  SOURCE0_ALPHA_EXT = 34184
  SOURCE1_ALPHA_EXT = 34185
  SOURCE2_ALPHA_EXT = 34186
  OPERAND0_RGB_EXT = 34192
  OPERAND1_RGB_EXT = 34193
  OPERAND2_RGB_EXT = 34194
  OPERAND0_ALPHA_EXT = 34200
  OPERAND1_ALPHA_EXT = 34201
  OPERAND2_ALPHA_EXT = 34202
  EXT_TEXTURE_ENV_DOT3 = 1
  DOT3_RGB_EXT = 34624
  DOT3_RGBA_EXT = 34625
  EXT_TEXTURE_FILTER_ANISOTROPIC = 1
  TEXTURE_MAX_ANISOTROPY_EXT = 34046
  MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047
  EXT_TEXTURE_INTEGER = 1
  RGBA32UI_EXT = 36208
  RGB32UI_EXT = 36209
  ALPHA32UI_EXT = 36210
  INTENSITY32UI_EXT = 36211
  LUMINANCE32UI_EXT = 36212
  LUMINANCE_ALPHA32UI_EXT = 36213
  RGBA16UI_EXT = 36214
  RGB16UI_EXT = 36215
  ALPHA16UI_EXT = 36216
  INTENSITY16UI_EXT = 36217
  LUMINANCE16UI_EXT = 36218
  LUMINANCE_ALPHA16UI_EXT = 36219
  RGBA8UI_EXT = 36220
  RGB8UI_EXT = 36221
  ALPHA8UI_EXT = 36222
  INTENSITY8UI_EXT = 36223
  LUMINANCE8UI_EXT = 36224
  LUMINANCE_ALPHA8UI_EXT = 36225
  RGBA32I_EXT = 36226
  RGB32I_EXT = 36227
  ALPHA32I_EXT = 36228
  INTENSITY32I_EXT = 36229
  LUMINANCE32I_EXT = 36230
  LUMINANCE_ALPHA32I_EXT = 36231
  RGBA16I_EXT = 36232
  RGB16I_EXT = 36233
  ALPHA16I_EXT = 36234
  INTENSITY16I_EXT = 36235
  LUMINANCE16I_EXT = 36236
  LUMINANCE_ALPHA16I_EXT = 36237
  RGBA8I_EXT = 36238
  RGB8I_EXT = 36239
  ALPHA8I_EXT = 36240
  INTENSITY8I_EXT = 36241
  LUMINANCE8I_EXT = 36242
  LUMINANCE_ALPHA8I_EXT = 36243
  RED_INTEGER_EXT = 36244
  GREEN_INTEGER_EXT = 36245
  BLUE_INTEGER_EXT = 36246
  ALPHA_INTEGER_EXT = 36247
  RGB_INTEGER_EXT = 36248
  RGBA_INTEGER_EXT = 36249
  BGR_INTEGER_EXT = 36250
  BGRA_INTEGER_EXT = 36251
  LUMINANCE_INTEGER_EXT = 36252
  LUMINANCE_ALPHA_INTEGER_EXT = 36253
  RGBA_INTEGER_MODE_EXT = 36254
  EXT_TEXTURE_LOD_BIAS = 1
  MAX_TEXTURE_LOD_BIAS_EXT = 34045
  TEXTURE_FILTER_CONTROL_EXT = 34048
  TEXTURE_LOD_BIAS_EXT = 34049
  EXT_TEXTURE_MIRROR_CLAMP = 1
  MIRROR_CLAMP_EXT = 34626
  MIRROR_CLAMP_TO_EDGE_EXT = 34627
  MIRROR_CLAMP_TO_BORDER_EXT = 35090
  EXT_TEXTURE_OBJECT = 1
  TEXTURE_PRIORITY_EXT = 32870
  TEXTURE_RESIDENT_EXT = 32871
  TEXTURE_1D_BINDING_EXT = 32872
  TEXTURE_2D_BINDING_EXT = 32873
  TEXTURE_3D_BINDING_EXT = 32874
  EXT_TEXTURE_PERTURB_NORMAL = 1
  PERTURB_EXT = 34222
  TEXTURE_NORMAL_EXT = 34223
  EXT_TEXTURE_SRGB = 1
  SRGB_EXT = 35904
  SRGB8_EXT = 35905
  SRGB_ALPHA_EXT = 35906
  SRGB8_ALPHA8_EXT = 35907
  SLUMINANCE_ALPHA_EXT = 35908
  SLUMINANCE8_ALPHA8_EXT = 35909
  SLUMINANCE_EXT = 35910
  SLUMINANCE8_EXT = 35911
  COMPRESSED_SRGB_EXT = 35912
  COMPRESSED_SRGB_ALPHA_EXT = 35913
  COMPRESSED_SLUMINANCE_EXT = 35914
  COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915
  COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916
  COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917
  COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918
  COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919
  EXT_TEXTURE_SHARED_EXPONENT = 1
  RGB9_E5_EXT = 35901
  UNSIGNED_INT_5_9_9_9_REV_EXT = 35902
  TEXTURE_SHARED_SIZE_EXT = 35903
  EXT_TEXTURE_SNORM = 1
  ALPHA_SNORM = 36880
  LUMINANCE_SNORM = 36881
  LUMINANCE_ALPHA_SNORM = 36882
  INTENSITY_SNORM = 36883
  ALPHA8_SNORM = 36884
  LUMINANCE8_SNORM = 36885
  LUMINANCE8_ALPHA8_SNORM = 36886
  INTENSITY8_SNORM = 36887
  ALPHA16_SNORM = 36888
  LUMINANCE16_SNORM = 36889
  LUMINANCE16_ALPHA16_SNORM = 36890
  INTENSITY16_SNORM = 36891
  RED_SNORM = 36752
  RG_SNORM = 36753
  RGB_SNORM = 36754
  RGBA_SNORM = 36755
  EXT_TEXTURE_SWIZZLE = 1
  TEXTURE_SWIZZLE_R_EXT = 36418
  TEXTURE_SWIZZLE_G_EXT = 36419
  TEXTURE_SWIZZLE_B_EXT = 36420
  TEXTURE_SWIZZLE_A_EXT = 36421
  TEXTURE_SWIZZLE_RGBA_EXT = 36422
  EXT_TIMER_QUERY = 1
  TIME_ELAPSED_EXT = 35007
  EXT_TRANSFORM_FEEDBACK = 1
  TRANSFORM_FEEDBACK_BUFFER_EXT = 35982
  TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972
  TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973
  TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983
  INTERLEAVED_ATTRIBS_EXT = 35980
  SEPARATE_ATTRIBS_EXT = 35981
  PRIMITIVES_GENERATED_EXT = 35975
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976
  RASTERIZER_DISCARD_EXT = 35977
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968
  TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971
  TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967
  TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958
  EXT_VERTEX_ARRAY = 1
  VERTEX_ARRAY_EXT = 32884
  NORMAL_ARRAY_EXT = 32885
  COLOR_ARRAY_EXT = 32886
  INDEX_ARRAY_EXT = 32887
  TEXTURE_COORD_ARRAY_EXT = 32888
  EDGE_FLAG_ARRAY_EXT = 32889
  VERTEX_ARRAY_SIZE_EXT = 32890
  VERTEX_ARRAY_TYPE_EXT = 32891
  VERTEX_ARRAY_STRIDE_EXT = 32892
  VERTEX_ARRAY_COUNT_EXT = 32893
  NORMAL_ARRAY_TYPE_EXT = 32894
  NORMAL_ARRAY_STRIDE_EXT = 32895
  NORMAL_ARRAY_COUNT_EXT = 32896
  COLOR_ARRAY_SIZE_EXT = 32897
  COLOR_ARRAY_TYPE_EXT = 32898
  COLOR_ARRAY_STRIDE_EXT = 32899
  COLOR_ARRAY_COUNT_EXT = 32900
  INDEX_ARRAY_TYPE_EXT = 32901
  INDEX_ARRAY_STRIDE_EXT = 32902
  INDEX_ARRAY_COUNT_EXT = 32903
  TEXTURE_COORD_ARRAY_SIZE_EXT = 32904
  TEXTURE_COORD_ARRAY_TYPE_EXT = 32905
  TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906
  TEXTURE_COORD_ARRAY_COUNT_EXT = 32907
  EDGE_FLAG_ARRAY_STRIDE_EXT = 32908
  EDGE_FLAG_ARRAY_COUNT_EXT = 32909
  VERTEX_ARRAY_POINTER_EXT = 32910
  NORMAL_ARRAY_POINTER_EXT = 32911
  COLOR_ARRAY_POINTER_EXT = 32912
  INDEX_ARRAY_POINTER_EXT = 32913
  TEXTURE_COORD_ARRAY_POINTER_EXT = 32914
  EDGE_FLAG_ARRAY_POINTER_EXT = 32915
  EXT_VERTEX_ARRAY_BGRA = 1
  EXT_VERTEX_ATTRIB_64BIT = 1
  DOUBLE_VEC2_EXT = 36860
  DOUBLE_VEC3_EXT = 36861
  DOUBLE_VEC4_EXT = 36862
  DOUBLE_MAT2_EXT = 36678
  DOUBLE_MAT3_EXT = 36679
  DOUBLE_MAT4_EXT = 36680
  DOUBLE_MAT2X3_EXT = 36681
  DOUBLE_MAT2X4_EXT = 36682
  DOUBLE_MAT3X2_EXT = 36683
  DOUBLE_MAT3X4_EXT = 36684
  DOUBLE_MAT4X2_EXT = 36685
  DOUBLE_MAT4X3_EXT = 36686
  EXT_VERTEX_SHADER = 1
  VERTEX_SHADER_EXT = 34688
  VERTEX_SHADER_BINDING_EXT = 34689
  OP_INDEX_EXT = 34690
  OP_NEGATE_EXT = 34691
  OP_DOT3_EXT = 34692
  OP_DOT4_EXT = 34693
  OP_MUL_EXT = 34694
  OP_ADD_EXT = 34695
  OP_MADD_EXT = 34696
  OP_FRAC_EXT = 34697
  OP_MAX_EXT = 34698
  OP_MIN_EXT = 34699
  OP_SET_GE_EXT = 34700
  OP_SET_LT_EXT = 34701
  OP_CLAMP_EXT = 34702
  OP_FLOOR_EXT = 34703
  OP_ROUND_EXT = 34704
  OP_EXP_BASE_2_EXT = 34705
  OP_LOG_BASE_2_EXT = 34706
  OP_POWER_EXT = 34707
  OP_RECIP_EXT = 34708
  OP_RECIP_SQRT_EXT = 34709
  OP_SUB_EXT = 34710
  OP_CROSS_PRODUCT_EXT = 34711
  OP_MULTIPLY_MATRIX_EXT = 34712
  OP_MOV_EXT = 34713
  OUTPUT_VERTEX_EXT = 34714
  OUTPUT_COLOR0_EXT = 34715
  OUTPUT_COLOR1_EXT = 34716
  OUTPUT_TEXTURE_COORD0_EXT = 34717
  OUTPUT_TEXTURE_COORD1_EXT = 34718
  OUTPUT_TEXTURE_COORD2_EXT = 34719
  OUTPUT_TEXTURE_COORD3_EXT = 34720
  OUTPUT_TEXTURE_COORD4_EXT = 34721
  OUTPUT_TEXTURE_COORD5_EXT = 34722
  OUTPUT_TEXTURE_COORD6_EXT = 34723
  OUTPUT_TEXTURE_COORD7_EXT = 34724
  OUTPUT_TEXTURE_COORD8_EXT = 34725
  OUTPUT_TEXTURE_COORD9_EXT = 34726
  OUTPUT_TEXTURE_COORD10_EXT = 34727
  OUTPUT_TEXTURE_COORD11_EXT = 34728
  OUTPUT_TEXTURE_COORD12_EXT = 34729
  OUTPUT_TEXTURE_COORD13_EXT = 34730
  OUTPUT_TEXTURE_COORD14_EXT = 34731
  OUTPUT_TEXTURE_COORD15_EXT = 34732
  OUTPUT_TEXTURE_COORD16_EXT = 34733
  OUTPUT_TEXTURE_COORD17_EXT = 34734
  OUTPUT_TEXTURE_COORD18_EXT = 34735
  OUTPUT_TEXTURE_COORD19_EXT = 34736
  OUTPUT_TEXTURE_COORD20_EXT = 34737
  OUTPUT_TEXTURE_COORD21_EXT = 34738
  OUTPUT_TEXTURE_COORD22_EXT = 34739
  OUTPUT_TEXTURE_COORD23_EXT = 34740
  OUTPUT_TEXTURE_COORD24_EXT = 34741
  OUTPUT_TEXTURE_COORD25_EXT = 34742
  OUTPUT_TEXTURE_COORD26_EXT = 34743
  OUTPUT_TEXTURE_COORD27_EXT = 34744
  OUTPUT_TEXTURE_COORD28_EXT = 34745
  OUTPUT_TEXTURE_COORD29_EXT = 34746
  OUTPUT_TEXTURE_COORD30_EXT = 34747
  OUTPUT_TEXTURE_COORD31_EXT = 34748
  OUTPUT_FOG_EXT = 34749
  SCALAR_EXT = 34750
  VECTOR_EXT = 34751
  MATRIX_EXT = 34752
  VARIANT_EXT = 34753
  INVARIANT_EXT = 34754
  LOCAL_CONSTANT_EXT = 34755
  LOCAL_EXT = 34756
  MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757
  MAX_VERTEX_SHADER_VARIANTS_EXT = 34758
  MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759
  MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760
  MAX_VERTEX_SHADER_LOCALS_EXT = 34761
  MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762
  MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763
  MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764
  MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765
  MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766
  VERTEX_SHADER_INSTRUCTIONS_EXT = 34767
  VERTEX_SHADER_VARIANTS_EXT = 34768
  VERTEX_SHADER_INVARIANTS_EXT = 34769
  VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770
  VERTEX_SHADER_LOCALS_EXT = 34771
  VERTEX_SHADER_OPTIMIZED_EXT = 34772
  X_EXT = 34773
  Y_EXT = 34774
  Z_EXT = 34775
  W_EXT = 34776
  NEGATIVE_X_EXT = 34777
  NEGATIVE_Y_EXT = 34778
  NEGATIVE_Z_EXT = 34779
  NEGATIVE_W_EXT = 34780
  ZERO_EXT = 34781
  ONE_EXT = 34782
  NEGATIVE_ONE_EXT = 34783
  NORMALIZED_RANGE_EXT = 34784
  FULL_RANGE_EXT = 34785
  CURRENT_VERTEX_EXT = 34786
  MVP_MATRIX_EXT = 34787
  VARIANT_VALUE_EXT = 34788
  VARIANT_DATATYPE_EXT = 34789
  VARIANT_ARRAY_STRIDE_EXT = 34790
  VARIANT_ARRAY_TYPE_EXT = 34791
  VARIANT_ARRAY_EXT = 34792
  VARIANT_ARRAY_POINTER_EXT = 34793
  INVARIANT_VALUE_EXT = 34794
  INVARIANT_DATATYPE_EXT = 34795
  LOCAL_CONSTANT_VALUE_EXT = 34796
  LOCAL_CONSTANT_DATATYPE_EXT = 34797
  EXT_VERTEX_WEIGHTING = 1
  MODELVIEW0_STACK_DEPTH_EXT = 2979
  MODELVIEW1_STACK_DEPTH_EXT = 34050
  MODELVIEW0_MATRIX_EXT = 2982
  MODELVIEW1_MATRIX_EXT = 34054
  VERTEX_WEIGHTING_EXT = 34057
  MODELVIEW0_EXT = 5888
  MODELVIEW1_EXT = 34058
  CURRENT_VERTEX_WEIGHT_EXT = 34059
  VERTEX_WEIGHT_ARRAY_EXT = 34060
  VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061
  VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062
  VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063
  VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064
  EXT_WIN32_KEYED_MUTEX = 1
  EXT_X11_SYNC_OBJECT = 1
  SYNC_X11_FENCE_EXT = 37089
  GREMEDY_FRAME_TERMINATOR = 1
  GREMEDY_STRING_MARKER = 1
  HP_CONVOLUTION_BORDER_MODES = 1
  IGNORE_BORDER_HP = 33104
  CONSTANT_BORDER_HP = 33105
  REPLICATE_BORDER_HP = 33107
  CONVOLUTION_BORDER_COLOR_HP = 33108
  HP_IMAGE_TRANSFORM = 1
  IMAGE_SCALE_X_HP = 33109
  IMAGE_SCALE_Y_HP = 33110
  IMAGE_TRANSLATE_X_HP = 33111
  IMAGE_TRANSLATE_Y_HP = 33112
  IMAGE_ROTATE_ANGLE_HP = 33113
  IMAGE_ROTATE_ORIGIN_X_HP = 33114
  IMAGE_ROTATE_ORIGIN_Y_HP = 33115
  IMAGE_MAG_FILTER_HP = 33116
  IMAGE_MIN_FILTER_HP = 33117
  IMAGE_CUBIC_WEIGHT_HP = 33118
  CUBIC_HP = 33119
  AVERAGE_HP = 33120
  IMAGE_TRANSFORM_2D_HP = 33121
  POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122
  PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123
  HP_OCCLUSION_TEST = 1
  OCCLUSION_TEST_HP = 33125
  OCCLUSION_TEST_RESULT_HP = 33126
  HP_TEXTURE_LIGHTING = 1
  TEXTURE_LIGHTING_MODE_HP = 33127
  TEXTURE_POST_SPECULAR_HP = 33128
  TEXTURE_PRE_SPECULAR_HP = 33129
  IBM_CULL_VERTEX = 1
  CULL_VERTEX_IBM = 103050
  IBM_MULTIMODE_DRAW_ARRAYS = 1
  IBM_RASTERPOS_CLIP = 1
  RASTER_POSITION_UNCLIPPED_IBM = 103010
  IBM_STATIC_DATA = 1
  ALL_STATIC_DATA_IBM = 103060
  STATIC_VERTEX_ARRAY_IBM = 103061
  IBM_TEXTURE_MIRRORED_REPEAT = 1
  MIRRORED_REPEAT_IBM = 33648
  IBM_VERTEX_ARRAY_LISTS = 1
  VERTEX_ARRAY_LIST_IBM = 103070
  NORMAL_ARRAY_LIST_IBM = 103071
  COLOR_ARRAY_LIST_IBM = 103072
  INDEX_ARRAY_LIST_IBM = 103073
  TEXTURE_COORD_ARRAY_LIST_IBM = 103074
  EDGE_FLAG_ARRAY_LIST_IBM = 103075
  FOG_COORDINATE_ARRAY_LIST_IBM = 103076
  SECONDARY_COLOR_ARRAY_LIST_IBM = 103077
  VERTEX_ARRAY_LIST_STRIDE_IBM = 103080
  NORMAL_ARRAY_LIST_STRIDE_IBM = 103081
  COLOR_ARRAY_LIST_STRIDE_IBM = 103082
  INDEX_ARRAY_LIST_STRIDE_IBM = 103083
  TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084
  EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085
  FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086
  SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087
  INGR_BLEND_FUNC_SEPARATE = 1
  INGR_COLOR_CLAMP = 1
  RED_MIN_CLAMP_INGR = 34144
  GREEN_MIN_CLAMP_INGR = 34145
  BLUE_MIN_CLAMP_INGR = 34146
  ALPHA_MIN_CLAMP_INGR = 34147
  RED_MAX_CLAMP_INGR = 34148
  GREEN_MAX_CLAMP_INGR = 34149
  BLUE_MAX_CLAMP_INGR = 34150
  ALPHA_MAX_CLAMP_INGR = 34151
  INGR_INTERLACE_READ = 1
  INTERLACE_READ_INGR = 34152
  INTEL_FRAGMENT_SHADER_ORDERING = 1
  INTEL_MAP_TEXTURE = 1
  TEXTURE_MEMORY_LAYOUT_INTEL = 33791
  LAYOUT_DEFAULT_INTEL = 0
  LAYOUT_LINEAR_INTEL = 1
  LAYOUT_LINEAR_CPU_CACHED_INTEL = 2
  INTEL_PARALLEL_ARRAYS = 1
  PARALLEL_ARRAYS_INTEL = 33780
  VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781
  NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782
  COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783
  TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784
  MESAX_TEXTURE_STACK = 1
  TEXTURE_1D_STACK_MESAX = 34649
  TEXTURE_2D_STACK_MESAX = 34650
  PROXY_TEXTURE_1D_STACK_MESAX = 34651
  PROXY_TEXTURE_2D_STACK_MESAX = 34652
  TEXTURE_1D_STACK_BINDING_MESAX = 34653
  TEXTURE_2D_STACK_BINDING_MESAX = 34654
  MESA_PACK_INVERT = 1
  PACK_INVERT_MESA = 34648
  MESA_RESIZE_BUFFERS = 1
  MESA_SHADER_INTEGER_FUNCTIONS = 1
  MESA_TILE_RASTER_ORDER = 1
  TILE_RASTER_ORDER_FIXED_MESA = 35768
  TILE_RASTER_ORDER_INCREASING_X_MESA = 35769
  TILE_RASTER_ORDER_INCREASING_Y_MESA = 35770
  MESA_WINDOW_POS = 1
  MESA_YCBCR_TEXTURE = 1
  UNSIGNED_SHORT_8_8_MESA = 34234
  UNSIGNED_SHORT_8_8_REV_MESA = 34235
  YCBCR_MESA = 34647
  NVX_BLEND_EQUATION_ADVANCED_MULTI_DRAW_BUFFERS = 1
  NVX_CONDITIONAL_RENDER = 1
  NVX_GPU_MEMORY_INFO = 1
  GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 36935
  GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 36936
  GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 36937
  GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 36938
  GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 36939
  NVX_LINKED_GPU_MULTICAST = 1
  LGPU_SEPARATE_STORAGE_BIT_NVX = 2048
  MAX_LGPU_GPUS_NVX = 37562
  NV_ALPHA_TO_COVERAGE_DITHER_CONTROL = 1
  ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 37709
  ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 37710
  ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 37711
  ALPHA_TO_COVERAGE_DITHER_MODE_NV = 37567
  NV_BLEND_SQUARE = 1
  NV_COMPUTE_PROGRAM5 = 1
  COMPUTE_PROGRAM_NV = 37115
  COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 37116
  NV_COPY_DEPTH_TO_COLOR = 1
  DEPTH_STENCIL_TO_RGBA_NV = 34926
  DEPTH_STENCIL_TO_BGRA_NV = 34927
  NV_COPY_IMAGE = 1
  NV_DEEP_TEXTURE3D = 1
  MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 37072
  MAX_DEEP_3D_TEXTURE_DEPTH_NV = 37073
  NV_DEPTH_BUFFER_FLOAT = 1
  DEPTH_COMPONENT32F_NV = 36267
  DEPTH32F_STENCIL8_NV = 36268
  FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 36269
  DEPTH_BUFFER_FLOAT_MODE_NV = 36271
  NV_DEPTH_CLAMP = 1
  DEPTH_CLAMP_NV = 34383
  NV_DRAW_TEXTURE = 1
  NV_EVALUATORS = 1
  EVAL_2D_NV = 34496
  EVAL_TRIANGULAR_2D_NV = 34497
  MAP_TESSELLATION_NV = 34498
  MAP_ATTRIB_U_ORDER_NV = 34499
  MAP_ATTRIB_V_ORDER_NV = 34500
  EVAL_FRACTIONAL_TESSELLATION_NV = 34501
  EVAL_VERTEX_ATTRIB0_NV = 34502
  EVAL_VERTEX_ATTRIB1_NV = 34503
  EVAL_VERTEX_ATTRIB2_NV = 34504
  EVAL_VERTEX_ATTRIB3_NV = 34505
  EVAL_VERTEX_ATTRIB4_NV = 34506
  EVAL_VERTEX_ATTRIB5_NV = 34507
  EVAL_VERTEX_ATTRIB6_NV = 34508
  EVAL_VERTEX_ATTRIB7_NV = 34509
  EVAL_VERTEX_ATTRIB8_NV = 34510
  EVAL_VERTEX_ATTRIB9_NV = 34511
  EVAL_VERTEX_ATTRIB10_NV = 34512
  EVAL_VERTEX_ATTRIB11_NV = 34513
  EVAL_VERTEX_ATTRIB12_NV = 34514
  EVAL_VERTEX_ATTRIB13_NV = 34515
  EVAL_VERTEX_ATTRIB14_NV = 34516
  EVAL_VERTEX_ATTRIB15_NV = 34517
  MAX_MAP_TESSELLATION_NV = 34518
  MAX_RATIONAL_EVAL_ORDER_NV = 34519
  NV_EXPLICIT_MULTISAMPLE = 1
  SAMPLE_POSITION_NV = 36432
  SAMPLE_MASK_NV = 36433
  SAMPLE_MASK_VALUE_NV = 36434
  TEXTURE_BINDING_RENDERBUFFER_NV = 36435
  TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 36436
  TEXTURE_RENDERBUFFER_NV = 36437
  SAMPLER_RENDERBUFFER_NV = 36438
  INT_SAMPLER_RENDERBUFFER_NV = 36439
  UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 36440
  MAX_SAMPLE_MASK_WORDS_NV = 36441
  NV_FENCE = 1
  ALL_COMPLETED_NV = 34034
  FENCE_STATUS_NV = 34035
  FENCE_CONDITION_NV = 34036
  NV_FLOAT_BUFFER = 1
  FLOAT_R_NV = 34944
  FLOAT_RG_NV = 34945
  FLOAT_RGB_NV = 34946
  FLOAT_RGBA_NV = 34947
  FLOAT_R16_NV = 34948
  FLOAT_R32_NV = 34949
  FLOAT_RG16_NV = 34950
  FLOAT_RG32_NV = 34951
  FLOAT_RGB16_NV = 34952
  FLOAT_RGB32_NV = 34953
  FLOAT_RGBA16_NV = 34954
  FLOAT_RGBA32_NV = 34955
  TEXTURE_FLOAT_COMPONENTS_NV = 34956
  FLOAT_CLEAR_COLOR_VALUE_NV = 34957
  FLOAT_RGBA_MODE_NV = 34958
  NV_FOG_DISTANCE = 1
  FOG_DISTANCE_MODE_NV = 34138
  EYE_RADIAL_NV = 34139
  EYE_PLANE_ABSOLUTE_NV = 34140
  NV_FRAGMENT_PROGRAM = 1
  MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 34920
  FRAGMENT_PROGRAM_NV = 34928
  MAX_TEXTURE_COORDS_NV = 34929
  MAX_TEXTURE_IMAGE_UNITS_NV = 34930
  FRAGMENT_PROGRAM_BINDING_NV = 34931
  PROGRAM_ERROR_STRING_NV = 34932
  NV_FRAGMENT_PROGRAM2 = 1
  MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060
  MAX_PROGRAM_CALL_DEPTH_NV = 35061
  MAX_PROGRAM_IF_DEPTH_NV = 35062
  MAX_PROGRAM_LOOP_DEPTH_NV = 35063
  MAX_PROGRAM_LOOP_COUNT_NV = 35064
  NV_FRAGMENT_PROGRAM4 = 1
  NV_FRAGMENT_PROGRAM_OPTION = 1
  NV_GEOMETRY_PROGRAM4 = 1
  GEOMETRY_PROGRAM_NV = 35878
  MAX_PROGRAM_OUTPUT_VERTICES_NV = 35879
  MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 35880
  NV_GEOMETRY_SHADER4 = 1
  NV_GPU_MULTICAST = 1
  PER_GPU_STORAGE_BIT_NV = 2048
  MULTICAST_GPUS_NV = 37562
  RENDER_GPU_MASK_NV = 38232
  PER_GPU_STORAGE_NV = 38216
  MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 38217
  NV_GPU_PROGRAM4 = 1
  MIN_PROGRAM_TEXEL_OFFSET_NV = 35076
  MAX_PROGRAM_TEXEL_OFFSET_NV = 35077
  PROGRAM_ATTRIB_COMPONENTS_NV = 35078
  PROGRAM_RESULT_COMPONENTS_NV = 35079
  MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 35080
  MAX_PROGRAM_RESULT_COMPONENTS_NV = 35081
  MAX_PROGRAM_GENERIC_ATTRIBS_NV = 36261
  MAX_PROGRAM_GENERIC_RESULTS_NV = 36262
  NV_GPU_PROGRAM5 = 1
  MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 36442
  MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 36443
  MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 36444
  FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 36445
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36446
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36447
  MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 36676
  MAX_PROGRAM_SUBROUTINE_NUM_NV = 36677
  NV_GPU_PROGRAM5_MEM_EXTENDED = 1
  NV_HALF_FLOAT = 1
  HALF_FLOAT_NV = 5131
  NV_LIGHT_MAX_EXPONENT = 1
  MAX_SHININESS_NV = 34052
  MAX_SPOT_EXPONENT_NV = 34053
  NV_MULTISAMPLE_COVERAGE = 1
  NV_MULTISAMPLE_FILTER_HINT = 1
  MULTISAMPLE_FILTER_HINT_NV = 34100
  NV_OCCLUSION_QUERY = 1
  PIXEL_COUNTER_BITS_NV = 34916
  CURRENT_OCCLUSION_QUERY_ID_NV = 34917
  PIXEL_COUNT_NV = 34918
  PIXEL_COUNT_AVAILABLE_NV = 34919
  NV_PACKED_DEPTH_STENCIL = 1
  DEPTH_STENCIL_NV = 34041
  UNSIGNED_INT_24_8_NV = 34042
  NV_PARAMETER_BUFFER_OBJECT = 1
  MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 36256
  MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 36257
  VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 36258
  GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 36259
  FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 36260
  NV_PARAMETER_BUFFER_OBJECT2 = 1
  NV_PIXEL_DATA_RANGE = 1
  WRITE_PIXEL_DATA_RANGE_NV = 34936
  READ_PIXEL_DATA_RANGE_NV = 34937
  WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938
  READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939
  WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940
  READ_PIXEL_DATA_RANGE_POINTER_NV = 34941
  NV_POINT_SPRITE = 1
  POINT_SPRITE_NV = 34913
  COORD_REPLACE_NV = 34914
  POINT_SPRITE_R_MODE_NV = 34915
  NV_PRESENT_VIDEO = 1
  FRAME_NV = 36390
  FIELDS_NV = 36391
  CURRENT_TIME_NV = 36392
  NUM_FILL_STREAMS_NV = 36393
  PRESENT_TIME_NV = 36394
  PRESENT_DURATION_NV = 36395
  NV_PRIMITIVE_RESTART = 1
  PRIMITIVE_RESTART_NV = 34136
  PRIMITIVE_RESTART_INDEX_NV = 34137
  NV_QUERY_RESOURCE = 1
  QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 38208
  QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 38210
  QUERY_RESOURCE_SYS_RESERVED_NV = 38212
  QUERY_RESOURCE_TEXTURE_NV = 38213
  QUERY_RESOURCE_RENDERBUFFER_NV = 38214
  QUERY_RESOURCE_BUFFEROBJECT_NV = 38215
  NV_QUERY_RESOURCE_TAG = 1
  NV_REGISTER_COMBINERS = 1
  REGISTER_COMBINERS_NV = 34082
  VARIABLE_A_NV = 34083
  VARIABLE_B_NV = 34084
  VARIABLE_C_NV = 34085
  VARIABLE_D_NV = 34086
  VARIABLE_E_NV = 34087
  VARIABLE_F_NV = 34088
  VARIABLE_G_NV = 34089
  CONSTANT_COLOR0_NV = 34090
  CONSTANT_COLOR1_NV = 34091
  SPARE0_NV = 34094
  SPARE1_NV = 34095
  DISCARD_NV = 34096
  E_TIMES_F_NV = 34097
  SPARE0_PLUS_SECONDARY_COLOR_NV = 34098
  UNSIGNED_IDENTITY_NV = 34102
  UNSIGNED_INVERT_NV = 34103
  EXPAND_NORMAL_NV = 34104
  EXPAND_NEGATE_NV = 34105
  HALF_BIAS_NORMAL_NV = 34106
  HALF_BIAS_NEGATE_NV = 34107
  SIGNED_IDENTITY_NV = 34108
  SIGNED_NEGATE_NV = 34109
  SCALE_BY_TWO_NV = 34110
  SCALE_BY_FOUR_NV = 34111
  SCALE_BY_ONE_HALF_NV = 34112
  BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113
  COMBINER_INPUT_NV = 34114
  COMBINER_MAPPING_NV = 34115
  COMBINER_COMPONENT_USAGE_NV = 34116
  COMBINER_AB_DOT_PRODUCT_NV = 34117
  COMBINER_CD_DOT_PRODUCT_NV = 34118
  COMBINER_MUX_SUM_NV = 34119
  COMBINER_SCALE_NV = 34120
  COMBINER_BIAS_NV = 34121
  COMBINER_AB_OUTPUT_NV = 34122
  COMBINER_CD_OUTPUT_NV = 34123
  COMBINER_SUM_OUTPUT_NV = 34124
  MAX_GENERAL_COMBINERS_NV = 34125
  NUM_GENERAL_COMBINERS_NV = 34126
  COLOR_SUM_CLAMP_NV = 34127
  COMBINER0_NV = 34128
  COMBINER1_NV = 34129
  COMBINER2_NV = 34130
  COMBINER3_NV = 34131
  COMBINER4_NV = 34132
  COMBINER5_NV = 34133
  COMBINER6_NV = 34134
  COMBINER7_NV = 34135
  NV_REGISTER_COMBINERS2 = 1
  PER_STAGE_CONSTANTS_NV = 34101
  NV_ROBUSTNESS_VIDEO_MEMORY_PURGE = 1
  PURGED_CONTEXT_RESET_NV = 37563
  NV_SHADER_STORAGE_BUFFER_OBJECT = 1
  NV_TESSELLATION_PROGRAM5 = 1
  MAX_PROGRAM_PATCH_ATTRIBS_NV = 34520
  TESS_CONTROL_PROGRAM_NV = 35102
  TESS_EVALUATION_PROGRAM_NV = 35103
  TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 35956
  TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 35957
  NV_TEXGEN_EMBOSS = 1
  EMBOSS_LIGHT_NV = 34141
  EMBOSS_CONSTANT_NV = 34142
  EMBOSS_MAP_NV = 34143
  NV_TEXGEN_REFLECTION = 1
  NORMAL_MAP_NV = 34065
  REFLECTION_MAP_NV = 34066
  NV_TEXTURE_COMPRESSION_VTC = 1
  NV_TEXTURE_ENV_COMBINE4 = 1
  COMBINE4_NV = 34051
  SOURCE3_RGB_NV = 34179
  SOURCE3_ALPHA_NV = 34187
  OPERAND3_RGB_NV = 34195
  OPERAND3_ALPHA_NV = 34203
  NV_TEXTURE_EXPAND_NORMAL = 1
  TEXTURE_UNSIGNED_REMAP_MODE_NV = 34959
  NV_TEXTURE_MULTISAMPLE = 1
  TEXTURE_COVERAGE_SAMPLES_NV = 36933
  TEXTURE_COLOR_SAMPLES_NV = 36934
  NV_TEXTURE_RECTANGLE = 1
  TEXTURE_RECTANGLE_NV = 34037
  TEXTURE_BINDING_RECTANGLE_NV = 34038
  PROXY_TEXTURE_RECTANGLE_NV = 34039
  MAX_RECTANGLE_TEXTURE_SIZE_NV = 34040
  NV_TEXTURE_SHADER = 1
  OFFSET_TEXTURE_RECTANGLE_NV = 34380
  OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 34381
  DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 34382
  RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 34521
  UNSIGNED_INT_S8_S8_8_8_NV = 34522
  UNSIGNED_INT_8_8_S8_S8_REV_NV = 34523
  DSDT_MAG_INTENSITY_NV = 34524
  SHADER_CONSISTENT_NV = 34525
  TEXTURE_SHADER_NV = 34526
  SHADER_OPERATION_NV = 34527
  CULL_MODES_NV = 34528
  OFFSET_TEXTURE_MATRIX_NV = 34529
  OFFSET_TEXTURE_SCALE_NV = 34530
  OFFSET_TEXTURE_BIAS_NV = 34531
  OFFSET_TEXTURE_2D_MATRIX_NV = 34529
  OFFSET_TEXTURE_2D_SCALE_NV = 34530
  OFFSET_TEXTURE_2D_BIAS_NV = 34531
  PREVIOUS_TEXTURE_INPUT_NV = 34532
  CONST_EYE_NV = 34533
  PASS_THROUGH_NV = 34534
  CULL_FRAGMENT_NV = 34535
  OFFSET_TEXTURE_2D_NV = 34536
  DEPENDENT_AR_TEXTURE_2D_NV = 34537
  DEPENDENT_GB_TEXTURE_2D_NV = 34538
  DOT_PRODUCT_NV = 34540
  DOT_PRODUCT_DEPTH_REPLACE_NV = 34541
  DOT_PRODUCT_TEXTURE_2D_NV = 34542
  DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 34544
  DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 34545
  DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 34546
  DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 34547
  HILO_NV = 34548
  DSDT_NV = 34549
  DSDT_MAG_NV = 34550
  DSDT_MAG_VIB_NV = 34551
  HILO16_NV = 34552
  SIGNED_HILO_NV = 34553
  SIGNED_HILO16_NV = 34554
  SIGNED_RGBA_NV = 34555
  SIGNED_RGBA8_NV = 34556
  SIGNED_RGB_NV = 34558
  SIGNED_RGB8_NV = 34559
  SIGNED_LUMINANCE_NV = 34561
  SIGNED_LUMINANCE8_NV = 34562
  SIGNED_LUMINANCE_ALPHA_NV = 34563
  SIGNED_LUMINANCE8_ALPHA8_NV = 34564
  SIGNED_ALPHA_NV = 34565
  SIGNED_ALPHA8_NV = 34566
  SIGNED_INTENSITY_NV = 34567
  SIGNED_INTENSITY8_NV = 34568
  DSDT8_NV = 34569
  DSDT8_MAG8_NV = 34570
  DSDT8_MAG8_INTENSITY8_NV = 34571
  SIGNED_RGB_UNSIGNED_ALPHA_NV = 34572
  SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 34573
  HI_SCALE_NV = 34574
  LO_SCALE_NV = 34575
  DS_SCALE_NV = 34576
  DT_SCALE_NV = 34577
  MAGNITUDE_SCALE_NV = 34578
  VIBRANCE_SCALE_NV = 34579
  HI_BIAS_NV = 34580
  LO_BIAS_NV = 34581
  DS_BIAS_NV = 34582
  DT_BIAS_NV = 34583
  MAGNITUDE_BIAS_NV = 34584
  VIBRANCE_BIAS_NV = 34585
  TEXTURE_BORDER_VALUES_NV = 34586
  TEXTURE_HI_SIZE_NV = 34587
  TEXTURE_LO_SIZE_NV = 34588
  TEXTURE_DS_SIZE_NV = 34589
  TEXTURE_DT_SIZE_NV = 34590
  TEXTURE_MAG_SIZE_NV = 34591
  NV_TEXTURE_SHADER2 = 1
  DOT_PRODUCT_TEXTURE_3D_NV = 34543
  NV_TEXTURE_SHADER3 = 1
  OFFSET_PROJECTIVE_TEXTURE_2D_NV = 34896
  OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 34897
  OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34898
  OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 34899
  OFFSET_HILO_TEXTURE_2D_NV = 34900
  OFFSET_HILO_TEXTURE_RECTANGLE_NV = 34901
  OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 34902
  OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34903
  DEPENDENT_HILO_TEXTURE_2D_NV = 34904
  DEPENDENT_RGB_TEXTURE_3D_NV = 34905
  DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 34906
  DOT_PRODUCT_PASS_THROUGH_NV = 34907
  DOT_PRODUCT_TEXTURE_1D_NV = 34908
  DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 34909
  HILO8_NV = 34910
  SIGNED_HILO8_NV = 34911
  FORCE_BLUE_TO_ONE_NV = 34912
  NV_TRANSFORM_FEEDBACK = 1
  BACK_PRIMARY_COLOR_NV = 35959
  BACK_SECONDARY_COLOR_NV = 35960
  TEXTURE_COORD_NV = 35961
  CLIP_DISTANCE_NV = 35962
  VERTEX_ID_NV = 35963
  PRIMITIVE_ID_NV = 35964
  GENERIC_ATTRIB_NV = 35965
  TRANSFORM_FEEDBACK_ATTRIBS_NV = 35966
  TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 35967
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 35968
  ACTIVE_VARYINGS_NV = 35969
  ACTIVE_VARYING_MAX_LENGTH_NV = 35970
  TRANSFORM_FEEDBACK_VARYINGS_NV = 35971
  TRANSFORM_FEEDBACK_BUFFER_START_NV = 35972
  TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 35973
  TRANSFORM_FEEDBACK_RECORD_NV = 35974
  PRIMITIVES_GENERATED_NV = 35975
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 35976
  RASTERIZER_DISCARD_NV = 35977
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 35978
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 35979
  INTERLEAVED_ATTRIBS_NV = 35980
  SEPARATE_ATTRIBS_NV = 35981
  TRANSFORM_FEEDBACK_BUFFER_NV = 35982
  TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 35983
  LAYER_NV = 36266
  NEXT_BUFFER_NV = -2
  SKIP_COMPONENTS4_NV = -3
  SKIP_COMPONENTS3_NV = -4
  SKIP_COMPONENTS2_NV = -5
  SKIP_COMPONENTS1_NV = -6
  NV_TRANSFORM_FEEDBACK2 = 1
  TRANSFORM_FEEDBACK_NV = 36386
  TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 36387
  TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 36388
  TRANSFORM_FEEDBACK_BINDING_NV = 36389
  NV_VDPAU_INTEROP = 1
  SURFACE_STATE_NV = 34539
  SURFACE_REGISTERED_NV = 34557
  SURFACE_MAPPED_NV = 34560
  WRITE_DISCARD_NV = 35006
  NV_VERTEX_ARRAY_RANGE = 1
  VERTEX_ARRAY_RANGE_NV = 34077
  VERTEX_ARRAY_RANGE_LENGTH_NV = 34078
  VERTEX_ARRAY_RANGE_VALID_NV = 34079
  MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 34080
  VERTEX_ARRAY_RANGE_POINTER_NV = 34081
  NV_VERTEX_ARRAY_RANGE2 = 1
  VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 34099
  NV_VERTEX_PROGRAM = 1
  VERTEX_PROGRAM_NV = 34336
  VERTEX_STATE_PROGRAM_NV = 34337
  ATTRIB_ARRAY_SIZE_NV = 34339
  ATTRIB_ARRAY_STRIDE_NV = 34340
  ATTRIB_ARRAY_TYPE_NV = 34341
  CURRENT_ATTRIB_NV = 34342
  PROGRAM_LENGTH_NV = 34343
  PROGRAM_STRING_NV = 34344
  MODELVIEW_PROJECTION_NV = 34345
  IDENTITY_NV = 34346
  INVERSE_NV = 34347
  TRANSPOSE_NV = 34348
  INVERSE_TRANSPOSE_NV = 34349
  MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350
  MAX_TRACK_MATRICES_NV = 34351
  MATRIX0_NV = 34352
  MATRIX1_NV = 34353
  MATRIX2_NV = 34354
  MATRIX3_NV = 34355
  MATRIX4_NV = 34356
  MATRIX5_NV = 34357
  MATRIX6_NV = 34358
  MATRIX7_NV = 34359
  CURRENT_MATRIX_STACK_DEPTH_NV = 34368
  CURRENT_MATRIX_NV = 34369
  VERTEX_PROGRAM_POINT_SIZE_NV = 34370
  VERTEX_PROGRAM_TWO_SIDE_NV = 34371
  PROGRAM_PARAMETER_NV = 34372
  ATTRIB_ARRAY_POINTER_NV = 34373
  PROGRAM_TARGET_NV = 34374
  PROGRAM_RESIDENT_NV = 34375
  TRACK_MATRIX_NV = 34376
  TRACK_MATRIX_TRANSFORM_NV = 34377
  VERTEX_PROGRAM_BINDING_NV = 34378
  PROGRAM_ERROR_POSITION_NV = 34379
  VERTEX_ATTRIB_ARRAY0_NV = 34384
  VERTEX_ATTRIB_ARRAY1_NV = 34385
  VERTEX_ATTRIB_ARRAY2_NV = 34386
  VERTEX_ATTRIB_ARRAY3_NV = 34387
  VERTEX_ATTRIB_ARRAY4_NV = 34388
  VERTEX_ATTRIB_ARRAY5_NV = 34389
  VERTEX_ATTRIB_ARRAY6_NV = 34390
  VERTEX_ATTRIB_ARRAY7_NV = 34391
  VERTEX_ATTRIB_ARRAY8_NV = 34392
  VERTEX_ATTRIB_ARRAY9_NV = 34393
  VERTEX_ATTRIB_ARRAY10_NV = 34394
  VERTEX_ATTRIB_ARRAY11_NV = 34395
  VERTEX_ATTRIB_ARRAY12_NV = 34396
  VERTEX_ATTRIB_ARRAY13_NV = 34397
  VERTEX_ATTRIB_ARRAY14_NV = 34398
  VERTEX_ATTRIB_ARRAY15_NV = 34399
  MAP1_VERTEX_ATTRIB0_4_NV = 34400
  MAP1_VERTEX_ATTRIB1_4_NV = 34401
  MAP1_VERTEX_ATTRIB2_4_NV = 34402
  MAP1_VERTEX_ATTRIB3_4_NV = 34403
  MAP1_VERTEX_ATTRIB4_4_NV = 34404
  MAP1_VERTEX_ATTRIB5_4_NV = 34405
  MAP1_VERTEX_ATTRIB6_4_NV = 34406
  MAP1_VERTEX_ATTRIB7_4_NV = 34407
  MAP1_VERTEX_ATTRIB8_4_NV = 34408
  MAP1_VERTEX_ATTRIB9_4_NV = 34409
  MAP1_VERTEX_ATTRIB10_4_NV = 34410
  MAP1_VERTEX_ATTRIB11_4_NV = 34411
  MAP1_VERTEX_ATTRIB12_4_NV = 34412
  MAP1_VERTEX_ATTRIB13_4_NV = 34413
  MAP1_VERTEX_ATTRIB14_4_NV = 34414
  MAP1_VERTEX_ATTRIB15_4_NV = 34415
  MAP2_VERTEX_ATTRIB0_4_NV = 34416
  MAP2_VERTEX_ATTRIB1_4_NV = 34417
  MAP2_VERTEX_ATTRIB2_4_NV = 34418
  MAP2_VERTEX_ATTRIB3_4_NV = 34419
  MAP2_VERTEX_ATTRIB4_4_NV = 34420
  MAP2_VERTEX_ATTRIB5_4_NV = 34421
  MAP2_VERTEX_ATTRIB6_4_NV = 34422
  MAP2_VERTEX_ATTRIB7_4_NV = 34423
  MAP2_VERTEX_ATTRIB8_4_NV = 34424
  MAP2_VERTEX_ATTRIB9_4_NV = 34425
  MAP2_VERTEX_ATTRIB10_4_NV = 34426
  MAP2_VERTEX_ATTRIB11_4_NV = 34427
  MAP2_VERTEX_ATTRIB12_4_NV = 34428
  MAP2_VERTEX_ATTRIB13_4_NV = 34429
  MAP2_VERTEX_ATTRIB14_4_NV = 34430
  MAP2_VERTEX_ATTRIB15_4_NV = 34431
  NV_VERTEX_PROGRAM1_1 = 1
  NV_VERTEX_PROGRAM2 = 1
  NV_VERTEX_PROGRAM2_OPTION = 1
  NV_VERTEX_PROGRAM3 = 1
  NV_VERTEX_PROGRAM4 = 1
  VERTEX_ATTRIB_ARRAY_INTEGER_NV = 35069
  NV_VIDEO_CAPTURE = 1
  VIDEO_BUFFER_NV = 36896
  VIDEO_BUFFER_BINDING_NV = 36897
  FIELD_UPPER_NV = 36898
  FIELD_LOWER_NV = 36899
  NUM_VIDEO_CAPTURE_STREAMS_NV = 36900
  NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 36901
  VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 36902
  LAST_VIDEO_CAPTURE_STATUS_NV = 36903
  VIDEO_BUFFER_PITCH_NV = 36904
  VIDEO_COLOR_CONVERSION_MATRIX_NV = 36905
  VIDEO_COLOR_CONVERSION_MAX_NV = 36906
  VIDEO_COLOR_CONVERSION_MIN_NV = 36907
  VIDEO_COLOR_CONVERSION_OFFSET_NV = 36908
  VIDEO_BUFFER_INTERNAL_FORMAT_NV = 36909
  PARTIAL_SUCCESS_NV = 36910
  SUCCESS_NV = 36911
  FAILURE_NV = 36912
  YCBYCR8_422_NV = 36913
  YCBAYCR8A_4224_NV = 36914
  Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 36915
  Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 36916
  Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 36917
  Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 36918
  Z4Y12Z4CB12Z4CR12_444_NV = 36919
  VIDEO_CAPTURE_FRAME_WIDTH_NV = 36920
  VIDEO_CAPTURE_FRAME_HEIGHT_NV = 36921
  VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 36922
  VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 36923
  VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 36924
  OML_INTERLACE = 1
  INTERLACE_OML = 35200
  INTERLACE_READ_OML = 35201
  OML_RESAMPLE = 1
  PACK_RESAMPLE_OML = 35204
  UNPACK_RESAMPLE_OML = 35205
  RESAMPLE_REPLICATE_OML = 35206
  RESAMPLE_ZERO_FILL_OML = 35207
  RESAMPLE_AVERAGE_OML = 35208
  RESAMPLE_DECIMATE_OML = 35209
  OML_SUBSAMPLE = 1
  FORMAT_SUBSAMPLE_24_24_OML = 35202
  FORMAT_SUBSAMPLE_244_244_OML = 35203
  PGI_MISC_HINTS = 1
  PREFER_DOUBLEBUFFER_HINT_PGI = 107000
  CONSERVE_MEMORY_HINT_PGI = 107005
  RECLAIM_MEMORY_HINT_PGI = 107006
  NATIVE_GRAPHICS_HANDLE_PGI = 107010
  NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011
  NATIVE_GRAPHICS_END_HINT_PGI = 107012
  ALWAYS_FAST_HINT_PGI = 107020
  ALWAYS_SOFT_HINT_PGI = 107021
  ALLOW_DRAW_OBJ_HINT_PGI = 107022
  ALLOW_DRAW_WIN_HINT_PGI = 107023
  ALLOW_DRAW_FRG_HINT_PGI = 107024
  ALLOW_DRAW_MEM_HINT_PGI = 107025
  STRICT_DEPTHFUNC_HINT_PGI = 107030
  STRICT_LIGHTING_HINT_PGI = 107031
  STRICT_SCISSOR_HINT_PGI = 107032
  FULL_STIPPLE_HINT_PGI = 107033
  CLIP_NEAR_HINT_PGI = 107040
  CLIP_FAR_HINT_PGI = 107041
  WIDE_LINE_HINT_PGI = 107042
  BACK_NORMALS_HINT_PGI = 107043
  PGI_VERTEX_HINTS = 1
  VERTEX_DATA_HINT_PGI = 107050
  VERTEX_CONSISTENT_HINT_PGI = 107051
  MATERIAL_SIDE_HINT_PGI = 107052
  MAX_VERTEX_HINT_PGI = 107053
  COLOR3_BIT_PGI = 65536
  COLOR4_BIT_PGI = 131072
  EDGEFLAG_BIT_PGI = 262144
  INDEX_BIT_PGI = 524288
  MAT_AMBIENT_BIT_PGI = 1048576
  MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152
  MAT_DIFFUSE_BIT_PGI = 4194304
  MAT_EMISSION_BIT_PGI = 8388608
  MAT_COLOR_INDEXES_BIT_PGI = 16777216
  MAT_SHININESS_BIT_PGI = 33554432
  MAT_SPECULAR_BIT_PGI = 67108864
  NORMAL_BIT_PGI = 134217728
  TEXCOORD1_BIT_PGI = 268435456
  TEXCOORD2_BIT_PGI = 536870912
  TEXCOORD3_BIT_PGI = 1073741824
  TEXCOORD4_BIT_PGI = 2147483648_i64
  VERTEX23_BIT_PGI = 4
  VERTEX4_BIT_PGI = 8
  REND_SCREEN_COORDINATES = 1
  SCREEN_COORDINATES_REND = 33936
  INVERTED_SCREEN_W_REND = 33937
  S3_S3TC = 1
  RGB_S3TC = 33696
  RGB4_S3TC = 33697
  RGBA_S3TC = 33698
  RGBA4_S3TC = 33699
  RGBA_DXT5_S3TC = 33700
  RGBA4_DXT5_S3TC = 33701
  SGIS_DETAIL_TEXTURE = 1
  DETAIL_TEXTURE_2D_SGIS = 32917
  DETAIL_TEXTURE_2D_BINDING_SGIS = 32918
  LINEAR_DETAIL_SGIS = 32919
  LINEAR_DETAIL_ALPHA_SGIS = 32920
  LINEAR_DETAIL_COLOR_SGIS = 32921
  DETAIL_TEXTURE_LEVEL_SGIS = 32922
  DETAIL_TEXTURE_MODE_SGIS = 32923
  DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924
  SGIS_FOG_FUNCTION = 1
  FOG_FUNC_SGIS = 33066
  FOG_FUNC_POINTS_SGIS = 33067
  MAX_FOG_FUNC_POINTS_SGIS = 33068
  SGIS_GENERATE_MIPMAP = 1
  GENERATE_MIPMAP_SGIS = 33169
  GENERATE_MIPMAP_HINT_SGIS = 33170
  SGIS_MULTISAMPLE = 1
  MULTISAMPLE_SGIS = 32925
  SAMPLE_ALPHA_TO_MASK_SGIS = 32926
  SAMPLE_ALPHA_TO_ONE_SGIS = 32927
  SAMPLE_MASK_SGIS = 32928
  SAMPLE_BUFFERS_SGIS = 32936
  SAMPLES_SGIS = 32937
  SAMPLE_MASK_VALUE_SGIS = 32938
  SAMPLE_MASK_INVERT_SGIS = 32939
  SAMPLE_PATTERN_SGIS = 32940
  SGIS_PIXEL_TEXTURE = 1
  PIXEL_TEXTURE_SGIS = 33619
  PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620
  PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621
  PIXEL_GROUP_COLOR_SGIS = 33622
  SGIS_POINT_LINE_TEXGEN = 1
  EYE_DISTANCE_TO_POINT_SGIS = 33264
  OBJECT_DISTANCE_TO_POINT_SGIS = 33265
  EYE_DISTANCE_TO_LINE_SGIS = 33266
  OBJECT_DISTANCE_TO_LINE_SGIS = 33267
  EYE_POINT_SGIS = 33268
  OBJECT_POINT_SGIS = 33269
  EYE_LINE_SGIS = 33270
  OBJECT_LINE_SGIS = 33271
  SGIS_POINT_PARAMETERS = 1
  POINT_SIZE_MIN_SGIS = 33062
  POINT_SIZE_MAX_SGIS = 33063
  POINT_FADE_THRESHOLD_SIZE_SGIS = 33064
  DISTANCE_ATTENUATION_SGIS = 33065
  SGIS_SHARPEN_TEXTURE = 1
  LINEAR_SHARPEN_SGIS = 32941
  LINEAR_SHARPEN_ALPHA_SGIS = 32942
  LINEAR_SHARPEN_COLOR_SGIS = 32943
  SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944
  SGIS_TEXTURE4D = 1
  PACK_SKIP_VOLUMES_SGIS = 33072
  PACK_IMAGE_DEPTH_SGIS = 33073
  UNPACK_SKIP_VOLUMES_SGIS = 33074
  UNPACK_IMAGE_DEPTH_SGIS = 33075
  TEXTURE_4D_SGIS = 33076
  PROXY_TEXTURE_4D_SGIS = 33077
  TEXTURE_4DSIZE_SGIS = 33078
  TEXTURE_WRAP_Q_SGIS = 33079
  MAX_4D_TEXTURE_SIZE_SGIS = 33080
  TEXTURE_4D_BINDING_SGIS = 33103
  SGIS_TEXTURE_BORDER_CLAMP = 1
  CLAMP_TO_BORDER_SGIS = 33069
  SGIS_TEXTURE_COLOR_MASK = 1
  TEXTURE_COLOR_WRITEMASK_SGIS = 33263
  SGIS_TEXTURE_EDGE_CLAMP = 1
  CLAMP_TO_EDGE_SGIS = 33071
  SGIS_TEXTURE_FILTER4 = 1
  FILTER4_SGIS = 33094
  TEXTURE_FILTER4_SIZE_SGIS = 33095
  SGIS_TEXTURE_LOD = 1
  TEXTURE_MIN_LOD_SGIS = 33082
  TEXTURE_MAX_LOD_SGIS = 33083
  TEXTURE_BASE_LEVEL_SGIS = 33084
  TEXTURE_MAX_LEVEL_SGIS = 33085
  SGIS_TEXTURE_SELECT = 1
  DUAL_ALPHA4_SGIS = 33040
  DUAL_ALPHA8_SGIS = 33041
  DUAL_ALPHA12_SGIS = 33042
  DUAL_ALPHA16_SGIS = 33043
  DUAL_LUMINANCE4_SGIS = 33044
  DUAL_LUMINANCE8_SGIS = 33045
  DUAL_LUMINANCE12_SGIS = 33046
  DUAL_LUMINANCE16_SGIS = 33047
  DUAL_INTENSITY4_SGIS = 33048
  DUAL_INTENSITY8_SGIS = 33049
  DUAL_INTENSITY12_SGIS = 33050
  DUAL_INTENSITY16_SGIS = 33051
  DUAL_LUMINANCE_ALPHA4_SGIS = 33052
  DUAL_LUMINANCE_ALPHA8_SGIS = 33053
  QUAD_ALPHA4_SGIS = 33054
  QUAD_ALPHA8_SGIS = 33055
  QUAD_LUMINANCE4_SGIS = 33056
  QUAD_LUMINANCE8_SGIS = 33057
  QUAD_INTENSITY4_SGIS = 33058
  QUAD_INTENSITY8_SGIS = 33059
  DUAL_TEXTURE_SELECT_SGIS = 33060
  QUAD_TEXTURE_SELECT_SGIS = 33061
  SGIX_ASYNC = 1
  ASYNC_MARKER_SGIX = 33577
  SGIX_ASYNC_HISTOGRAM = 1
  ASYNC_HISTOGRAM_SGIX = 33580
  MAX_ASYNC_HISTOGRAM_SGIX = 33581
  SGIX_ASYNC_PIXEL = 1
  ASYNC_TEX_IMAGE_SGIX = 33628
  ASYNC_DRAW_PIXELS_SGIX = 33629
  ASYNC_READ_PIXELS_SGIX = 33630
  MAX_ASYNC_TEX_IMAGE_SGIX = 33631
  MAX_ASYNC_DRAW_PIXELS_SGIX = 33632
  MAX_ASYNC_READ_PIXELS_SGIX = 33633
  SGIX_BLEND_ALPHA_MINMAX = 1
  ALPHA_MIN_SGIX = 33568
  ALPHA_MAX_SGIX = 33569
  SGIX_CALLIGRAPHIC_FRAGMENT = 1
  CALLIGRAPHIC_FRAGMENT_SGIX = 33155
  SGIX_CLIPMAP = 1
  LINEAR_CLIPMAP_LINEAR_SGIX = 33136
  TEXTURE_CLIPMAP_CENTER_SGIX = 33137
  TEXTURE_CLIPMAP_FRAME_SGIX = 33138
  TEXTURE_CLIPMAP_OFFSET_SGIX = 33139
  TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140
  TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141
  TEXTURE_CLIPMAP_DEPTH_SGIX = 33142
  MAX_CLIPMAP_DEPTH_SGIX = 33143
  MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144
  NEAREST_CLIPMAP_NEAREST_SGIX = 33869
  NEAREST_CLIPMAP_LINEAR_SGIX = 33870
  LINEAR_CLIPMAP_NEAREST_SGIX = 33871
  SGIX_CONVOLUTION_ACCURACY = 1
  CONVOLUTION_HINT_SGIX = 33558
  SGIX_DEPTH_PASS_INSTRUMENT = 1
  SGIX_DEPTH_TEXTURE = 1
  DEPTH_COMPONENT16_SGIX = 33189
  DEPTH_COMPONENT24_SGIX = 33190
  DEPTH_COMPONENT32_SGIX = 33191
  SGIX_FLUSH_RASTER = 1
  SGIX_FOG_OFFSET = 1
  FOG_OFFSET_SGIX = 33176
  FOG_OFFSET_VALUE_SGIX = 33177
  SGIX_FRAGMENT_LIGHTING = 1
  FRAGMENT_LIGHTING_SGIX = 33792
  FRAGMENT_COLOR_MATERIAL_SGIX = 33793
  FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794
  FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795
  MAX_FRAGMENT_LIGHTS_SGIX = 33796
  MAX_ACTIVE_LIGHTS_SGIX = 33797
  CURRENT_RASTER_NORMAL_SGIX = 33798
  LIGHT_ENV_MODE_SGIX = 33799
  FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800
  FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801
  FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802
  FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803
  FRAGMENT_LIGHT0_SGIX = 33804
  FRAGMENT_LIGHT1_SGIX = 33805
  FRAGMENT_LIGHT2_SGIX = 33806
  FRAGMENT_LIGHT3_SGIX = 33807
  FRAGMENT_LIGHT4_SGIX = 33808
  FRAGMENT_LIGHT5_SGIX = 33809
  FRAGMENT_LIGHT6_SGIX = 33810
  FRAGMENT_LIGHT7_SGIX = 33811
  SGIX_FRAMEZOOM = 1
  FRAMEZOOM_SGIX = 33163
  FRAMEZOOM_FACTOR_SGIX = 33164
  MAX_FRAMEZOOM_FACTOR_SGIX = 33165
  SGIX_IGLOO_INTERFACE = 1
  SGIX_INSTRUMENTS = 1
  INSTRUMENT_BUFFER_POINTER_SGIX = 33152
  INSTRUMENT_MEASUREMENTS_SGIX = 33153
  SGIX_INTERLACE = 1
  INTERLACE_SGIX = 32916
  SGIX_IR_INSTRUMENT1 = 1
  IR_INSTRUMENT1_SGIX = 33151
  SGIX_LIST_PRIORITY = 1
  LIST_PRIORITY_SGIX = 33154
  SGIX_PIXEL_TEXTURE = 1
  PIXEL_TEX_GEN_SGIX = 33081
  PIXEL_TEX_GEN_MODE_SGIX = 33579
  SGIX_PIXEL_TILES = 1
  PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086
  PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087
  PIXEL_TILE_WIDTH_SGIX = 33088
  PIXEL_TILE_HEIGHT_SGIX = 33089
  PIXEL_TILE_GRID_WIDTH_SGIX = 33090
  PIXEL_TILE_GRID_HEIGHT_SGIX = 33091
  PIXEL_TILE_GRID_DEPTH_SGIX = 33092
  PIXEL_TILE_CACHE_SIZE_SGIX = 33093
  SGIX_POLYNOMIAL_FFD = 1
  TEXTURE_DEFORMATION_BIT_SGIX = 1
  GEOMETRY_DEFORMATION_BIT_SGIX = 2
  GEOMETRY_DEFORMATION_SGIX = 33172
  TEXTURE_DEFORMATION_SGIX = 33173
  DEFORMATIONS_MASK_SGIX = 33174
  MAX_DEFORMATION_ORDER_SGIX = 33175
  SGIX_REFERENCE_PLANE = 1
  REFERENCE_PLANE_SGIX = 33149
  REFERENCE_PLANE_EQUATION_SGIX = 33150
  SGIX_RESAMPLE = 1
  PACK_RESAMPLE_SGIX = 33838
  UNPACK_RESAMPLE_SGIX = 33839
  RESAMPLE_REPLICATE_SGIX = 33843
  RESAMPLE_ZERO_FILL_SGIX = 33844
  RESAMPLE_DECIMATE_SGIX = 33840
  SGIX_SCALEBIAS_HINT = 1
  SCALEBIAS_HINT_SGIX = 33570
  SGIX_SHADOW = 1
  TEXTURE_COMPARE_SGIX = 33178
  TEXTURE_COMPARE_OPERATOR_SGIX = 33179
  TEXTURE_LEQUAL_R_SGIX = 33180
  TEXTURE_GEQUAL_R_SGIX = 33181
  SGIX_SHADOW_AMBIENT = 1
  SHADOW_AMBIENT_SGIX = 32959
  SGIX_SPRITE = 1
  SPRITE_SGIX = 33096
  SPRITE_MODE_SGIX = 33097
  SPRITE_AXIS_SGIX = 33098
  SPRITE_TRANSLATION_SGIX = 33099
  SPRITE_AXIAL_SGIX = 33100
  SPRITE_OBJECT_ALIGNED_SGIX = 33101
  SPRITE_EYE_ALIGNED_SGIX = 33102
  SGIX_SUBSAMPLE = 1
  PACK_SUBSAMPLE_RATE_SGIX = 34208
  UNPACK_SUBSAMPLE_RATE_SGIX = 34209
  PIXEL_SUBSAMPLE_4444_SGIX = 34210
  PIXEL_SUBSAMPLE_2424_SGIX = 34211
  PIXEL_SUBSAMPLE_4242_SGIX = 34212
  SGIX_TAG_SAMPLE_BUFFER = 1
  SGIX_TEXTURE_ADD_ENV = 1
  TEXTURE_ENV_BIAS_SGIX = 32958
  SGIX_TEXTURE_COORDINATE_CLAMP = 1
  TEXTURE_MAX_CLAMP_S_SGIX = 33641
  TEXTURE_MAX_CLAMP_T_SGIX = 33642
  TEXTURE_MAX_CLAMP_R_SGIX = 33643
  SGIX_TEXTURE_LOD_BIAS = 1
  TEXTURE_LOD_BIAS_S_SGIX = 33166
  TEXTURE_LOD_BIAS_T_SGIX = 33167
  TEXTURE_LOD_BIAS_R_SGIX = 33168
  SGIX_TEXTURE_MULTI_BUFFER = 1
  TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070
  SGIX_TEXTURE_SCALE_BIAS = 1
  POST_TEXTURE_FILTER_BIAS_SGIX = 33145
  POST_TEXTURE_FILTER_SCALE_SGIX = 33146
  POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147
  POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148
  SGIX_VERTEX_PRECLIP = 1
  VERTEX_PRECLIP_SGIX = 33774
  VERTEX_PRECLIP_HINT_SGIX = 33775
  SGIX_YCRCB = 1
  YCRCB_422_SGIX = 33211
  YCRCB_444_SGIX = 33212
  SGIX_YCRCB_SUBSAMPLE = 1
  SGIX_YCRCBA = 1
  YCRCB_SGIX = 33560
  YCRCBA_SGIX = 33561
  SGI_COLOR_MATRIX = 1
  COLOR_MATRIX_SGI = 32945
  COLOR_MATRIX_STACK_DEPTH_SGI = 32946
  MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947
  POST_COLOR_MATRIX_RED_SCALE_SGI = 32948
  POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949
  POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950
  POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951
  POST_COLOR_MATRIX_RED_BIAS_SGI = 32952
  POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953
  POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954
  POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955
  SGI_COLOR_TABLE = 1
  COLOR_TABLE_SGI = 32976
  POST_CONVOLUTION_COLOR_TABLE_SGI = 32977
  POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32978
  PROXY_COLOR_TABLE_SGI = 32979
  PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 32980
  PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32981
  COLOR_TABLE_SCALE_SGI = 32982
  COLOR_TABLE_BIAS_SGI = 32983
  COLOR_TABLE_FORMAT_SGI = 32984
  COLOR_TABLE_WIDTH_SGI = 32985
  COLOR_TABLE_RED_SIZE_SGI = 32986
  COLOR_TABLE_GREEN_SIZE_SGI = 32987
  COLOR_TABLE_BLUE_SIZE_SGI = 32988
  COLOR_TABLE_ALPHA_SIZE_SGI = 32989
  COLOR_TABLE_LUMINANCE_SIZE_SGI = 32990
  COLOR_TABLE_INTENSITY_SIZE_SGI = 32991
  SGI_TEXTURE_COLOR_TABLE = 1
  TEXTURE_COLOR_TABLE_SGI = 32956
  PROXY_TEXTURE_COLOR_TABLE_SGI = 32957
  SUNX_CONSTANT_DATA = 1
  UNPACK_CONSTANT_DATA_SUNX = 33237
  TEXTURE_CONSTANT_DATA_SUNX = 33238
  SUN_CONVOLUTION_BORDER_MODES = 1
  WRAP_BORDER_SUN = 33236
  SUN_GLOBAL_ALPHA = 1
  GLOBAL_ALPHA_SUN = 33241
  GLOBAL_ALPHA_FACTOR_SUN = 33242
  SUN_MESH_ARRAY = 1
  QUAD_MESH_SUN = 34324
  TRIANGLE_MESH_SUN = 34325
  SUN_SLICE_ACCUM = 1
  SLICE_ACCUM_SUN = 34252
  SUN_TRIANGLE_LIST = 1
  RESTART_SUN = 1
  REPLACE_MIDDLE_SUN = 2
  REPLACE_OLDEST_SUN = 3
  TRIANGLE_LIST_SUN = 33239
  REPLACEMENT_CODE_SUN = 33240
  REPLACEMENT_CODE_ARRAY_SUN = 34240
  REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241
  REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242
  REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243
  R1UI_V3F_SUN = 34244
  R1UI_C4UB_V3F_SUN = 34245
  R1UI_C3F_V3F_SUN = 34246
  R1UI_N3F_V3F_SUN = 34247
  R1UI_C4F_N3F_V3F_SUN = 34248
  R1UI_T2F_V3F_SUN = 34249
  R1UI_T2F_N3F_V3F_SUN = 34250
  R1UI_T2F_C4F_N3F_V3F_SUN = 34251
  SUN_VERTEX = 1
  WIN_PHONG_SHADING = 1
  PHONG_WIN = 33002
  PHONG_HINT_WIN = 33003
  WIN_SPECULAR_FOG = 1
  FOG_SPECULAR_TEXTURE_WIN = 33004
  MESA_PACKED_DEPTH_STENCIL = 1
  DEPTH_STENCIL_MESA = 34640
  UNSIGNED_INT_24_8_MESA = 34641
  UNSIGNED_INT_8_24_REV_MESA = 34642
  UNSIGNED_SHORT_15_1_MESA = 34643
  UNSIGNED_SHORT_1_15_REV_MESA = 34644
  ATI_BLEND_EQUATION_SEPARATE = 1
  ALPHA_BLEND_EQUATION_ATI = 34877
  OES_EGL_IMAGE = 1
  fun cull_face = glCullFace(mode : GLenum)
  alias GLenum = LibC::UInt
  fun front_face = glFrontFace(mode : GLenum)
  fun hint = glHint(target : GLenum, mode : GLenum)
  fun line_width = glLineWidth(width : GLfloat)
  alias GLfloat = LibC::Float
  fun point_size = glPointSize(size : GLfloat)
  fun polygon_mode = glPolygonMode(face : GLenum, mode : GLenum)
  fun scissor = glScissor(x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  alias GLint = LibC::Int
  alias GLsizei = LibC::Int
  fun tex_parameterf = glTexParameterf(target : GLenum, pname : GLenum, param : GLfloat)
  fun tex_parameterfv = glTexParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun tex_parameteri = glTexParameteri(target : GLenum, pname : GLenum, param : GLint)
  fun tex_parameteriv = glTexParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun tex_image1d = glTexImage1D(target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun tex_image2d = glTexImage2D(target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, height : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun draw_buffer = glDrawBuffer(buf : GLenum)
  fun clear = glClear(mask : GLbitfield)
  alias GLbitfield = LibC::UInt
  fun clear_color = glClearColor(red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat)
  fun clear_stencil = glClearStencil(s : GLint)
  fun clear_depth = glClearDepth(depth : GLdouble)
  alias GLdouble = LibC::Double
  fun stencil_mask = glStencilMask(mask : GLuint)
  alias GLuint = LibC::UInt
  fun color_mask = glColorMask(red : GLboolean, green : GLboolean, blue : GLboolean, alpha : GLboolean)
  alias GLboolean = UInt8
  fun depth_mask = glDepthMask(flag : GLboolean)
  fun disable = glDisable(cap : GLenum)
  fun enable = glEnable(cap : GLenum)
  fun finish = glFinish
  fun flush = glFlush
  fun blend_func = glBlendFunc(sfactor : GLenum, dfactor : GLenum)
  fun logic_op = glLogicOp(opcode : GLenum)
  fun stencil_func = glStencilFunc(func : GLenum, ref : GLint, mask : GLuint)
  fun stencil_op = glStencilOp(fail : GLenum, zfail : GLenum, zpass : GLenum)
  fun depth_func = glDepthFunc(func : GLenum)
  fun pixel_storef = glPixelStoref(pname : GLenum, param : GLfloat)
  fun pixel_storei = glPixelStorei(pname : GLenum, param : GLint)
  fun read_buffer = glReadBuffer(src : GLenum)
  fun read_pixels = glReadPixels(x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun get_booleanv = glGetBooleanv(pname : GLenum, data : GLboolean*)
  fun get_doublev = glGetDoublev(pname : GLenum, data : GLdouble*)
  fun get_error = glGetError : GLenum
  fun get_floatv = glGetFloatv(pname : GLenum, data : GLfloat*)
  fun get_integerv = glGetIntegerv(pname : GLenum, data : GLint*)
  fun get_string = glGetString(name : GLenum) : GLubyte*
  alias GLubyte = UInt8
  fun get_tex_image = glGetTexImage(target : GLenum, level : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun get_tex_parameterfv = glGetTexParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_tex_parameteriv = glGetTexParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_tex_level_parameterfv = glGetTexLevelParameterfv(target : GLenum, level : GLint, pname : GLenum, params : GLfloat*)
  fun get_tex_level_parameteriv = glGetTexLevelParameteriv(target : GLenum, level : GLint, pname : GLenum, params : GLint*)
  fun is_enabled = glIsEnabled(cap : GLenum) : GLboolean
  fun depth_range = glDepthRange(near : GLdouble, far : GLdouble)
  fun viewport = glViewport(x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun draw_arrays = glDrawArrays(mode : GLenum, first : GLint, count : GLsizei)
  fun draw_elements = glDrawElements(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*)
  fun get_pointerv = glGetPointerv(pname : GLenum, params : Void**)
  fun polygon_offset = glPolygonOffset(factor : GLfloat, units : GLfloat)
  fun copy_tex_image1d = glCopyTexImage1D(target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, border : GLint)
  fun copy_tex_image2d = glCopyTexImage2D(target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, border : GLint)
  fun copy_tex_sub_image1d = glCopyTexSubImage1D(target : GLenum, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei)
  fun copy_tex_sub_image2d = glCopyTexSubImage2D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun tex_sub_image1d = glTexSubImage1D(target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun tex_sub_image2d = glTexSubImage2D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun bind_texture = glBindTexture(target : GLenum, texture : GLuint)
  fun delete_textures = glDeleteTextures(n : GLsizei, textures : GLuint*)
  fun gen_textures = glGenTextures(n : GLsizei, textures : GLuint*)
  fun is_texture = glIsTexture(texture : GLuint) : GLboolean
  fun draw_range_elements = glDrawRangeElements(mode : GLenum, start : GLuint, _end : GLuint, count : GLsizei, type : GLenum, indices : Void*)
  fun tex_image3d = glTexImage3D(target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun tex_sub_image3d = glTexSubImage3D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun copy_tex_sub_image3d = glCopyTexSubImage3D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun active_texture = glActiveTexture(texture : GLenum)
  fun sample_coverage = glSampleCoverage(value : GLfloat, invert : GLboolean)
  fun compressed_tex_image3d = glCompressedTexImage3D(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, image_size : GLsizei, data : Void*)
  fun compressed_tex_image2d = glCompressedTexImage2D(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, image_size : GLsizei, data : Void*)
  fun compressed_tex_image1d = glCompressedTexImage1D(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, image_size : GLsizei, data : Void*)
  fun compressed_tex_sub_image3d = glCompressedTexSubImage3D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun compressed_tex_sub_image2d = glCompressedTexSubImage2D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun compressed_tex_sub_image1d = glCompressedTexSubImage1D(target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun get_compressed_tex_image = glGetCompressedTexImage(target : GLenum, level : GLint, img : Void*)
  fun blend_func_separate = glBlendFuncSeparate(sfactor_rgb : GLenum, dfactor_rgb : GLenum, sfactor_alpha : GLenum, dfactor_alpha : GLenum)
  fun multi_draw_arrays = glMultiDrawArrays(mode : GLenum, first : GLint*, count : GLsizei*, drawcount : GLsizei)
  fun multi_draw_elements = glMultiDrawElements(mode : GLenum, count : GLsizei*, type : GLenum, indices : Void**, drawcount : GLsizei)
  fun point_parameterf = glPointParameterf(pname : GLenum, param : GLfloat)
  fun point_parameterfv = glPointParameterfv(pname : GLenum, params : GLfloat*)
  fun point_parameteri = glPointParameteri(pname : GLenum, param : GLint)
  fun point_parameteriv = glPointParameteriv(pname : GLenum, params : GLint*)
  fun blend_color = glBlendColor(red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat)
  fun blend_equation = glBlendEquation(mode : GLenum)
  fun gen_queries = glGenQueries(n : GLsizei, ids : GLuint*)
  fun delete_queries = glDeleteQueries(n : GLsizei, ids : GLuint*)
  fun is_query = glIsQuery(id : GLuint) : GLboolean
  fun begin_query = glBeginQuery(target : GLenum, id : GLuint)
  fun end_query = glEndQuery(target : GLenum)
  fun get_queryiv = glGetQueryiv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_query_objectiv = glGetQueryObjectiv(id : GLuint, pname : GLenum, params : GLint*)
  fun get_query_objectuiv = glGetQueryObjectuiv(id : GLuint, pname : GLenum, params : GLuint*)
  fun bind_buffer = glBindBuffer(target : GLenum, buffer : GLuint)
  fun delete_buffers = glDeleteBuffers(n : GLsizei, buffers : GLuint*)
  fun gen_buffers = glGenBuffers(n : GLsizei, buffers : GLuint*)
  fun is_buffer = glIsBuffer(buffer : GLuint) : GLboolean
  fun buffer_data = glBufferData(target : GLenum, size : GLsizeiptr, data : Void*, usage : GLenum)
  alias PtrdiffT = LibC::Long
  alias GLsizeiptr = PtrdiffT
  fun buffer_sub_data = glBufferSubData(target : GLenum, offset : GLintptr, size : GLsizeiptr, data : Void*)
  alias GLintptr = PtrdiffT
  fun get_buffer_sub_data = glGetBufferSubData(target : GLenum, offset : GLintptr, size : GLsizeiptr, data : Void*)
  fun map_buffer = glMapBuffer(target : GLenum, access : GLenum) : Void*
  fun unmap_buffer = glUnmapBuffer(target : GLenum) : GLboolean
  fun get_buffer_parameteriv = glGetBufferParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_buffer_pointerv = glGetBufferPointerv(target : GLenum, pname : GLenum, params : Void**)
  fun blend_equation_separate = glBlendEquationSeparate(mode_rgb : GLenum, mode_alpha : GLenum)
  fun draw_buffers = glDrawBuffers(n : GLsizei, bufs : GLenum*)
  fun stencil_op_separate = glStencilOpSeparate(face : GLenum, sfail : GLenum, dpfail : GLenum, dppass : GLenum)
  fun stencil_func_separate = glStencilFuncSeparate(face : GLenum, func : GLenum, ref : GLint, mask : GLuint)
  fun stencil_mask_separate = glStencilMaskSeparate(face : GLenum, mask : GLuint)
  fun attach_shader = glAttachShader(program : GLuint, shader : GLuint)
  fun bind_attrib_location = glBindAttribLocation(program : GLuint, index : GLuint, name : GLchar*)
  alias GLchar = LibC::Char
  fun compile_shader = glCompileShader(shader : GLuint)
  fun create_program = glCreateProgram : GLuint
  fun create_shader = glCreateShader(type : GLenum) : GLuint
  fun delete_program = glDeleteProgram(program : GLuint)
  fun delete_shader = glDeleteShader(shader : GLuint)
  fun detach_shader = glDetachShader(program : GLuint, shader : GLuint)
  fun disable_vertex_attrib_array = glDisableVertexAttribArray(index : GLuint)
  fun enable_vertex_attrib_array = glEnableVertexAttribArray(index : GLuint)
  fun get_active_attrib = glGetActiveAttrib(program : GLuint, index : GLuint, buf_size : GLsizei, length : GLsizei*, size : GLint*, type : GLenum*, name : GLchar*)
  fun get_active_uniform = glGetActiveUniform(program : GLuint, index : GLuint, buf_size : GLsizei, length : GLsizei*, size : GLint*, type : GLenum*, name : GLchar*)
  fun get_attached_shaders = glGetAttachedShaders(program : GLuint, max_count : GLsizei, count : GLsizei*, shaders : GLuint*)
  fun get_attrib_location = glGetAttribLocation(program : GLuint, name : GLchar*) : GLint
  fun get_programiv = glGetProgramiv(program : GLuint, pname : GLenum, params : GLint*)
  fun get_program_info_log = glGetProgramInfoLog(program : GLuint, buf_size : GLsizei, length : GLsizei*, info_log : GLchar*)
  fun get_shaderiv = glGetShaderiv(shader : GLuint, pname : GLenum, params : GLint*)
  fun get_shader_info_log = glGetShaderInfoLog(shader : GLuint, buf_size : GLsizei, length : GLsizei*, info_log : GLchar*)
  fun get_shader_source = glGetShaderSource(shader : GLuint, buf_size : GLsizei, length : GLsizei*, source : GLchar*)
  fun get_uniform_location = glGetUniformLocation(program : GLuint, name : GLchar*) : GLint
  fun get_uniformfv = glGetUniformfv(program : GLuint, location : GLint, params : GLfloat*)
  fun get_uniformiv = glGetUniformiv(program : GLuint, location : GLint, params : GLint*)
  fun get_vertex_attribdv = glGetVertexAttribdv(index : GLuint, pname : GLenum, params : GLdouble*)
  fun get_vertex_attribfv = glGetVertexAttribfv(index : GLuint, pname : GLenum, params : GLfloat*)
  fun get_vertex_attribiv = glGetVertexAttribiv(index : GLuint, pname : GLenum, params : GLint*)
  fun get_vertex_attrib_pointerv = glGetVertexAttribPointerv(index : GLuint, pname : GLenum, pointer : Void**)
  fun is_program = glIsProgram(program : GLuint) : GLboolean
  fun is_shader = glIsShader(shader : GLuint) : GLboolean
  fun link_program = glLinkProgram(program : GLuint)
  fun shader_source = glShaderSource(shader : GLuint, count : GLsizei, string : GLchar**, length : GLint*)
  fun use_program = glUseProgram(program : GLuint)
  fun uniform1f = glUniform1f(location : GLint, v0 : GLfloat)
  fun uniform2f = glUniform2f(location : GLint, v0 : GLfloat, v1 : GLfloat)
  fun uniform3f = glUniform3f(location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat)
  fun uniform4f = glUniform4f(location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat)
  fun uniform1i = glUniform1i(location : GLint, v0 : GLint)
  fun uniform2i = glUniform2i(location : GLint, v0 : GLint, v1 : GLint)
  fun uniform3i = glUniform3i(location : GLint, v0 : GLint, v1 : GLint, v2 : GLint)
  fun uniform4i = glUniform4i(location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint)
  fun uniform1fv = glUniform1fv(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform2fv = glUniform2fv(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform3fv = glUniform3fv(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform4fv = glUniform4fv(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform1iv = glUniform1iv(location : GLint, count : GLsizei, value : GLint*)
  fun uniform2iv = glUniform2iv(location : GLint, count : GLsizei, value : GLint*)
  fun uniform3iv = glUniform3iv(location : GLint, count : GLsizei, value : GLint*)
  fun uniform4iv = glUniform4iv(location : GLint, count : GLsizei, value : GLint*)
  fun uniform_matrix2fv = glUniformMatrix2fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix3fv = glUniformMatrix3fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix4fv = glUniformMatrix4fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun validate_program = glValidateProgram(program : GLuint)
  fun vertex_attrib1d = glVertexAttrib1d(index : GLuint, x : GLdouble)
  fun vertex_attrib1dv = glVertexAttrib1dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib1f = glVertexAttrib1f(index : GLuint, x : GLfloat)
  fun vertex_attrib1fv = glVertexAttrib1fv(index : GLuint, v : GLfloat*)
  fun vertex_attrib1s = glVertexAttrib1s(index : GLuint, x : GLshort)
  alias GLshort = LibC::Short
  fun vertex_attrib1sv = glVertexAttrib1sv(index : GLuint, v : GLshort*)
  fun vertex_attrib2d = glVertexAttrib2d(index : GLuint, x : GLdouble, y : GLdouble)
  fun vertex_attrib2dv = glVertexAttrib2dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib2f = glVertexAttrib2f(index : GLuint, x : GLfloat, y : GLfloat)
  fun vertex_attrib2fv = glVertexAttrib2fv(index : GLuint, v : GLfloat*)
  fun vertex_attrib2s = glVertexAttrib2s(index : GLuint, x : GLshort, y : GLshort)
  fun vertex_attrib2sv = glVertexAttrib2sv(index : GLuint, v : GLshort*)
  fun vertex_attrib3d = glVertexAttrib3d(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble)
  fun vertex_attrib3dv = glVertexAttrib3dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib3f = glVertexAttrib3f(index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat)
  fun vertex_attrib3fv = glVertexAttrib3fv(index : GLuint, v : GLfloat*)
  fun vertex_attrib3s = glVertexAttrib3s(index : GLuint, x : GLshort, y : GLshort, z : GLshort)
  fun vertex_attrib3sv = glVertexAttrib3sv(index : GLuint, v : GLshort*)
  fun vertex_attrib4nbv = glVertexAttrib4Nbv(index : GLuint, v : GLbyte*)
  alias GLbyte = LibC::Char
  fun vertex_attrib4niv = glVertexAttrib4Niv(index : GLuint, v : GLint*)
  fun vertex_attrib4nsv = glVertexAttrib4Nsv(index : GLuint, v : GLshort*)
  fun vertex_attrib4nub = glVertexAttrib4Nub(index : GLuint, x : GLubyte, y : GLubyte, z : GLubyte, w : GLubyte)
  fun vertex_attrib4nubv = glVertexAttrib4Nubv(index : GLuint, v : GLubyte*)
  fun vertex_attrib4nuiv = glVertexAttrib4Nuiv(index : GLuint, v : GLuint*)
  fun vertex_attrib4nusv = glVertexAttrib4Nusv(index : GLuint, v : GLushort*)
  alias GLushort = LibC::UShort
  fun vertex_attrib4bv = glVertexAttrib4bv(index : GLuint, v : GLbyte*)
  fun vertex_attrib4d = glVertexAttrib4d(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun vertex_attrib4dv = glVertexAttrib4dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib4f = glVertexAttrib4f(index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun vertex_attrib4fv = glVertexAttrib4fv(index : GLuint, v : GLfloat*)
  fun vertex_attrib4iv = glVertexAttrib4iv(index : GLuint, v : GLint*)
  fun vertex_attrib4s = glVertexAttrib4s(index : GLuint, x : GLshort, y : GLshort, z : GLshort, w : GLshort)
  fun vertex_attrib4sv = glVertexAttrib4sv(index : GLuint, v : GLshort*)
  fun vertex_attrib4ubv = glVertexAttrib4ubv(index : GLuint, v : GLubyte*)
  fun vertex_attrib4uiv = glVertexAttrib4uiv(index : GLuint, v : GLuint*)
  fun vertex_attrib4usv = glVertexAttrib4usv(index : GLuint, v : GLushort*)
  fun vertex_attrib_pointer = glVertexAttribPointer(index : GLuint, size : GLint, type : GLenum, normalized : GLboolean, stride : GLsizei, pointer : Void*)
  fun uniform_matrix2x3fv = glUniformMatrix2x3fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix3x2fv = glUniformMatrix3x2fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix2x4fv = glUniformMatrix2x4fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix4x2fv = glUniformMatrix4x2fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix3x4fv = glUniformMatrix3x4fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix4x3fv = glUniformMatrix4x3fv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun color_maski = glColorMaski(index : GLuint, r : GLboolean, g : GLboolean, b : GLboolean, a : GLboolean)
  fun get_booleani_v = glGetBooleani_v(target : GLenum, index : GLuint, data : GLboolean*)
  fun get_integeri_v = glGetIntegeri_v(target : GLenum, index : GLuint, data : GLint*)
  fun enablei = glEnablei(target : GLenum, index : GLuint)
  fun disablei = glDisablei(target : GLenum, index : GLuint)
  fun is_enabledi = glIsEnabledi(target : GLenum, index : GLuint) : GLboolean
  fun begin_transform_feedback = glBeginTransformFeedback(primitive_mode : GLenum)
  fun end_transform_feedback = glEndTransformFeedback
  fun bind_buffer_range = glBindBufferRange(target : GLenum, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr)
  fun bind_buffer_base = glBindBufferBase(target : GLenum, index : GLuint, buffer : GLuint)
  fun transform_feedback_varyings = glTransformFeedbackVaryings(program : GLuint, count : GLsizei, varyings : GLchar**, buffer_mode : GLenum)
  fun get_transform_feedback_varying = glGetTransformFeedbackVarying(program : GLuint, index : GLuint, buf_size : GLsizei, length : GLsizei*, size : GLsizei*, type : GLenum*, name : GLchar*)
  fun clamp_color = glClampColor(target : GLenum, clamp : GLenum)
  fun begin_conditional_render = glBeginConditionalRender(id : GLuint, mode : GLenum)
  fun end_conditional_render = glEndConditionalRender
  fun vertex_attrib_i_pointer = glVertexAttribIPointer(index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun get_vertex_attrib_iiv = glGetVertexAttribIiv(index : GLuint, pname : GLenum, params : GLint*)
  fun get_vertex_attrib_iuiv = glGetVertexAttribIuiv(index : GLuint, pname : GLenum, params : GLuint*)
  fun vertex_attrib_i1i = glVertexAttribI1i(index : GLuint, x : GLint)
  fun vertex_attrib_i2i = glVertexAttribI2i(index : GLuint, x : GLint, y : GLint)
  fun vertex_attrib_i3i = glVertexAttribI3i(index : GLuint, x : GLint, y : GLint, z : GLint)
  fun vertex_attrib_i4i = glVertexAttribI4i(index : GLuint, x : GLint, y : GLint, z : GLint, w : GLint)
  fun vertex_attrib_i1ui = glVertexAttribI1ui(index : GLuint, x : GLuint)
  fun vertex_attrib_i2ui = glVertexAttribI2ui(index : GLuint, x : GLuint, y : GLuint)
  fun vertex_attrib_i3ui = glVertexAttribI3ui(index : GLuint, x : GLuint, y : GLuint, z : GLuint)
  fun vertex_attrib_i4ui = glVertexAttribI4ui(index : GLuint, x : GLuint, y : GLuint, z : GLuint, w : GLuint)
  fun vertex_attrib_i1iv = glVertexAttribI1iv(index : GLuint, v : GLint*)
  fun vertex_attrib_i2iv = glVertexAttribI2iv(index : GLuint, v : GLint*)
  fun vertex_attrib_i3iv = glVertexAttribI3iv(index : GLuint, v : GLint*)
  fun vertex_attrib_i4iv = glVertexAttribI4iv(index : GLuint, v : GLint*)
  fun vertex_attrib_i1uiv = glVertexAttribI1uiv(index : GLuint, v : GLuint*)
  fun vertex_attrib_i2uiv = glVertexAttribI2uiv(index : GLuint, v : GLuint*)
  fun vertex_attrib_i3uiv = glVertexAttribI3uiv(index : GLuint, v : GLuint*)
  fun vertex_attrib_i4uiv = glVertexAttribI4uiv(index : GLuint, v : GLuint*)
  fun vertex_attrib_i4bv = glVertexAttribI4bv(index : GLuint, v : GLbyte*)
  fun vertex_attrib_i4sv = glVertexAttribI4sv(index : GLuint, v : GLshort*)
  fun vertex_attrib_i4ubv = glVertexAttribI4ubv(index : GLuint, v : GLubyte*)
  fun vertex_attrib_i4usv = glVertexAttribI4usv(index : GLuint, v : GLushort*)
  fun get_uniformuiv = glGetUniformuiv(program : GLuint, location : GLint, params : GLuint*)
  fun bind_frag_data_location = glBindFragDataLocation(program : GLuint, color : GLuint, name : GLchar*)
  fun get_frag_data_location = glGetFragDataLocation(program : GLuint, name : GLchar*) : GLint
  fun uniform1ui = glUniform1ui(location : GLint, v0 : GLuint)
  fun uniform2ui = glUniform2ui(location : GLint, v0 : GLuint, v1 : GLuint)
  fun uniform3ui = glUniform3ui(location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint)
  fun uniform4ui = glUniform4ui(location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint)
  fun uniform1uiv = glUniform1uiv(location : GLint, count : GLsizei, value : GLuint*)
  fun uniform2uiv = glUniform2uiv(location : GLint, count : GLsizei, value : GLuint*)
  fun uniform3uiv = glUniform3uiv(location : GLint, count : GLsizei, value : GLuint*)
  fun uniform4uiv = glUniform4uiv(location : GLint, count : GLsizei, value : GLuint*)
  fun tex_parameter_iiv = glTexParameterIiv(target : GLenum, pname : GLenum, params : GLint*)
  fun tex_parameter_iuiv = glTexParameterIuiv(target : GLenum, pname : GLenum, params : GLuint*)
  fun get_tex_parameter_iiv = glGetTexParameterIiv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_tex_parameter_iuiv = glGetTexParameterIuiv(target : GLenum, pname : GLenum, params : GLuint*)
  fun clear_bufferiv = glClearBufferiv(buffer : GLenum, drawbuffer : GLint, value : GLint*)
  fun clear_bufferuiv = glClearBufferuiv(buffer : GLenum, drawbuffer : GLint, value : GLuint*)
  fun clear_bufferfv = glClearBufferfv(buffer : GLenum, drawbuffer : GLint, value : GLfloat*)
  fun clear_bufferfi = glClearBufferfi(buffer : GLenum, drawbuffer : GLint, depth : GLfloat, stencil : GLint)
  fun get_stringi = glGetStringi(name : GLenum, index : GLuint) : GLubyte*
  fun is_renderbuffer = glIsRenderbuffer(renderbuffer : GLuint) : GLboolean
  fun bind_renderbuffer = glBindRenderbuffer(target : GLenum, renderbuffer : GLuint)
  fun delete_renderbuffers = glDeleteRenderbuffers(n : GLsizei, renderbuffers : GLuint*)
  fun gen_renderbuffers = glGenRenderbuffers(n : GLsizei, renderbuffers : GLuint*)
  fun renderbuffer_storage = glRenderbufferStorage(target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun get_renderbuffer_parameteriv = glGetRenderbufferParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun is_framebuffer = glIsFramebuffer(framebuffer : GLuint) : GLboolean
  fun bind_framebuffer = glBindFramebuffer(target : GLenum, framebuffer : GLuint)
  fun delete_framebuffers = glDeleteFramebuffers(n : GLsizei, framebuffers : GLuint*)
  fun gen_framebuffers = glGenFramebuffers(n : GLsizei, framebuffers : GLuint*)
  fun check_framebuffer_status = glCheckFramebufferStatus(target : GLenum) : GLenum
  fun framebuffer_texture1d = glFramebufferTexture1D(target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint)
  fun framebuffer_texture2d = glFramebufferTexture2D(target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint)
  fun framebuffer_texture3d = glFramebufferTexture3D(target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint, zoffset : GLint)
  fun framebuffer_renderbuffer = glFramebufferRenderbuffer(target : GLenum, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint)
  fun get_framebuffer_attachment_parameteriv = glGetFramebufferAttachmentParameteriv(target : GLenum, attachment : GLenum, pname : GLenum, params : GLint*)
  fun generate_mipmap = glGenerateMipmap(target : GLenum)
  fun blit_framebuffer = glBlitFramebuffer(src_x0 : GLint, src_y0 : GLint, src_x1 : GLint, src_y1 : GLint, dst_x0 : GLint, dst_y0 : GLint, dst_x1 : GLint, dst_y1 : GLint, mask : GLbitfield, filter : GLenum)
  fun renderbuffer_storage_multisample = glRenderbufferStorageMultisample(target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun framebuffer_texture_layer = glFramebufferTextureLayer(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint)
  fun map_buffer_range = glMapBufferRange(target : GLenum, offset : GLintptr, length : GLsizeiptr, access : GLbitfield) : Void*
  fun flush_mapped_buffer_range = glFlushMappedBufferRange(target : GLenum, offset : GLintptr, length : GLsizeiptr)
  fun bind_vertex_array = glBindVertexArray(array : GLuint)
  fun delete_vertex_arrays = glDeleteVertexArrays(n : GLsizei, arrays : GLuint*)
  fun gen_vertex_arrays = glGenVertexArrays(n : GLsizei, arrays : GLuint*)
  fun is_vertex_array = glIsVertexArray(array : GLuint) : GLboolean
  fun draw_arrays_instanced = glDrawArraysInstanced(mode : GLenum, first : GLint, count : GLsizei, instancecount : GLsizei)
  fun draw_elements_instanced = glDrawElementsInstanced(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*, instancecount : GLsizei)
  fun tex_buffer = glTexBuffer(target : GLenum, internalformat : GLenum, buffer : GLuint)
  fun primitive_restart_index = glPrimitiveRestartIndex(index : GLuint)
  fun copy_buffer_sub_data = glCopyBufferSubData(read_target : GLenum, write_target : GLenum, read_offset : GLintptr, write_offset : GLintptr, size : GLsizeiptr)
  fun get_uniform_indices = glGetUniformIndices(program : GLuint, uniform_count : GLsizei, uniform_names : GLchar**, uniform_indices : GLuint*)
  fun get_active_uniformsiv = glGetActiveUniformsiv(program : GLuint, uniform_count : GLsizei, uniform_indices : GLuint*, pname : GLenum, params : GLint*)
  fun get_active_uniform_name = glGetActiveUniformName(program : GLuint, uniform_index : GLuint, buf_size : GLsizei, length : GLsizei*, uniform_name : GLchar*)
  fun get_uniform_block_index = glGetUniformBlockIndex(program : GLuint, uniform_block_name : GLchar*) : GLuint
  fun get_active_uniform_blockiv = glGetActiveUniformBlockiv(program : GLuint, uniform_block_index : GLuint, pname : GLenum, params : GLint*)
  fun get_active_uniform_block_name = glGetActiveUniformBlockName(program : GLuint, uniform_block_index : GLuint, buf_size : GLsizei, length : GLsizei*, uniform_block_name : GLchar*)
  fun uniform_block_binding = glUniformBlockBinding(program : GLuint, uniform_block_index : GLuint, uniform_block_binding : GLuint)
  fun draw_elements_base_vertex = glDrawElementsBaseVertex(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*, basevertex : GLint)
  fun draw_range_elements_base_vertex = glDrawRangeElementsBaseVertex(mode : GLenum, start : GLuint, _end : GLuint, count : GLsizei, type : GLenum, indices : Void*, basevertex : GLint)
  fun draw_elements_instanced_base_vertex = glDrawElementsInstancedBaseVertex(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*, instancecount : GLsizei, basevertex : GLint)
  fun multi_draw_elements_base_vertex = glMultiDrawElementsBaseVertex(mode : GLenum, count : GLsizei*, type : GLenum, indices : Void**, drawcount : GLsizei, basevertex : GLint*)
  fun provoking_vertex = glProvokingVertex(mode : GLenum)
  fun fence_sync = glFenceSync(condition : GLenum, flags : GLbitfield) : GLsync
  type GLsync = Void*
  fun is_sync = glIsSync(sync : GLsync) : GLboolean
  fun delete_sync = glDeleteSync(sync : GLsync)
  fun client_wait_sync = glClientWaitSync(sync : GLsync, flags : GLbitfield, timeout : GLuint64) : GLenum
  alias X__Uint64T = LibC::ULong
  alias Uint64T = X__Uint64T
  alias GLuint64 = Uint64T
  fun wait_sync = glWaitSync(sync : GLsync, flags : GLbitfield, timeout : GLuint64)
  fun get_integer64v = glGetInteger64v(pname : GLenum, data : GLint64*)
  alias X__Int64T = LibC::Long
  alias Int64T = X__Int64T
  alias GLint64 = Int64T
  fun get_synciv = glGetSynciv(sync : GLsync, pname : GLenum, buf_size : GLsizei, length : GLsizei*, values : GLint*)
  fun get_integer64i_v = glGetInteger64i_v(target : GLenum, index : GLuint, data : GLint64*)
  fun get_buffer_parameteri64v = glGetBufferParameteri64v(target : GLenum, pname : GLenum, params : GLint64*)
  fun framebuffer_texture = glFramebufferTexture(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint)
  fun tex_image2d_multisample = glTexImage2DMultisample(target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean)
  fun tex_image3d_multisample = glTexImage3DMultisample(target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean)
  fun get_multisamplefv = glGetMultisamplefv(pname : GLenum, index : GLuint, val : GLfloat*)
  fun sample_maski = glSampleMaski(mask_number : GLuint, mask : GLbitfield)
  fun bind_frag_data_location_indexed = glBindFragDataLocationIndexed(program : GLuint, color_number : GLuint, index : GLuint, name : GLchar*)
  fun get_frag_data_index = glGetFragDataIndex(program : GLuint, name : GLchar*) : GLint
  fun gen_samplers = glGenSamplers(count : GLsizei, samplers : GLuint*)
  fun delete_samplers = glDeleteSamplers(count : GLsizei, samplers : GLuint*)
  fun is_sampler = glIsSampler(sampler : GLuint) : GLboolean
  fun bind_sampler = glBindSampler(unit : GLuint, sampler : GLuint)
  fun sampler_parameteri = glSamplerParameteri(sampler : GLuint, pname : GLenum, param : GLint)
  fun sampler_parameteriv = glSamplerParameteriv(sampler : GLuint, pname : GLenum, param : GLint*)
  fun sampler_parameterf = glSamplerParameterf(sampler : GLuint, pname : GLenum, param : GLfloat)
  fun sampler_parameterfv = glSamplerParameterfv(sampler : GLuint, pname : GLenum, param : GLfloat*)
  fun sampler_parameter_iiv = glSamplerParameterIiv(sampler : GLuint, pname : GLenum, param : GLint*)
  fun sampler_parameter_iuiv = glSamplerParameterIuiv(sampler : GLuint, pname : GLenum, param : GLuint*)
  fun get_sampler_parameteriv = glGetSamplerParameteriv(sampler : GLuint, pname : GLenum, params : GLint*)
  fun get_sampler_parameter_iiv = glGetSamplerParameterIiv(sampler : GLuint, pname : GLenum, params : GLint*)
  fun get_sampler_parameterfv = glGetSamplerParameterfv(sampler : GLuint, pname : GLenum, params : GLfloat*)
  fun get_sampler_parameter_iuiv = glGetSamplerParameterIuiv(sampler : GLuint, pname : GLenum, params : GLuint*)
  fun query_counter = glQueryCounter(id : GLuint, target : GLenum)
  fun get_query_objecti64v = glGetQueryObjecti64v(id : GLuint, pname : GLenum, params : GLint64*)
  fun get_query_objectui64v = glGetQueryObjectui64v(id : GLuint, pname : GLenum, params : GLuint64*)
  fun vertex_attrib_divisor = glVertexAttribDivisor(index : GLuint, divisor : GLuint)
  fun vertex_attrib_p1ui = glVertexAttribP1ui(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint)
  fun vertex_attrib_p1uiv = glVertexAttribP1uiv(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint*)
  fun vertex_attrib_p2ui = glVertexAttribP2ui(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint)
  fun vertex_attrib_p2uiv = glVertexAttribP2uiv(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint*)
  fun vertex_attrib_p3ui = glVertexAttribP3ui(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint)
  fun vertex_attrib_p3uiv = glVertexAttribP3uiv(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint*)
  fun vertex_attrib_p4ui = glVertexAttribP4ui(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint)
  fun vertex_attrib_p4uiv = glVertexAttribP4uiv(index : GLuint, type : GLenum, normalized : GLboolean, value : GLuint*)
  fun min_sample_shading = glMinSampleShading(value : GLfloat)
  fun blend_equationi = glBlendEquationi(buf : GLuint, mode : GLenum)
  fun blend_equation_separatei = glBlendEquationSeparatei(buf : GLuint, mode_rgb : GLenum, mode_alpha : GLenum)
  fun blend_funci = glBlendFunci(buf : GLuint, src : GLenum, dst : GLenum)
  fun blend_func_separatei = glBlendFuncSeparatei(buf : GLuint, src_rgb : GLenum, dst_rgb : GLenum, src_alpha : GLenum, dst_alpha : GLenum)
  fun draw_arrays_indirect = glDrawArraysIndirect(mode : GLenum, indirect : Void*)
  fun draw_elements_indirect = glDrawElementsIndirect(mode : GLenum, type : GLenum, indirect : Void*)
  fun uniform1d = glUniform1d(location : GLint, x : GLdouble)
  fun uniform2d = glUniform2d(location : GLint, x : GLdouble, y : GLdouble)
  fun uniform3d = glUniform3d(location : GLint, x : GLdouble, y : GLdouble, z : GLdouble)
  fun uniform4d = glUniform4d(location : GLint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun uniform1dv = glUniform1dv(location : GLint, count : GLsizei, value : GLdouble*)
  fun uniform2dv = glUniform2dv(location : GLint, count : GLsizei, value : GLdouble*)
  fun uniform3dv = glUniform3dv(location : GLint, count : GLsizei, value : GLdouble*)
  fun uniform4dv = glUniform4dv(location : GLint, count : GLsizei, value : GLdouble*)
  fun uniform_matrix2dv = glUniformMatrix2dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix3dv = glUniformMatrix3dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix4dv = glUniformMatrix4dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix2x3dv = glUniformMatrix2x3dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix2x4dv = glUniformMatrix2x4dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix3x2dv = glUniformMatrix3x2dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix3x4dv = glUniformMatrix3x4dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix4x2dv = glUniformMatrix4x2dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun uniform_matrix4x3dv = glUniformMatrix4x3dv(location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun get_uniformdv = glGetUniformdv(program : GLuint, location : GLint, params : GLdouble*)
  fun get_subroutine_uniform_location = glGetSubroutineUniformLocation(program : GLuint, shadertype : GLenum, name : GLchar*) : GLint
  fun get_subroutine_index = glGetSubroutineIndex(program : GLuint, shadertype : GLenum, name : GLchar*) : GLuint
  fun get_active_subroutine_uniformiv = glGetActiveSubroutineUniformiv(program : GLuint, shadertype : GLenum, index : GLuint, pname : GLenum, values : GLint*)
  fun get_active_subroutine_uniform_name = glGetActiveSubroutineUniformName(program : GLuint, shadertype : GLenum, index : GLuint, bufsize : GLsizei, length : GLsizei*, name : GLchar*)
  fun get_active_subroutine_name = glGetActiveSubroutineName(program : GLuint, shadertype : GLenum, index : GLuint, bufsize : GLsizei, length : GLsizei*, name : GLchar*)
  fun uniform_subroutinesuiv = glUniformSubroutinesuiv(shadertype : GLenum, count : GLsizei, indices : GLuint*)
  fun get_uniform_subroutineuiv = glGetUniformSubroutineuiv(shadertype : GLenum, location : GLint, params : GLuint*)
  fun get_program_stageiv = glGetProgramStageiv(program : GLuint, shadertype : GLenum, pname : GLenum, values : GLint*)
  fun patch_parameteri = glPatchParameteri(pname : GLenum, value : GLint)
  fun patch_parameterfv = glPatchParameterfv(pname : GLenum, values : GLfloat*)
  fun bind_transform_feedback = glBindTransformFeedback(target : GLenum, id : GLuint)
  fun delete_transform_feedbacks = glDeleteTransformFeedbacks(n : GLsizei, ids : GLuint*)
  fun gen_transform_feedbacks = glGenTransformFeedbacks(n : GLsizei, ids : GLuint*)
  fun is_transform_feedback = glIsTransformFeedback(id : GLuint) : GLboolean
  fun pause_transform_feedback = glPauseTransformFeedback
  fun resume_transform_feedback = glResumeTransformFeedback
  fun draw_transform_feedback = glDrawTransformFeedback(mode : GLenum, id : GLuint)
  fun draw_transform_feedback_stream = glDrawTransformFeedbackStream(mode : GLenum, id : GLuint, stream : GLuint)
  fun begin_query_indexed = glBeginQueryIndexed(target : GLenum, index : GLuint, id : GLuint)
  fun end_query_indexed = glEndQueryIndexed(target : GLenum, index : GLuint)
  fun get_query_indexediv = glGetQueryIndexediv(target : GLenum, index : GLuint, pname : GLenum, params : GLint*)
  fun release_shader_compiler = glReleaseShaderCompiler
  fun shader_binary = glShaderBinary(count : GLsizei, shaders : GLuint*, binaryformat : GLenum, binary : Void*, length : GLsizei)
  fun get_shader_precision_format = glGetShaderPrecisionFormat(shadertype : GLenum, precisiontype : GLenum, range : GLint*, precision : GLint*)
  fun depth_rangef = glDepthRangef(n : GLfloat, f : GLfloat)
  fun clear_depthf = glClearDepthf(d : GLfloat)
  fun get_program_binary = glGetProgramBinary(program : GLuint, buf_size : GLsizei, length : GLsizei*, binary_format : GLenum*, binary : Void*)
  fun program_binary = glProgramBinary(program : GLuint, binary_format : GLenum, binary : Void*, length : GLsizei)
  fun program_parameteri = glProgramParameteri(program : GLuint, pname : GLenum, value : GLint)
  fun use_program_stages = glUseProgramStages(pipeline : GLuint, stages : GLbitfield, program : GLuint)
  fun active_shader_program = glActiveShaderProgram(pipeline : GLuint, program : GLuint)
  fun create_shader_programv = glCreateShaderProgramv(type : GLenum, count : GLsizei, strings : GLchar**) : GLuint
  fun bind_program_pipeline = glBindProgramPipeline(pipeline : GLuint)
  fun delete_program_pipelines = glDeleteProgramPipelines(n : GLsizei, pipelines : GLuint*)
  fun gen_program_pipelines = glGenProgramPipelines(n : GLsizei, pipelines : GLuint*)
  fun is_program_pipeline = glIsProgramPipeline(pipeline : GLuint) : GLboolean
  fun get_program_pipelineiv = glGetProgramPipelineiv(pipeline : GLuint, pname : GLenum, params : GLint*)
  fun program_uniform1i = glProgramUniform1i(program : GLuint, location : GLint, v0 : GLint)
  fun program_uniform1iv = glProgramUniform1iv(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform1f = glProgramUniform1f(program : GLuint, location : GLint, v0 : GLfloat)
  fun program_uniform1fv = glProgramUniform1fv(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform1d = glProgramUniform1d(program : GLuint, location : GLint, v0 : GLdouble)
  fun program_uniform1dv = glProgramUniform1dv(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform1ui = glProgramUniform1ui(program : GLuint, location : GLint, v0 : GLuint)
  fun program_uniform1uiv = glProgramUniform1uiv(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun program_uniform2i = glProgramUniform2i(program : GLuint, location : GLint, v0 : GLint, v1 : GLint)
  fun program_uniform2iv = glProgramUniform2iv(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform2f = glProgramUniform2f(program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat)
  fun program_uniform2fv = glProgramUniform2fv(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform2d = glProgramUniform2d(program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble)
  fun program_uniform2dv = glProgramUniform2dv(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform2ui = glProgramUniform2ui(program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint)
  fun program_uniform2uiv = glProgramUniform2uiv(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun program_uniform3i = glProgramUniform3i(program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint)
  fun program_uniform3iv = glProgramUniform3iv(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform3f = glProgramUniform3f(program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat)
  fun program_uniform3fv = glProgramUniform3fv(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform3d = glProgramUniform3d(program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble, v2 : GLdouble)
  fun program_uniform3dv = glProgramUniform3dv(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform3ui = glProgramUniform3ui(program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint)
  fun program_uniform3uiv = glProgramUniform3uiv(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun program_uniform4i = glProgramUniform4i(program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint)
  fun program_uniform4iv = glProgramUniform4iv(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform4f = glProgramUniform4f(program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat)
  fun program_uniform4fv = glProgramUniform4fv(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform4d = glProgramUniform4d(program : GLuint, location : GLint, v0 : GLdouble, v1 : GLdouble, v2 : GLdouble, v3 : GLdouble)
  fun program_uniform4dv = glProgramUniform4dv(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform4ui = glProgramUniform4ui(program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint)
  fun program_uniform4uiv = glProgramUniform4uiv(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun program_uniform_matrix2fv = glProgramUniformMatrix2fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix3fv = glProgramUniformMatrix3fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix4fv = glProgramUniformMatrix4fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix2dv = glProgramUniformMatrix2dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix3dv = glProgramUniformMatrix3dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix4dv = glProgramUniformMatrix4dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix2x3fv = glProgramUniformMatrix2x3fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix3x2fv = glProgramUniformMatrix3x2fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix2x4fv = glProgramUniformMatrix2x4fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix4x2fv = glProgramUniformMatrix4x2fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix3x4fv = glProgramUniformMatrix3x4fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix4x3fv = glProgramUniformMatrix4x3fv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix2x3dv = glProgramUniformMatrix2x3dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix3x2dv = glProgramUniformMatrix3x2dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix2x4dv = glProgramUniformMatrix2x4dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix4x2dv = glProgramUniformMatrix4x2dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix3x4dv = glProgramUniformMatrix3x4dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix4x3dv = glProgramUniformMatrix4x3dv(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun validate_program_pipeline = glValidateProgramPipeline(pipeline : GLuint)
  fun get_program_pipeline_info_log = glGetProgramPipelineInfoLog(pipeline : GLuint, buf_size : GLsizei, length : GLsizei*, info_log : GLchar*)
  fun vertex_attrib_l1d = glVertexAttribL1d(index : GLuint, x : GLdouble)
  fun vertex_attrib_l2d = glVertexAttribL2d(index : GLuint, x : GLdouble, y : GLdouble)
  fun vertex_attrib_l3d = glVertexAttribL3d(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble)
  fun vertex_attrib_l4d = glVertexAttribL4d(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun vertex_attrib_l1dv = glVertexAttribL1dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l2dv = glVertexAttribL2dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l3dv = glVertexAttribL3dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l4dv = glVertexAttribL4dv(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l_pointer = glVertexAttribLPointer(index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun get_vertex_attrib_ldv = glGetVertexAttribLdv(index : GLuint, pname : GLenum, params : GLdouble*)
  fun viewport_arrayv = glViewportArrayv(first : GLuint, count : GLsizei, v : GLfloat*)
  fun viewport_indexedf = glViewportIndexedf(index : GLuint, x : GLfloat, y : GLfloat, w : GLfloat, h : GLfloat)
  fun viewport_indexedfv = glViewportIndexedfv(index : GLuint, v : GLfloat*)
  fun scissor_arrayv = glScissorArrayv(first : GLuint, count : GLsizei, v : GLint*)
  fun scissor_indexed = glScissorIndexed(index : GLuint, left : GLint, bottom : GLint, width : GLsizei, height : GLsizei)
  fun scissor_indexedv = glScissorIndexedv(index : GLuint, v : GLint*)
  fun depth_range_arrayv = glDepthRangeArrayv(first : GLuint, count : GLsizei, v : GLdouble*)
  fun depth_range_indexed = glDepthRangeIndexed(index : GLuint, n : GLdouble, f : GLdouble)
  fun get_floati_v = glGetFloati_v(target : GLenum, index : GLuint, data : GLfloat*)
  fun get_doublei_v = glGetDoublei_v(target : GLenum, index : GLuint, data : GLdouble*)
  fun draw_arrays_instanced_base_instance = glDrawArraysInstancedBaseInstance(mode : GLenum, first : GLint, count : GLsizei, instancecount : GLsizei, baseinstance : GLuint)
  fun draw_elements_instanced_base_instance = glDrawElementsInstancedBaseInstance(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*, instancecount : GLsizei, baseinstance : GLuint)
  fun draw_elements_instanced_base_vertex_base_instance = glDrawElementsInstancedBaseVertexBaseInstance(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*, instancecount : GLsizei, basevertex : GLint, baseinstance : GLuint)
  fun get_internalformativ = glGetInternalformativ(target : GLenum, internalformat : GLenum, pname : GLenum, buf_size : GLsizei, params : GLint*)
  fun get_active_atomic_counter_bufferiv = glGetActiveAtomicCounterBufferiv(program : GLuint, buffer_index : GLuint, pname : GLenum, params : GLint*)
  fun bind_image_texture = glBindImageTexture(unit : GLuint, texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, access : GLenum, format : GLenum)
  fun memory_barrier = glMemoryBarrier(barriers : GLbitfield)
  fun tex_storage1d = glTexStorage1D(target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei)
  fun tex_storage2d = glTexStorage2D(target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun tex_storage3d = glTexStorage3D(target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei)
  fun draw_transform_feedback_instanced = glDrawTransformFeedbackInstanced(mode : GLenum, id : GLuint, instancecount : GLsizei)
  fun draw_transform_feedback_stream_instanced = glDrawTransformFeedbackStreamInstanced(mode : GLenum, id : GLuint, stream : GLuint, instancecount : GLsizei)
  fun clear_buffer_data = glClearBufferData(target : GLenum, internalformat : GLenum, format : GLenum, type : GLenum, data : Void*)
  fun clear_buffer_sub_data = glClearBufferSubData(target : GLenum, internalformat : GLenum, offset : GLintptr, size : GLsizeiptr, format : GLenum, type : GLenum, data : Void*)
  fun dispatch_compute = glDispatchCompute(num_groups_x : GLuint, num_groups_y : GLuint, num_groups_z : GLuint)
  fun dispatch_compute_indirect = glDispatchComputeIndirect(indirect : GLintptr)
  fun copy_image_sub_data = glCopyImageSubData(src_name : GLuint, src_target : GLenum, src_level : GLint, src_x : GLint, src_y : GLint, src_z : GLint, dst_name : GLuint, dst_target : GLenum, dst_level : GLint, dst_x : GLint, dst_y : GLint, dst_z : GLint, src_width : GLsizei, src_height : GLsizei, src_depth : GLsizei)
  fun framebuffer_parameteri = glFramebufferParameteri(target : GLenum, pname : GLenum, param : GLint)
  fun get_framebuffer_parameteriv = glGetFramebufferParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_internalformati64v = glGetInternalformati64v(target : GLenum, internalformat : GLenum, pname : GLenum, buf_size : GLsizei, params : GLint64*)
  fun invalidate_tex_sub_image = glInvalidateTexSubImage(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei)
  fun invalidate_tex_image = glInvalidateTexImage(texture : GLuint, level : GLint)
  fun invalidate_buffer_sub_data = glInvalidateBufferSubData(buffer : GLuint, offset : GLintptr, length : GLsizeiptr)
  fun invalidate_buffer_data = glInvalidateBufferData(buffer : GLuint)
  fun invalidate_framebuffer = glInvalidateFramebuffer(target : GLenum, num_attachments : GLsizei, attachments : GLenum*)
  fun invalidate_sub_framebuffer = glInvalidateSubFramebuffer(target : GLenum, num_attachments : GLsizei, attachments : GLenum*, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun multi_draw_arrays_indirect = glMultiDrawArraysIndirect(mode : GLenum, indirect : Void*, drawcount : GLsizei, stride : GLsizei)
  fun multi_draw_elements_indirect = glMultiDrawElementsIndirect(mode : GLenum, type : GLenum, indirect : Void*, drawcount : GLsizei, stride : GLsizei)
  fun get_program_interfaceiv = glGetProgramInterfaceiv(program : GLuint, program_interface : GLenum, pname : GLenum, params : GLint*)
  fun get_program_resource_index = glGetProgramResourceIndex(program : GLuint, program_interface : GLenum, name : GLchar*) : GLuint
  fun get_program_resource_name = glGetProgramResourceName(program : GLuint, program_interface : GLenum, index : GLuint, buf_size : GLsizei, length : GLsizei*, name : GLchar*)
  fun get_program_resourceiv = glGetProgramResourceiv(program : GLuint, program_interface : GLenum, index : GLuint, prop_count : GLsizei, props : GLenum*, buf_size : GLsizei, length : GLsizei*, params : GLint*)
  fun get_program_resource_location = glGetProgramResourceLocation(program : GLuint, program_interface : GLenum, name : GLchar*) : GLint
  fun get_program_resource_location_index = glGetProgramResourceLocationIndex(program : GLuint, program_interface : GLenum, name : GLchar*) : GLint
  fun shader_storage_block_binding = glShaderStorageBlockBinding(program : GLuint, storage_block_index : GLuint, storage_block_binding : GLuint)
  fun tex_buffer_range = glTexBufferRange(target : GLenum, internalformat : GLenum, buffer : GLuint, offset : GLintptr, size : GLsizeiptr)
  fun tex_storage2d_multisample = glTexStorage2DMultisample(target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean)
  fun tex_storage3d_multisample = glTexStorage3DMultisample(target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean)
  fun texture_view = glTextureView(texture : GLuint, target : GLenum, origtexture : GLuint, internalformat : GLenum, minlevel : GLuint, numlevels : GLuint, minlayer : GLuint, numlayers : GLuint)
  fun bind_vertex_buffer = glBindVertexBuffer(bindingindex : GLuint, buffer : GLuint, offset : GLintptr, stride : GLsizei)
  fun vertex_attrib_format = glVertexAttribFormat(attribindex : GLuint, size : GLint, type : GLenum, normalized : GLboolean, relativeoffset : GLuint)
  fun vertex_attrib_i_format = glVertexAttribIFormat(attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint)
  fun vertex_attrib_l_format = glVertexAttribLFormat(attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint)
  fun vertex_attrib_binding = glVertexAttribBinding(attribindex : GLuint, bindingindex : GLuint)
  fun vertex_binding_divisor = glVertexBindingDivisor(bindingindex : GLuint, divisor : GLuint)
  fun debug_message_control = glDebugMessageControl(source : GLenum, type : GLenum, severity : GLenum, count : GLsizei, ids : GLuint*, enabled : GLboolean)
  fun debug_message_insert = glDebugMessageInsert(source : GLenum, type : GLenum, id : GLuint, severity : GLenum, length : GLsizei, buf : GLchar*)
  fun debug_message_callback = glDebugMessageCallback(callback : Gldebugproc, user_param : Void*)
  alias Gldebugproc = (GLenum, GLenum, GLuint, GLenum, GLsizei, GLchar*, Void* -> Void)
  fun get_debug_message_log = glGetDebugMessageLog(count : GLuint, buf_size : GLsizei, sources : GLenum*, types : GLenum*, ids : GLuint*, severities : GLenum*, lengths : GLsizei*, message_log : GLchar*) : GLuint
  fun push_debug_group = glPushDebugGroup(source : GLenum, id : GLuint, length : GLsizei, message : GLchar*)
  fun pop_debug_group = glPopDebugGroup
  fun object_label = glObjectLabel(identifier : GLenum, name : GLuint, length : GLsizei, label : GLchar*)
  fun get_object_label = glGetObjectLabel(identifier : GLenum, name : GLuint, buf_size : GLsizei, length : GLsizei*, label : GLchar*)
  fun object_ptr_label = glObjectPtrLabel(ptr : Void*, length : GLsizei, label : GLchar*)
  fun get_object_ptr_label = glGetObjectPtrLabel(ptr : Void*, buf_size : GLsizei, length : GLsizei*, label : GLchar*)
  fun buffer_storage = glBufferStorage(target : GLenum, size : GLsizeiptr, data : Void*, flags : GLbitfield)
  fun clear_tex_image = glClearTexImage(texture : GLuint, level : GLint, format : GLenum, type : GLenum, data : Void*)
  fun clear_tex_sub_image = glClearTexSubImage(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, data : Void*)
  fun bind_buffers_base = glBindBuffersBase(target : GLenum, first : GLuint, count : GLsizei, buffers : GLuint*)
  fun bind_buffers_range = glBindBuffersRange(target : GLenum, first : GLuint, count : GLsizei, buffers : GLuint*, offsets : GLintptr*, sizes : GLsizeiptr*)
  fun bind_textures = glBindTextures(first : GLuint, count : GLsizei, textures : GLuint*)
  fun bind_samplers = glBindSamplers(first : GLuint, count : GLsizei, samplers : GLuint*)
  fun bind_image_textures = glBindImageTextures(first : GLuint, count : GLsizei, textures : GLuint*)
  fun bind_vertex_buffers = glBindVertexBuffers(first : GLuint, count : GLsizei, buffers : GLuint*, offsets : GLintptr*, strides : GLsizei*)
  fun clip_control = glClipControl(origin : GLenum, depth : GLenum)
  fun create_transform_feedbacks = glCreateTransformFeedbacks(n : GLsizei, ids : GLuint*)
  fun transform_feedback_buffer_base = glTransformFeedbackBufferBase(xfb : GLuint, index : GLuint, buffer : GLuint)
  fun transform_feedback_buffer_range = glTransformFeedbackBufferRange(xfb : GLuint, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr)
  fun get_transform_feedbackiv = glGetTransformFeedbackiv(xfb : GLuint, pname : GLenum, param : GLint*)
  fun get_transform_feedbacki_v = glGetTransformFeedbacki_v(xfb : GLuint, pname : GLenum, index : GLuint, param : GLint*)
  fun get_transform_feedbacki64v = glGetTransformFeedbacki64_v(xfb : GLuint, pname : GLenum, index : GLuint, param : GLint64*)
  fun create_buffers = glCreateBuffers(n : GLsizei, buffers : GLuint*)
  fun named_buffer_storage = glNamedBufferStorage(buffer : GLuint, size : GLsizeiptr, data : Void*, flags : GLbitfield)
  fun named_buffer_data = glNamedBufferData(buffer : GLuint, size : GLsizeiptr, data : Void*, usage : GLenum)
  fun named_buffer_sub_data = glNamedBufferSubData(buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : Void*)
  fun copy_named_buffer_sub_data = glCopyNamedBufferSubData(read_buffer : GLuint, write_buffer : GLuint, read_offset : GLintptr, write_offset : GLintptr, size : GLsizeiptr)
  fun clear_named_buffer_data = glClearNamedBufferData(buffer : GLuint, internalformat : GLenum, format : GLenum, type : GLenum, data : Void*)
  fun clear_named_buffer_sub_data = glClearNamedBufferSubData(buffer : GLuint, internalformat : GLenum, offset : GLintptr, size : GLsizeiptr, format : GLenum, type : GLenum, data : Void*)
  fun map_named_buffer = glMapNamedBuffer(buffer : GLuint, access : GLenum) : Void*
  fun map_named_buffer_range = glMapNamedBufferRange(buffer : GLuint, offset : GLintptr, length : GLsizeiptr, access : GLbitfield) : Void*
  fun unmap_named_buffer = glUnmapNamedBuffer(buffer : GLuint) : GLboolean
  fun flush_mapped_named_buffer_range = glFlushMappedNamedBufferRange(buffer : GLuint, offset : GLintptr, length : GLsizeiptr)
  fun get_named_buffer_parameteriv = glGetNamedBufferParameteriv(buffer : GLuint, pname : GLenum, params : GLint*)
  fun get_named_buffer_parameteri64v = glGetNamedBufferParameteri64v(buffer : GLuint, pname : GLenum, params : GLint64*)
  fun get_named_buffer_pointerv = glGetNamedBufferPointerv(buffer : GLuint, pname : GLenum, params : Void**)
  fun get_named_buffer_sub_data = glGetNamedBufferSubData(buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : Void*)
  fun create_framebuffers = glCreateFramebuffers(n : GLsizei, framebuffers : GLuint*)
  fun named_framebuffer_renderbuffer = glNamedFramebufferRenderbuffer(framebuffer : GLuint, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint)
  fun named_framebuffer_parameteri = glNamedFramebufferParameteri(framebuffer : GLuint, pname : GLenum, param : GLint)
  fun named_framebuffer_texture = glNamedFramebufferTexture(framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint)
  fun named_framebuffer_texture_layer = glNamedFramebufferTextureLayer(framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint)
  fun named_framebuffer_draw_buffer = glNamedFramebufferDrawBuffer(framebuffer : GLuint, buf : GLenum)
  fun named_framebuffer_draw_buffers = glNamedFramebufferDrawBuffers(framebuffer : GLuint, n : GLsizei, bufs : GLenum*)
  fun named_framebuffer_read_buffer = glNamedFramebufferReadBuffer(framebuffer : GLuint, src : GLenum)
  fun invalidate_named_framebuffer_data = glInvalidateNamedFramebufferData(framebuffer : GLuint, num_attachments : GLsizei, attachments : GLenum*)
  fun invalidate_named_framebuffer_sub_data = glInvalidateNamedFramebufferSubData(framebuffer : GLuint, num_attachments : GLsizei, attachments : GLenum*, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun clear_named_framebufferiv = glClearNamedFramebufferiv(framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : GLint*)
  fun clear_named_framebufferuiv = glClearNamedFramebufferuiv(framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : GLuint*)
  fun clear_named_framebufferfv = glClearNamedFramebufferfv(framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, value : GLfloat*)
  fun clear_named_framebufferfi = glClearNamedFramebufferfi(framebuffer : GLuint, buffer : GLenum, drawbuffer : GLint, depth : GLfloat, stencil : GLint)
  fun blit_named_framebuffer = glBlitNamedFramebuffer(read_framebuffer : GLuint, draw_framebuffer : GLuint, src_x0 : GLint, src_y0 : GLint, src_x1 : GLint, src_y1 : GLint, dst_x0 : GLint, dst_y0 : GLint, dst_x1 : GLint, dst_y1 : GLint, mask : GLbitfield, filter : GLenum)
  fun check_named_framebuffer_status = glCheckNamedFramebufferStatus(framebuffer : GLuint, target : GLenum) : GLenum
  fun get_named_framebuffer_parameteriv = glGetNamedFramebufferParameteriv(framebuffer : GLuint, pname : GLenum, param : GLint*)
  fun get_named_framebuffer_attachment_parameteriv = glGetNamedFramebufferAttachmentParameteriv(framebuffer : GLuint, attachment : GLenum, pname : GLenum, params : GLint*)
  fun create_renderbuffers = glCreateRenderbuffers(n : GLsizei, renderbuffers : GLuint*)
  fun named_renderbuffer_storage = glNamedRenderbufferStorage(renderbuffer : GLuint, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun named_renderbuffer_storage_multisample = glNamedRenderbufferStorageMultisample(renderbuffer : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun get_named_renderbuffer_parameteriv = glGetNamedRenderbufferParameteriv(renderbuffer : GLuint, pname : GLenum, params : GLint*)
  fun create_textures = glCreateTextures(target : GLenum, n : GLsizei, textures : GLuint*)
  fun texture_buffer = glTextureBuffer(texture : GLuint, internalformat : GLenum, buffer : GLuint)
  fun texture_buffer_range = glTextureBufferRange(texture : GLuint, internalformat : GLenum, buffer : GLuint, offset : GLintptr, size : GLsizeiptr)
  fun texture_storage1d = glTextureStorage1D(texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei)
  fun texture_storage2d = glTextureStorage2D(texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun texture_storage3d = glTextureStorage3D(texture : GLuint, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei)
  fun texture_storage2d_multisample = glTextureStorage2DMultisample(texture : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean)
  fun texture_storage3d_multisample = glTextureStorage3DMultisample(texture : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean)
  fun texture_sub_image1d = glTextureSubImage1D(texture : GLuint, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun texture_sub_image2d = glTextureSubImage2D(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun texture_sub_image3d = glTextureSubImage3D(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun compressed_texture_sub_image1d = glCompressedTextureSubImage1D(texture : GLuint, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun compressed_texture_sub_image2d = glCompressedTextureSubImage2D(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun compressed_texture_sub_image3d = glCompressedTextureSubImage3D(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun copy_texture_sub_image1d = glCopyTextureSubImage1D(texture : GLuint, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei)
  fun copy_texture_sub_image2d = glCopyTextureSubImage2D(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun copy_texture_sub_image3d = glCopyTextureSubImage3D(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun texture_parameterf = glTextureParameterf(texture : GLuint, pname : GLenum, param : GLfloat)
  fun texture_parameterfv = glTextureParameterfv(texture : GLuint, pname : GLenum, param : GLfloat*)
  fun texture_parameteri = glTextureParameteri(texture : GLuint, pname : GLenum, param : GLint)
  fun texture_parameter_iiv = glTextureParameterIiv(texture : GLuint, pname : GLenum, params : GLint*)
  fun texture_parameter_iuiv = glTextureParameterIuiv(texture : GLuint, pname : GLenum, params : GLuint*)
  fun texture_parameteriv = glTextureParameteriv(texture : GLuint, pname : GLenum, param : GLint*)
  fun generate_texture_mipmap = glGenerateTextureMipmap(texture : GLuint)
  fun bind_texture_unit = glBindTextureUnit(unit : GLuint, texture : GLuint)
  fun get_texture_image = glGetTextureImage(texture : GLuint, level : GLint, format : GLenum, type : GLenum, buf_size : GLsizei, pixels : Void*)
  fun get_compressed_texture_image = glGetCompressedTextureImage(texture : GLuint, level : GLint, buf_size : GLsizei, pixels : Void*)
  fun get_texture_level_parameterfv = glGetTextureLevelParameterfv(texture : GLuint, level : GLint, pname : GLenum, params : GLfloat*)
  fun get_texture_level_parameteriv = glGetTextureLevelParameteriv(texture : GLuint, level : GLint, pname : GLenum, params : GLint*)
  fun get_texture_parameterfv = glGetTextureParameterfv(texture : GLuint, pname : GLenum, params : GLfloat*)
  fun get_texture_parameter_iiv = glGetTextureParameterIiv(texture : GLuint, pname : GLenum, params : GLint*)
  fun get_texture_parameter_iuiv = glGetTextureParameterIuiv(texture : GLuint, pname : GLenum, params : GLuint*)
  fun get_texture_parameteriv = glGetTextureParameteriv(texture : GLuint, pname : GLenum, params : GLint*)
  fun create_vertex_arrays = glCreateVertexArrays(n : GLsizei, arrays : GLuint*)
  fun disable_vertex_array_attrib = glDisableVertexArrayAttrib(vaobj : GLuint, index : GLuint)
  fun enable_vertex_array_attrib = glEnableVertexArrayAttrib(vaobj : GLuint, index : GLuint)
  fun vertex_array_element_buffer = glVertexArrayElementBuffer(vaobj : GLuint, buffer : GLuint)
  fun vertex_array_vertex_buffer = glVertexArrayVertexBuffer(vaobj : GLuint, bindingindex : GLuint, buffer : GLuint, offset : GLintptr, stride : GLsizei)
  fun vertex_array_vertex_buffers = glVertexArrayVertexBuffers(vaobj : GLuint, first : GLuint, count : GLsizei, buffers : GLuint*, offsets : GLintptr*, strides : GLsizei*)
  fun vertex_array_attrib_binding = glVertexArrayAttribBinding(vaobj : GLuint, attribindex : GLuint, bindingindex : GLuint)
  fun vertex_array_attrib_format = glVertexArrayAttribFormat(vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, normalized : GLboolean, relativeoffset : GLuint)
  fun vertex_array_attrib_i_format = glVertexArrayAttribIFormat(vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint)
  fun vertex_array_attrib_l_format = glVertexArrayAttribLFormat(vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint)
  fun vertex_array_binding_divisor = glVertexArrayBindingDivisor(vaobj : GLuint, bindingindex : GLuint, divisor : GLuint)
  fun get_vertex_arrayiv = glGetVertexArrayiv(vaobj : GLuint, pname : GLenum, param : GLint*)
  fun get_vertex_array_indexediv = glGetVertexArrayIndexediv(vaobj : GLuint, index : GLuint, pname : GLenum, param : GLint*)
  fun get_vertex_array_indexed64iv = glGetVertexArrayIndexed64iv(vaobj : GLuint, index : GLuint, pname : GLenum, param : GLint64*)
  fun create_samplers = glCreateSamplers(n : GLsizei, samplers : GLuint*)
  fun create_program_pipelines = glCreateProgramPipelines(n : GLsizei, pipelines : GLuint*)
  fun create_queries = glCreateQueries(target : GLenum, n : GLsizei, ids : GLuint*)
  fun get_query_buffer_objecti64v = glGetQueryBufferObjecti64v(id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr)
  fun get_query_buffer_objectiv = glGetQueryBufferObjectiv(id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr)
  fun get_query_buffer_objectui64v = glGetQueryBufferObjectui64v(id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr)
  fun get_query_buffer_objectuiv = glGetQueryBufferObjectuiv(id : GLuint, buffer : GLuint, pname : GLenum, offset : GLintptr)
  fun memory_barrier_by_region = glMemoryBarrierByRegion(barriers : GLbitfield)
  fun get_texture_sub_image = glGetTextureSubImage(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, buf_size : GLsizei, pixels : Void*)
  fun get_compressed_texture_sub_image = glGetCompressedTextureSubImage(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, buf_size : GLsizei, pixels : Void*)
  fun get_graphics_reset_status = glGetGraphicsResetStatus : GLenum
  fun getn_compressed_tex_image = glGetnCompressedTexImage(target : GLenum, lod : GLint, buf_size : GLsizei, pixels : Void*)
  fun getn_tex_image = glGetnTexImage(target : GLenum, level : GLint, format : GLenum, type : GLenum, buf_size : GLsizei, pixels : Void*)
  fun getn_uniformdv = glGetnUniformdv(program : GLuint, location : GLint, buf_size : GLsizei, params : GLdouble*)
  fun getn_uniformfv = glGetnUniformfv(program : GLuint, location : GLint, buf_size : GLsizei, params : GLfloat*)
  fun getn_uniformiv = glGetnUniformiv(program : GLuint, location : GLint, buf_size : GLsizei, params : GLint*)
  fun getn_uniformuiv = glGetnUniformuiv(program : GLuint, location : GLint, buf_size : GLsizei, params : GLuint*)
  fun readn_pixels = glReadnPixels(x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, buf_size : GLsizei, data : Void*)
  fun texture_barrier = glTextureBarrier
  fun specialize_shader = glSpecializeShader(shader : GLuint, p_entry_point : GLchar*, num_specialization_constants : GLuint, p_constant_index : GLuint*, p_constant_value : GLuint*)
  fun multi_draw_arrays_indirect_count = glMultiDrawArraysIndirectCount(mode : GLenum, indirect : Void*, drawcount : GLintptr, maxdrawcount : GLsizei, stride : GLsizei)
  fun multi_draw_elements_indirect_count = glMultiDrawElementsIndirectCount(mode : GLenum, type : GLenum, indirect : Void*, drawcount : GLintptr, maxdrawcount : GLsizei, stride : GLsizei)
  fun polygon_offset_clamp = glPolygonOffsetClamp(factor : GLfloat, units : GLfloat, clamp : GLfloat)
  fun primitive_bounding_box_arb = glPrimitiveBoundingBoxARB(min_x : GLfloat, min_y : GLfloat, min_z : GLfloat, min_w : GLfloat, max_x : GLfloat, max_y : GLfloat, max_z : GLfloat, max_w : GLfloat)
  fun get_texture_handle_arb = glGetTextureHandleARB(texture : GLuint) : GLuint64
  fun get_texture_sampler_handle_arb = glGetTextureSamplerHandleARB(texture : GLuint, sampler : GLuint) : GLuint64
  fun make_texture_handle_resident_arb = glMakeTextureHandleResidentARB(handle : GLuint64)
  fun make_texture_handle_non_resident_arb = glMakeTextureHandleNonResidentARB(handle : GLuint64)
  fun get_image_handle_arb = glGetImageHandleARB(texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, format : GLenum) : GLuint64
  fun make_image_handle_resident_arb = glMakeImageHandleResidentARB(handle : GLuint64, access : GLenum)
  fun make_image_handle_non_resident_arb = glMakeImageHandleNonResidentARB(handle : GLuint64)
  fun uniform_handleui64arb = glUniformHandleui64ARB(location : GLint, value : GLuint64)
  fun uniform_handleui64v_arb = glUniformHandleui64vARB(location : GLint, count : GLsizei, value : GLuint64*)
  fun program_uniform_handleui64arb = glProgramUniformHandleui64ARB(program : GLuint, location : GLint, value : GLuint64)
  fun program_uniform_handleui64v_arb = glProgramUniformHandleui64vARB(program : GLuint, location : GLint, count : GLsizei, values : GLuint64*)
  fun is_texture_handle_resident_arb = glIsTextureHandleResidentARB(handle : GLuint64) : GLboolean
  fun is_image_handle_resident_arb = glIsImageHandleResidentARB(handle : GLuint64) : GLboolean
  fun vertex_attrib_l1ui64arb = glVertexAttribL1ui64ARB(index : GLuint, x : GLuint64Ext)
  alias GLuint64Ext = Uint64T
  fun vertex_attrib_l1ui64v_arb = glVertexAttribL1ui64vARB(index : GLuint, v : GLuint64Ext*)
  fun get_vertex_attrib_lui64v_arb = glGetVertexAttribLui64vARB(index : GLuint, pname : GLenum, params : GLuint64Ext*)
  fun create_sync_from_c_levent_arb = glCreateSyncFromCLeventARB(context : X_ClContext*, event : X_ClEvent*, flags : GLbitfield) : GLsync
  alias X_ClContext = Void
  alias X_ClEvent = Void
  fun dispatch_compute_group_size_arb = glDispatchComputeGroupSizeARB(num_groups_x : GLuint, num_groups_y : GLuint, num_groups_z : GLuint, group_size_x : GLuint, group_size_y : GLuint, group_size_z : GLuint)
  fun debug_message_control_arb = glDebugMessageControlARB(source : GLenum, type : GLenum, severity : GLenum, count : GLsizei, ids : GLuint*, enabled : GLboolean)
  fun debug_message_insert_arb = glDebugMessageInsertARB(source : GLenum, type : GLenum, id : GLuint, severity : GLenum, length : GLsizei, buf : GLchar*)
  fun debug_message_callback_arb = glDebugMessageCallbackARB(callback : Gldebugprocarb, user_param : Void*)
  alias Gldebugprocarb = (GLenum, GLenum, GLuint, GLenum, GLsizei, GLchar*, Void* -> Void)
  fun get_debug_message_log_arb = glGetDebugMessageLogARB(count : GLuint, buf_size : GLsizei, sources : GLenum*, types : GLenum*, ids : GLuint*, severities : GLenum*, lengths : GLsizei*, message_log : GLchar*) : GLuint
  fun blend_equationi_arb = glBlendEquationiARB(buf : GLuint, mode : GLenum)
  fun blend_equation_separatei_arb = glBlendEquationSeparateiARB(buf : GLuint, mode_rgb : GLenum, mode_alpha : GLenum)
  fun blend_funci_arb = glBlendFunciARB(buf : GLuint, src : GLenum, dst : GLenum)
  fun blend_func_separatei_arb = glBlendFuncSeparateiARB(buf : GLuint, src_rgb : GLenum, dst_rgb : GLenum, src_alpha : GLenum, dst_alpha : GLenum)
  fun draw_arrays_instanced_arb = glDrawArraysInstancedARB(mode : GLenum, first : GLint, count : GLsizei, primcount : GLsizei)
  fun draw_elements_instanced_arb = glDrawElementsInstancedARB(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*, primcount : GLsizei)
  fun program_parameteri_arb = glProgramParameteriARB(program : GLuint, pname : GLenum, value : GLint)
  fun framebuffer_texture_arb = glFramebufferTextureARB(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint)
  fun framebuffer_texture_layer_arb = glFramebufferTextureLayerARB(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint)
  fun framebuffer_texture_face_arb = glFramebufferTextureFaceARB(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, face : GLenum)
  fun specialize_shader_arb = glSpecializeShaderARB(shader : GLuint, p_entry_point : GLchar*, num_specialization_constants : GLuint, p_constant_index : GLuint*, p_constant_value : GLuint*)
  fun uniform1i64arb = glUniform1i64ARB(location : GLint, x : GLint64)
  fun uniform2i64arb = glUniform2i64ARB(location : GLint, x : GLint64, y : GLint64)
  fun uniform3i64arb = glUniform3i64ARB(location : GLint, x : GLint64, y : GLint64, z : GLint64)
  fun uniform4i64arb = glUniform4i64ARB(location : GLint, x : GLint64, y : GLint64, z : GLint64, w : GLint64)
  fun uniform1i64v_arb = glUniform1i64vARB(location : GLint, count : GLsizei, value : GLint64*)
  fun uniform2i64v_arb = glUniform2i64vARB(location : GLint, count : GLsizei, value : GLint64*)
  fun uniform3i64v_arb = glUniform3i64vARB(location : GLint, count : GLsizei, value : GLint64*)
  fun uniform4i64v_arb = glUniform4i64vARB(location : GLint, count : GLsizei, value : GLint64*)
  fun uniform1ui64arb = glUniform1ui64ARB(location : GLint, x : GLuint64)
  fun uniform2ui64arb = glUniform2ui64ARB(location : GLint, x : GLuint64, y : GLuint64)
  fun uniform3ui64arb = glUniform3ui64ARB(location : GLint, x : GLuint64, y : GLuint64, z : GLuint64)
  fun uniform4ui64arb = glUniform4ui64ARB(location : GLint, x : GLuint64, y : GLuint64, z : GLuint64, w : GLuint64)
  fun uniform1ui64v_arb = glUniform1ui64vARB(location : GLint, count : GLsizei, value : GLuint64*)
  fun uniform2ui64v_arb = glUniform2ui64vARB(location : GLint, count : GLsizei, value : GLuint64*)
  fun uniform3ui64v_arb = glUniform3ui64vARB(location : GLint, count : GLsizei, value : GLuint64*)
  fun uniform4ui64v_arb = glUniform4ui64vARB(location : GLint, count : GLsizei, value : GLuint64*)
  fun get_uniformi64v_arb = glGetUniformi64vARB(program : GLuint, location : GLint, params : GLint64*)
  fun get_uniformui64v_arb = glGetUniformui64vARB(program : GLuint, location : GLint, params : GLuint64*)
  fun getn_uniformi64v_arb = glGetnUniformi64vARB(program : GLuint, location : GLint, buf_size : GLsizei, params : GLint64*)
  fun getn_uniformui64v_arb = glGetnUniformui64vARB(program : GLuint, location : GLint, buf_size : GLsizei, params : GLuint64*)
  fun program_uniform1i64arb = glProgramUniform1i64ARB(program : GLuint, location : GLint, x : GLint64)
  fun program_uniform2i64arb = glProgramUniform2i64ARB(program : GLuint, location : GLint, x : GLint64, y : GLint64)
  fun program_uniform3i64arb = glProgramUniform3i64ARB(program : GLuint, location : GLint, x : GLint64, y : GLint64, z : GLint64)
  fun program_uniform4i64arb = glProgramUniform4i64ARB(program : GLuint, location : GLint, x : GLint64, y : GLint64, z : GLint64, w : GLint64)
  fun program_uniform1i64v_arb = glProgramUniform1i64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLint64*)
  fun program_uniform2i64v_arb = glProgramUniform2i64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLint64*)
  fun program_uniform3i64v_arb = glProgramUniform3i64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLint64*)
  fun program_uniform4i64v_arb = glProgramUniform4i64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLint64*)
  fun program_uniform1ui64arb = glProgramUniform1ui64ARB(program : GLuint, location : GLint, x : GLuint64)
  fun program_uniform2ui64arb = glProgramUniform2ui64ARB(program : GLuint, location : GLint, x : GLuint64, y : GLuint64)
  fun program_uniform3ui64arb = glProgramUniform3ui64ARB(program : GLuint, location : GLint, x : GLuint64, y : GLuint64, z : GLuint64)
  fun program_uniform4ui64arb = glProgramUniform4ui64ARB(program : GLuint, location : GLint, x : GLuint64, y : GLuint64, z : GLuint64, w : GLuint64)
  fun program_uniform1ui64v_arb = glProgramUniform1ui64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLuint64*)
  fun program_uniform2ui64v_arb = glProgramUniform2ui64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLuint64*)
  fun program_uniform3ui64v_arb = glProgramUniform3ui64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLuint64*)
  fun program_uniform4ui64v_arb = glProgramUniform4ui64vARB(program : GLuint, location : GLint, count : GLsizei, value : GLuint64*)
  fun multi_draw_arrays_indirect_count_arb = glMultiDrawArraysIndirectCountARB(mode : GLenum, indirect : Void*, drawcount : GLintptr, maxdrawcount : GLsizei, stride : GLsizei)
  fun multi_draw_elements_indirect_count_arb = glMultiDrawElementsIndirectCountARB(mode : GLenum, type : GLenum, indirect : Void*, drawcount : GLintptr, maxdrawcount : GLsizei, stride : GLsizei)
  fun vertex_attrib_divisor_arb = glVertexAttribDivisorARB(index : GLuint, divisor : GLuint)
  fun max_shader_compiler_threads_arb = glMaxShaderCompilerThreadsARB(count : GLuint)
  fun get_graphics_reset_status_arb = glGetGraphicsResetStatusARB : GLenum
  fun getn_tex_image_arb = glGetnTexImageARB(target : GLenum, level : GLint, format : GLenum, type : GLenum, buf_size : GLsizei, img : Void*)
  fun readn_pixels_arb = glReadnPixelsARB(x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, buf_size : GLsizei, data : Void*)
  fun getn_compressed_tex_image_arb = glGetnCompressedTexImageARB(target : GLenum, lod : GLint, buf_size : GLsizei, img : Void*)
  fun getn_uniformfv_arb = glGetnUniformfvARB(program : GLuint, location : GLint, buf_size : GLsizei, params : GLfloat*)
  fun getn_uniformiv_arb = glGetnUniformivARB(program : GLuint, location : GLint, buf_size : GLsizei, params : GLint*)
  fun getn_uniformuiv_arb = glGetnUniformuivARB(program : GLuint, location : GLint, buf_size : GLsizei, params : GLuint*)
  fun getn_uniformdv_arb = glGetnUniformdvARB(program : GLuint, location : GLint, buf_size : GLsizei, params : GLdouble*)
  fun framebuffer_sample_locationsfv_arb = glFramebufferSampleLocationsfvARB(target : GLenum, start : GLuint, count : GLsizei, v : GLfloat*)
  fun named_framebuffer_sample_locationsfv_arb = glNamedFramebufferSampleLocationsfvARB(framebuffer : GLuint, start : GLuint, count : GLsizei, v : GLfloat*)
  fun evaluate_depth_values_arb = glEvaluateDepthValuesARB
  fun min_sample_shading_arb = glMinSampleShadingARB(value : GLfloat)
  fun named_string_arb = glNamedStringARB(type : GLenum, namelen : GLint, name : GLchar*, stringlen : GLint, string : GLchar*)
  fun delete_named_string_arb = glDeleteNamedStringARB(namelen : GLint, name : GLchar*)
  fun compile_shader_include_arb = glCompileShaderIncludeARB(shader : GLuint, count : GLsizei, path : GLchar**, length : GLint*)
  fun is_named_string_arb = glIsNamedStringARB(namelen : GLint, name : GLchar*) : GLboolean
  fun get_named_string_arb = glGetNamedStringARB(namelen : GLint, name : GLchar*, buf_size : GLsizei, stringlen : GLint*, string : GLchar*)
  fun get_named_stringiv_arb = glGetNamedStringivARB(namelen : GLint, name : GLchar*, pname : GLenum, params : GLint*)
  fun buffer_page_commitment_arb = glBufferPageCommitmentARB(target : GLenum, offset : GLintptr, size : GLsizeiptr, commit : GLboolean)
  fun named_buffer_page_commitment_ext = glNamedBufferPageCommitmentEXT(buffer : GLuint, offset : GLintptr, size : GLsizeiptr, commit : GLboolean)
  fun named_buffer_page_commitment_arb = glNamedBufferPageCommitmentARB(buffer : GLuint, offset : GLintptr, size : GLsizeiptr, commit : GLboolean)
  fun tex_page_commitment_arb = glTexPageCommitmentARB(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, commit : GLboolean)
  fun tex_buffer_arb = glTexBufferARB(target : GLenum, internalformat : GLenum, buffer : GLuint)
  fun blend_barrier_khr = glBlendBarrierKHR
  fun max_shader_compiler_threads_khr = glMaxShaderCompilerThreadsKHR(count : GLuint)
  fun get_perf_monitor_groups_amd = glGetPerfMonitorGroupsAMD(num_groups : GLint*, groups_size : GLsizei, groups : GLuint*)
  fun get_perf_monitor_counters_amd = glGetPerfMonitorCountersAMD(group : GLuint, num_counters : GLint*, max_active_counters : GLint*, counter_size : GLsizei, counters : GLuint*)
  fun get_perf_monitor_group_string_amd = glGetPerfMonitorGroupStringAMD(group : GLuint, buf_size : GLsizei, length : GLsizei*, group_string : GLchar*)
  fun get_perf_monitor_counter_string_amd = glGetPerfMonitorCounterStringAMD(group : GLuint, counter : GLuint, buf_size : GLsizei, length : GLsizei*, counter_string : GLchar*)
  fun get_perf_monitor_counter_info_amd = glGetPerfMonitorCounterInfoAMD(group : GLuint, counter : GLuint, pname : GLenum, data : Void*)
  fun gen_perf_monitors_amd = glGenPerfMonitorsAMD(n : GLsizei, monitors : GLuint*)
  fun delete_perf_monitors_amd = glDeletePerfMonitorsAMD(n : GLsizei, monitors : GLuint*)
  fun select_perf_monitor_counters_amd = glSelectPerfMonitorCountersAMD(monitor : GLuint, enable : GLboolean, group : GLuint, num_counters : GLint, counter_list : GLuint*)
  fun begin_perf_monitor_amd = glBeginPerfMonitorAMD(monitor : GLuint)
  fun end_perf_monitor_amd = glEndPerfMonitorAMD(monitor : GLuint)
  fun get_perf_monitor_counter_data_amd = glGetPerfMonitorCounterDataAMD(monitor : GLuint, pname : GLenum, data_size : GLsizei, data : GLuint*, bytes_written : GLint*)
  fun label_object_ext = glLabelObjectEXT(type : GLenum, object : GLuint, length : GLsizei, label : GLchar*)
  fun get_object_label_ext = glGetObjectLabelEXT(type : GLenum, object : GLuint, buf_size : GLsizei, length : GLsizei*, label : GLchar*)
  fun insert_event_marker_ext = glInsertEventMarkerEXT(length : GLsizei, marker : GLchar*)
  fun push_group_marker_ext = glPushGroupMarkerEXT(length : GLsizei, marker : GLchar*)
  fun pop_group_marker_ext = glPopGroupMarkerEXT
  fun matrix_loadf_ext = glMatrixLoadfEXT(mode : GLenum, m : GLfloat*)
  fun matrix_loadd_ext = glMatrixLoaddEXT(mode : GLenum, m : GLdouble*)
  fun matrix_multf_ext = glMatrixMultfEXT(mode : GLenum, m : GLfloat*)
  fun matrix_multd_ext = glMatrixMultdEXT(mode : GLenum, m : GLdouble*)
  fun matrix_load_identity_ext = glMatrixLoadIdentityEXT(mode : GLenum)
  fun matrix_rotatef_ext = glMatrixRotatefEXT(mode : GLenum, angle : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun matrix_rotated_ext = glMatrixRotatedEXT(mode : GLenum, angle : GLdouble, x : GLdouble, y : GLdouble, z : GLdouble)
  fun matrix_scalef_ext = glMatrixScalefEXT(mode : GLenum, x : GLfloat, y : GLfloat, z : GLfloat)
  fun matrix_scaled_ext = glMatrixScaledEXT(mode : GLenum, x : GLdouble, y : GLdouble, z : GLdouble)
  fun matrix_translatef_ext = glMatrixTranslatefEXT(mode : GLenum, x : GLfloat, y : GLfloat, z : GLfloat)
  fun matrix_translated_ext = glMatrixTranslatedEXT(mode : GLenum, x : GLdouble, y : GLdouble, z : GLdouble)
  fun matrix_frustum_ext = glMatrixFrustumEXT(mode : GLenum, left : GLdouble, right : GLdouble, bottom : GLdouble, top : GLdouble, z_near : GLdouble, z_far : GLdouble)
  fun matrix_ortho_ext = glMatrixOrthoEXT(mode : GLenum, left : GLdouble, right : GLdouble, bottom : GLdouble, top : GLdouble, z_near : GLdouble, z_far : GLdouble)
  fun matrix_pop_ext = glMatrixPopEXT(mode : GLenum)
  fun matrix_push_ext = glMatrixPushEXT(mode : GLenum)
  fun client_attrib_default_ext = glClientAttribDefaultEXT(mask : GLbitfield)
  fun push_client_attrib_default_ext = glPushClientAttribDefaultEXT(mask : GLbitfield)
  fun texture_parameterf_ext = glTextureParameterfEXT(texture : GLuint, target : GLenum, pname : GLenum, param : GLfloat)
  fun texture_parameterfv_ext = glTextureParameterfvEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLfloat*)
  fun texture_parameteri_ext = glTextureParameteriEXT(texture : GLuint, target : GLenum, pname : GLenum, param : GLint)
  fun texture_parameteriv_ext = glTextureParameterivEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLint*)
  fun texture_image1dext = glTextureImage1DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun texture_image2dext = glTextureImage2DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, height : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun texture_sub_image1dext = glTextureSubImage1DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun texture_sub_image2dext = glTextureSubImage2DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun copy_texture_image1dext = glCopyTextureImage1DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, border : GLint)
  fun copy_texture_image2dext = glCopyTextureImage2DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, border : GLint)
  fun copy_texture_sub_image1dext = glCopyTextureSubImage1DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei)
  fun copy_texture_sub_image2dext = glCopyTextureSubImage2DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun get_texture_image_ext = glGetTextureImageEXT(texture : GLuint, target : GLenum, level : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun get_texture_parameterfv_ext = glGetTextureParameterfvEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_texture_parameteriv_ext = glGetTextureParameterivEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLint*)
  fun get_texture_level_parameterfv_ext = glGetTextureLevelParameterfvEXT(texture : GLuint, target : GLenum, level : GLint, pname : GLenum, params : GLfloat*)
  fun get_texture_level_parameteriv_ext = glGetTextureLevelParameterivEXT(texture : GLuint, target : GLenum, level : GLint, pname : GLenum, params : GLint*)
  fun texture_image3dext = glTextureImage3DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun texture_sub_image3dext = glTextureSubImage3DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun copy_texture_sub_image3dext = glCopyTextureSubImage3DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun bind_multi_texture_ext = glBindMultiTextureEXT(texunit : GLenum, target : GLenum, texture : GLuint)
  fun multi_tex_coord_pointer_ext = glMultiTexCoordPointerEXT(texunit : GLenum, size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun multi_tex_envf_ext = glMultiTexEnvfEXT(texunit : GLenum, target : GLenum, pname : GLenum, param : GLfloat)
  fun multi_tex_envfv_ext = glMultiTexEnvfvEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLfloat*)
  fun multi_tex_envi_ext = glMultiTexEnviEXT(texunit : GLenum, target : GLenum, pname : GLenum, param : GLint)
  fun multi_tex_enviv_ext = glMultiTexEnvivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLint*)
  fun multi_tex_gend_ext = glMultiTexGendEXT(texunit : GLenum, coord : GLenum, pname : GLenum, param : GLdouble)
  fun multi_tex_gendv_ext = glMultiTexGendvEXT(texunit : GLenum, coord : GLenum, pname : GLenum, params : GLdouble*)
  fun multi_tex_genf_ext = glMultiTexGenfEXT(texunit : GLenum, coord : GLenum, pname : GLenum, param : GLfloat)
  fun multi_tex_genfv_ext = glMultiTexGenfvEXT(texunit : GLenum, coord : GLenum, pname : GLenum, params : GLfloat*)
  fun multi_tex_geni_ext = glMultiTexGeniEXT(texunit : GLenum, coord : GLenum, pname : GLenum, param : GLint)
  fun multi_tex_geniv_ext = glMultiTexGenivEXT(texunit : GLenum, coord : GLenum, pname : GLenum, params : GLint*)
  fun get_multi_tex_envfv_ext = glGetMultiTexEnvfvEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_multi_tex_enviv_ext = glGetMultiTexEnvivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLint*)
  fun get_multi_tex_gendv_ext = glGetMultiTexGendvEXT(texunit : GLenum, coord : GLenum, pname : GLenum, params : GLdouble*)
  fun get_multi_tex_genfv_ext = glGetMultiTexGenfvEXT(texunit : GLenum, coord : GLenum, pname : GLenum, params : GLfloat*)
  fun get_multi_tex_geniv_ext = glGetMultiTexGenivEXT(texunit : GLenum, coord : GLenum, pname : GLenum, params : GLint*)
  fun multi_tex_parameteri_ext = glMultiTexParameteriEXT(texunit : GLenum, target : GLenum, pname : GLenum, param : GLint)
  fun multi_tex_parameteriv_ext = glMultiTexParameterivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLint*)
  fun multi_tex_parameterf_ext = glMultiTexParameterfEXT(texunit : GLenum, target : GLenum, pname : GLenum, param : GLfloat)
  fun multi_tex_parameterfv_ext = glMultiTexParameterfvEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLfloat*)
  fun multi_tex_image1dext = glMultiTexImage1DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun multi_tex_image2dext = glMultiTexImage2DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, height : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun multi_tex_sub_image1dext = glMultiTexSubImage1DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun multi_tex_sub_image2dext = glMultiTexSubImage2DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun copy_multi_tex_image1dext = glCopyMultiTexImage1DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, border : GLint)
  fun copy_multi_tex_image2dext = glCopyMultiTexImage2DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, border : GLint)
  fun copy_multi_tex_sub_image1dext = glCopyMultiTexSubImage1DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei)
  fun copy_multi_tex_sub_image2dext = glCopyMultiTexSubImage2DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun get_multi_tex_image_ext = glGetMultiTexImageEXT(texunit : GLenum, target : GLenum, level : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun get_multi_tex_parameterfv_ext = glGetMultiTexParameterfvEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_multi_tex_parameteriv_ext = glGetMultiTexParameterivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLint*)
  fun get_multi_tex_level_parameterfv_ext = glGetMultiTexLevelParameterfvEXT(texunit : GLenum, target : GLenum, level : GLint, pname : GLenum, params : GLfloat*)
  fun get_multi_tex_level_parameteriv_ext = glGetMultiTexLevelParameterivEXT(texunit : GLenum, target : GLenum, level : GLint, pname : GLenum, params : GLint*)
  fun multi_tex_image3dext = glMultiTexImage3DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun multi_tex_sub_image3dext = glMultiTexSubImage3DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun copy_multi_tex_sub_image3dext = glCopyMultiTexSubImage3DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun enable_client_state_indexed_ext = glEnableClientStateIndexedEXT(array : GLenum, index : GLuint)
  fun disable_client_state_indexed_ext = glDisableClientStateIndexedEXT(array : GLenum, index : GLuint)
  fun get_float_indexedv_ext = glGetFloatIndexedvEXT(target : GLenum, index : GLuint, data : GLfloat*)
  fun get_double_indexedv_ext = glGetDoubleIndexedvEXT(target : GLenum, index : GLuint, data : GLdouble*)
  fun get_pointer_indexedv_ext = glGetPointerIndexedvEXT(target : GLenum, index : GLuint, data : Void**)
  fun enable_indexed_ext = glEnableIndexedEXT(target : GLenum, index : GLuint)
  fun disable_indexed_ext = glDisableIndexedEXT(target : GLenum, index : GLuint)
  fun is_enabled_indexed_ext = glIsEnabledIndexedEXT(target : GLenum, index : GLuint) : GLboolean
  fun get_integer_indexedv_ext = glGetIntegerIndexedvEXT(target : GLenum, index : GLuint, data : GLint*)
  fun get_boolean_indexedv_ext = glGetBooleanIndexedvEXT(target : GLenum, index : GLuint, data : GLboolean*)
  fun compressed_texture_image3dext = glCompressedTextureImage3DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, image_size : GLsizei, bits : Void*)
  fun compressed_texture_image2dext = glCompressedTextureImage2DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, image_size : GLsizei, bits : Void*)
  fun compressed_texture_image1dext = glCompressedTextureImage1DEXT(texture : GLuint, target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, image_size : GLsizei, bits : Void*)
  fun compressed_texture_sub_image3dext = glCompressedTextureSubImage3DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, image_size : GLsizei, bits : Void*)
  fun compressed_texture_sub_image2dext = glCompressedTextureSubImage2DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, image_size : GLsizei, bits : Void*)
  fun compressed_texture_sub_image1dext = glCompressedTextureSubImage1DEXT(texture : GLuint, target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, image_size : GLsizei, bits : Void*)
  fun get_compressed_texture_image_ext = glGetCompressedTextureImageEXT(texture : GLuint, target : GLenum, lod : GLint, img : Void*)
  fun compressed_multi_tex_image3dext = glCompressedMultiTexImage3DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, image_size : GLsizei, bits : Void*)
  fun compressed_multi_tex_image2dext = glCompressedMultiTexImage2DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, image_size : GLsizei, bits : Void*)
  fun compressed_multi_tex_image1dext = glCompressedMultiTexImage1DEXT(texunit : GLenum, target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, image_size : GLsizei, bits : Void*)
  fun compressed_multi_tex_sub_image3dext = glCompressedMultiTexSubImage3DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, image_size : GLsizei, bits : Void*)
  fun compressed_multi_tex_sub_image2dext = glCompressedMultiTexSubImage2DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, image_size : GLsizei, bits : Void*)
  fun compressed_multi_tex_sub_image1dext = glCompressedMultiTexSubImage1DEXT(texunit : GLenum, target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, image_size : GLsizei, bits : Void*)
  fun get_compressed_multi_tex_image_ext = glGetCompressedMultiTexImageEXT(texunit : GLenum, target : GLenum, lod : GLint, img : Void*)
  fun matrix_load_transposef_ext = glMatrixLoadTransposefEXT(mode : GLenum, m : GLfloat*)
  fun matrix_load_transposed_ext = glMatrixLoadTransposedEXT(mode : GLenum, m : GLdouble*)
  fun matrix_mult_transposef_ext = glMatrixMultTransposefEXT(mode : GLenum, m : GLfloat*)
  fun matrix_mult_transposed_ext = glMatrixMultTransposedEXT(mode : GLenum, m : GLdouble*)
  fun named_buffer_data_ext = glNamedBufferDataEXT(buffer : GLuint, size : GLsizeiptr, data : Void*, usage : GLenum)
  fun named_buffer_sub_data_ext = glNamedBufferSubDataEXT(buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : Void*)
  fun map_named_buffer_ext = glMapNamedBufferEXT(buffer : GLuint, access : GLenum) : Void*
  fun unmap_named_buffer_ext = glUnmapNamedBufferEXT(buffer : GLuint) : GLboolean
  fun get_named_buffer_parameteriv_ext = glGetNamedBufferParameterivEXT(buffer : GLuint, pname : GLenum, params : GLint*)
  fun get_named_buffer_pointerv_ext = glGetNamedBufferPointervEXT(buffer : GLuint, pname : GLenum, params : Void**)
  fun get_named_buffer_sub_data_ext = glGetNamedBufferSubDataEXT(buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : Void*)
  fun program_uniform1f_ext = glProgramUniform1fEXT(program : GLuint, location : GLint, v0 : GLfloat)
  fun program_uniform2f_ext = glProgramUniform2fEXT(program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat)
  fun program_uniform3f_ext = glProgramUniform3fEXT(program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat)
  fun program_uniform4f_ext = glProgramUniform4fEXT(program : GLuint, location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat)
  fun program_uniform1i_ext = glProgramUniform1iEXT(program : GLuint, location : GLint, v0 : GLint)
  fun program_uniform2i_ext = glProgramUniform2iEXT(program : GLuint, location : GLint, v0 : GLint, v1 : GLint)
  fun program_uniform3i_ext = glProgramUniform3iEXT(program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint)
  fun program_uniform4i_ext = glProgramUniform4iEXT(program : GLuint, location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint)
  fun program_uniform1fv_ext = glProgramUniform1fvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform2fv_ext = glProgramUniform2fvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform3fv_ext = glProgramUniform3fvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform4fv_ext = glProgramUniform4fvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLfloat*)
  fun program_uniform1iv_ext = glProgramUniform1ivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform2iv_ext = glProgramUniform2ivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform3iv_ext = glProgramUniform3ivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform4iv_ext = glProgramUniform4ivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLint*)
  fun program_uniform_matrix2fv_ext = glProgramUniformMatrix2fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix3fv_ext = glProgramUniformMatrix3fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix4fv_ext = glProgramUniformMatrix4fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix2x3fv_ext = glProgramUniformMatrix2x3fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix3x2fv_ext = glProgramUniformMatrix3x2fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix2x4fv_ext = glProgramUniformMatrix2x4fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix4x2fv_ext = glProgramUniformMatrix4x2fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix3x4fv_ext = glProgramUniformMatrix3x4fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun program_uniform_matrix4x3fv_ext = glProgramUniformMatrix4x3fvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun texture_buffer_ext = glTextureBufferEXT(texture : GLuint, target : GLenum, internalformat : GLenum, buffer : GLuint)
  fun multi_tex_buffer_ext = glMultiTexBufferEXT(texunit : GLenum, target : GLenum, internalformat : GLenum, buffer : GLuint)
  fun texture_parameter_iiv_ext = glTextureParameterIivEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLint*)
  fun texture_parameter_iuiv_ext = glTextureParameterIuivEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLuint*)
  fun get_texture_parameter_iiv_ext = glGetTextureParameterIivEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLint*)
  fun get_texture_parameter_iuiv_ext = glGetTextureParameterIuivEXT(texture : GLuint, target : GLenum, pname : GLenum, params : GLuint*)
  fun multi_tex_parameter_iiv_ext = glMultiTexParameterIivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLint*)
  fun multi_tex_parameter_iuiv_ext = glMultiTexParameterIuivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLuint*)
  fun get_multi_tex_parameter_iiv_ext = glGetMultiTexParameterIivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLint*)
  fun get_multi_tex_parameter_iuiv_ext = glGetMultiTexParameterIuivEXT(texunit : GLenum, target : GLenum, pname : GLenum, params : GLuint*)
  fun program_uniform1ui_ext = glProgramUniform1uiEXT(program : GLuint, location : GLint, v0 : GLuint)
  fun program_uniform2ui_ext = glProgramUniform2uiEXT(program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint)
  fun program_uniform3ui_ext = glProgramUniform3uiEXT(program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint)
  fun program_uniform4ui_ext = glProgramUniform4uiEXT(program : GLuint, location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint)
  fun program_uniform1uiv_ext = glProgramUniform1uivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun program_uniform2uiv_ext = glProgramUniform2uivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun program_uniform3uiv_ext = glProgramUniform3uivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun program_uniform4uiv_ext = glProgramUniform4uivEXT(program : GLuint, location : GLint, count : GLsizei, value : GLuint*)
  fun named_program_local_parameters4fv_ext = glNamedProgramLocalParameters4fvEXT(program : GLuint, target : GLenum, index : GLuint, count : GLsizei, params : GLfloat*)
  fun named_program_local_parameter_i4i_ext = glNamedProgramLocalParameterI4iEXT(program : GLuint, target : GLenum, index : GLuint, x : GLint, y : GLint, z : GLint, w : GLint)
  fun named_program_local_parameter_i4iv_ext = glNamedProgramLocalParameterI4ivEXT(program : GLuint, target : GLenum, index : GLuint, params : GLint*)
  fun named_program_local_parameters_i4iv_ext = glNamedProgramLocalParametersI4ivEXT(program : GLuint, target : GLenum, index : GLuint, count : GLsizei, params : GLint*)
  fun named_program_local_parameter_i4ui_ext = glNamedProgramLocalParameterI4uiEXT(program : GLuint, target : GLenum, index : GLuint, x : GLuint, y : GLuint, z : GLuint, w : GLuint)
  fun named_program_local_parameter_i4uiv_ext = glNamedProgramLocalParameterI4uivEXT(program : GLuint, target : GLenum, index : GLuint, params : GLuint*)
  fun named_program_local_parameters_i4uiv_ext = glNamedProgramLocalParametersI4uivEXT(program : GLuint, target : GLenum, index : GLuint, count : GLsizei, params : GLuint*)
  fun get_named_program_local_parameter_iiv_ext = glGetNamedProgramLocalParameterIivEXT(program : GLuint, target : GLenum, index : GLuint, params : GLint*)
  fun get_named_program_local_parameter_iuiv_ext = glGetNamedProgramLocalParameterIuivEXT(program : GLuint, target : GLenum, index : GLuint, params : GLuint*)
  fun enable_client_statei_ext = glEnableClientStateiEXT(array : GLenum, index : GLuint)
  fun disable_client_statei_ext = glDisableClientStateiEXT(array : GLenum, index : GLuint)
  fun get_floati_v_ext = glGetFloati_vEXT(pname : GLenum, index : GLuint, params : GLfloat*)
  fun get_doublei_v_ext = glGetDoublei_vEXT(pname : GLenum, index : GLuint, params : GLdouble*)
  fun get_pointeri_v_ext = glGetPointeri_vEXT(pname : GLenum, index : GLuint, params : Void**)
  fun named_program_string_ext = glNamedProgramStringEXT(program : GLuint, target : GLenum, format : GLenum, len : GLsizei, string : Void*)
  fun named_program_local_parameter4d_ext = glNamedProgramLocalParameter4dEXT(program : GLuint, target : GLenum, index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun named_program_local_parameter4dv_ext = glNamedProgramLocalParameter4dvEXT(program : GLuint, target : GLenum, index : GLuint, params : GLdouble*)
  fun named_program_local_parameter4f_ext = glNamedProgramLocalParameter4fEXT(program : GLuint, target : GLenum, index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun named_program_local_parameter4fv_ext = glNamedProgramLocalParameter4fvEXT(program : GLuint, target : GLenum, index : GLuint, params : GLfloat*)
  fun get_named_program_local_parameterdv_ext = glGetNamedProgramLocalParameterdvEXT(program : GLuint, target : GLenum, index : GLuint, params : GLdouble*)
  fun get_named_program_local_parameterfv_ext = glGetNamedProgramLocalParameterfvEXT(program : GLuint, target : GLenum, index : GLuint, params : GLfloat*)
  fun get_named_programiv_ext = glGetNamedProgramivEXT(program : GLuint, target : GLenum, pname : GLenum, params : GLint*)
  fun get_named_program_string_ext = glGetNamedProgramStringEXT(program : GLuint, target : GLenum, pname : GLenum, string : Void*)
  fun named_renderbuffer_storage_ext = glNamedRenderbufferStorageEXT(renderbuffer : GLuint, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun get_named_renderbuffer_parameteriv_ext = glGetNamedRenderbufferParameterivEXT(renderbuffer : GLuint, pname : GLenum, params : GLint*)
  fun named_renderbuffer_storage_multisample_ext = glNamedRenderbufferStorageMultisampleEXT(renderbuffer : GLuint, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun named_renderbuffer_storage_multisample_coverage_ext = glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer : GLuint, coverage_samples : GLsizei, color_samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun check_named_framebuffer_status_ext = glCheckNamedFramebufferStatusEXT(framebuffer : GLuint, target : GLenum) : GLenum
  fun named_framebuffer_texture1dext = glNamedFramebufferTexture1DEXT(framebuffer : GLuint, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint)
  fun named_framebuffer_texture2dext = glNamedFramebufferTexture2DEXT(framebuffer : GLuint, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint)
  fun named_framebuffer_texture3dext = glNamedFramebufferTexture3DEXT(framebuffer : GLuint, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint, zoffset : GLint)
  fun named_framebuffer_renderbuffer_ext = glNamedFramebufferRenderbufferEXT(framebuffer : GLuint, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint)
  fun get_named_framebuffer_attachment_parameteriv_ext = glGetNamedFramebufferAttachmentParameterivEXT(framebuffer : GLuint, attachment : GLenum, pname : GLenum, params : GLint*)
  fun generate_texture_mipmap_ext = glGenerateTextureMipmapEXT(texture : GLuint, target : GLenum)
  fun generate_multi_tex_mipmap_ext = glGenerateMultiTexMipmapEXT(texunit : GLenum, target : GLenum)
  fun framebuffer_draw_buffer_ext = glFramebufferDrawBufferEXT(framebuffer : GLuint, mode : GLenum)
  fun framebuffer_draw_buffers_ext = glFramebufferDrawBuffersEXT(framebuffer : GLuint, n : GLsizei, bufs : GLenum*)
  fun framebuffer_read_buffer_ext = glFramebufferReadBufferEXT(framebuffer : GLuint, mode : GLenum)
  fun get_framebuffer_parameteriv_ext = glGetFramebufferParameterivEXT(framebuffer : GLuint, pname : GLenum, params : GLint*)
  fun named_copy_buffer_sub_data_ext = glNamedCopyBufferSubDataEXT(read_buffer : GLuint, write_buffer : GLuint, read_offset : GLintptr, write_offset : GLintptr, size : GLsizeiptr)
  fun named_framebuffer_texture_ext = glNamedFramebufferTextureEXT(framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint)
  fun named_framebuffer_texture_layer_ext = glNamedFramebufferTextureLayerEXT(framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint)
  fun named_framebuffer_texture_face_ext = glNamedFramebufferTextureFaceEXT(framebuffer : GLuint, attachment : GLenum, texture : GLuint, level : GLint, face : GLenum)
  fun texture_renderbuffer_ext = glTextureRenderbufferEXT(texture : GLuint, target : GLenum, renderbuffer : GLuint)
  fun multi_tex_renderbuffer_ext = glMultiTexRenderbufferEXT(texunit : GLenum, target : GLenum, renderbuffer : GLuint)
  fun vertex_array_vertex_offset_ext = glVertexArrayVertexOffsetEXT(vaobj : GLuint, buffer : GLuint, size : GLint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_color_offset_ext = glVertexArrayColorOffsetEXT(vaobj : GLuint, buffer : GLuint, size : GLint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_edge_flag_offset_ext = glVertexArrayEdgeFlagOffsetEXT(vaobj : GLuint, buffer : GLuint, stride : GLsizei, offset : GLintptr)
  fun vertex_array_index_offset_ext = glVertexArrayIndexOffsetEXT(vaobj : GLuint, buffer : GLuint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_normal_offset_ext = glVertexArrayNormalOffsetEXT(vaobj : GLuint, buffer : GLuint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_tex_coord_offset_ext = glVertexArrayTexCoordOffsetEXT(vaobj : GLuint, buffer : GLuint, size : GLint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_multi_tex_coord_offset_ext = glVertexArrayMultiTexCoordOffsetEXT(vaobj : GLuint, buffer : GLuint, texunit : GLenum, size : GLint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_fog_coord_offset_ext = glVertexArrayFogCoordOffsetEXT(vaobj : GLuint, buffer : GLuint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_secondary_color_offset_ext = glVertexArraySecondaryColorOffsetEXT(vaobj : GLuint, buffer : GLuint, size : GLint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun vertex_array_vertex_attrib_offset_ext = glVertexArrayVertexAttribOffsetEXT(vaobj : GLuint, buffer : GLuint, index : GLuint, size : GLint, type : GLenum, normalized : GLboolean, stride : GLsizei, offset : GLintptr)
  fun vertex_array_vertex_attrib_i_offset_ext = glVertexArrayVertexAttribIOffsetEXT(vaobj : GLuint, buffer : GLuint, index : GLuint, size : GLint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun enable_vertex_array_ext = glEnableVertexArrayEXT(vaobj : GLuint, array : GLenum)
  fun disable_vertex_array_ext = glDisableVertexArrayEXT(vaobj : GLuint, array : GLenum)
  fun enable_vertex_array_attrib_ext = glEnableVertexArrayAttribEXT(vaobj : GLuint, index : GLuint)
  fun disable_vertex_array_attrib_ext = glDisableVertexArrayAttribEXT(vaobj : GLuint, index : GLuint)
  fun get_vertex_array_integerv_ext = glGetVertexArrayIntegervEXT(vaobj : GLuint, pname : GLenum, param : GLint*)
  fun get_vertex_array_pointerv_ext = glGetVertexArrayPointervEXT(vaobj : GLuint, pname : GLenum, param : Void**)
  fun get_vertex_array_integeri_v_ext = glGetVertexArrayIntegeri_vEXT(vaobj : GLuint, index : GLuint, pname : GLenum, param : GLint*)
  fun get_vertex_array_pointeri_v_ext = glGetVertexArrayPointeri_vEXT(vaobj : GLuint, index : GLuint, pname : GLenum, param : Void**)
  fun map_named_buffer_range_ext = glMapNamedBufferRangeEXT(buffer : GLuint, offset : GLintptr, length : GLsizeiptr, access : GLbitfield) : Void*
  fun flush_mapped_named_buffer_range_ext = glFlushMappedNamedBufferRangeEXT(buffer : GLuint, offset : GLintptr, length : GLsizeiptr)
  fun named_buffer_storage_ext = glNamedBufferStorageEXT(buffer : GLuint, size : GLsizeiptr, data : Void*, flags : GLbitfield)
  fun clear_named_buffer_data_ext = glClearNamedBufferDataEXT(buffer : GLuint, internalformat : GLenum, format : GLenum, type : GLenum, data : Void*)
  fun clear_named_buffer_sub_data_ext = glClearNamedBufferSubDataEXT(buffer : GLuint, internalformat : GLenum, offset : GLsizeiptr, size : GLsizeiptr, format : GLenum, type : GLenum, data : Void*)
  fun named_framebuffer_parameteri_ext = glNamedFramebufferParameteriEXT(framebuffer : GLuint, pname : GLenum, param : GLint)
  fun get_named_framebuffer_parameteriv_ext = glGetNamedFramebufferParameterivEXT(framebuffer : GLuint, pname : GLenum, params : GLint*)
  fun program_uniform1d_ext = glProgramUniform1dEXT(program : GLuint, location : GLint, x : GLdouble)
  fun program_uniform2d_ext = glProgramUniform2dEXT(program : GLuint, location : GLint, x : GLdouble, y : GLdouble)
  fun program_uniform3d_ext = glProgramUniform3dEXT(program : GLuint, location : GLint, x : GLdouble, y : GLdouble, z : GLdouble)
  fun program_uniform4d_ext = glProgramUniform4dEXT(program : GLuint, location : GLint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun program_uniform1dv_ext = glProgramUniform1dvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform2dv_ext = glProgramUniform2dvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform3dv_ext = glProgramUniform3dvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform4dv_ext = glProgramUniform4dvEXT(program : GLuint, location : GLint, count : GLsizei, value : GLdouble*)
  fun program_uniform_matrix2dv_ext = glProgramUniformMatrix2dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix3dv_ext = glProgramUniformMatrix3dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix4dv_ext = glProgramUniformMatrix4dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix2x3dv_ext = glProgramUniformMatrix2x3dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix2x4dv_ext = glProgramUniformMatrix2x4dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix3x2dv_ext = glProgramUniformMatrix3x2dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix3x4dv_ext = glProgramUniformMatrix3x4dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix4x2dv_ext = glProgramUniformMatrix4x2dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun program_uniform_matrix4x3dv_ext = glProgramUniformMatrix4x3dvEXT(program : GLuint, location : GLint, count : GLsizei, transpose : GLboolean, value : GLdouble*)
  fun texture_buffer_range_ext = glTextureBufferRangeEXT(texture : GLuint, target : GLenum, internalformat : GLenum, buffer : GLuint, offset : GLintptr, size : GLsizeiptr)
  fun texture_storage1dext = glTextureStorage1DEXT(texture : GLuint, target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei)
  fun texture_storage2dext = glTextureStorage2DEXT(texture : GLuint, target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun texture_storage3dext = glTextureStorage3DEXT(texture : GLuint, target : GLenum, levels : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei)
  fun texture_storage2d_multisample_ext = glTextureStorage2DMultisampleEXT(texture : GLuint, target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, fixedsamplelocations : GLboolean)
  fun texture_storage3d_multisample_ext = glTextureStorage3DMultisampleEXT(texture : GLuint, target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixedsamplelocations : GLboolean)
  fun vertex_array_bind_vertex_buffer_ext = glVertexArrayBindVertexBufferEXT(vaobj : GLuint, bindingindex : GLuint, buffer : GLuint, offset : GLintptr, stride : GLsizei)
  fun vertex_array_vertex_attrib_format_ext = glVertexArrayVertexAttribFormatEXT(vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, normalized : GLboolean, relativeoffset : GLuint)
  fun vertex_array_vertex_attrib_i_format_ext = glVertexArrayVertexAttribIFormatEXT(vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint)
  fun vertex_array_vertex_attrib_l_format_ext = glVertexArrayVertexAttribLFormatEXT(vaobj : GLuint, attribindex : GLuint, size : GLint, type : GLenum, relativeoffset : GLuint)
  fun vertex_array_vertex_attrib_binding_ext = glVertexArrayVertexAttribBindingEXT(vaobj : GLuint, attribindex : GLuint, bindingindex : GLuint)
  fun vertex_array_vertex_binding_divisor_ext = glVertexArrayVertexBindingDivisorEXT(vaobj : GLuint, bindingindex : GLuint, divisor : GLuint)
  fun vertex_array_vertex_attrib_l_offset_ext = glVertexArrayVertexAttribLOffsetEXT(vaobj : GLuint, buffer : GLuint, index : GLuint, size : GLint, type : GLenum, stride : GLsizei, offset : GLintptr)
  fun texture_page_commitment_ext = glTexturePageCommitmentEXT(texture : GLuint, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, commit : GLboolean)
  fun vertex_array_vertex_attrib_divisor_ext = glVertexArrayVertexAttribDivisorEXT(vaobj : GLuint, index : GLuint, divisor : GLuint)
  fun draw_arrays_instanced_ext = glDrawArraysInstancedEXT(mode : GLenum, start : GLint, count : GLsizei, primcount : GLsizei)
  fun draw_elements_instanced_ext = glDrawElementsInstancedEXT(mode : GLenum, count : GLsizei, type : GLenum, indices : Void*, primcount : GLsizei)
  fun polygon_offset_clamp_ext = glPolygonOffsetClampEXT(factor : GLfloat, units : GLfloat, clamp : GLfloat)
  fun raster_samples_ext = glRasterSamplesEXT(samples : GLuint, fixedsamplelocations : GLboolean)
  fun use_shader_program_ext = glUseShaderProgramEXT(type : GLenum, program : GLuint)
  fun active_program_ext = glActiveProgramEXT(program : GLuint)
  fun create_shader_program_ext = glCreateShaderProgramEXT(type : GLenum, string : GLchar*) : GLuint
  fun window_rectangles_ext = glWindowRectanglesEXT(mode : GLenum, count : GLsizei, box : GLint*)
  fun apply_framebuffer_attachment_cmaaintel = glApplyFramebufferAttachmentCMAAINTEL
  fun begin_perf_query_intel = glBeginPerfQueryINTEL(query_handle : GLuint)
  fun create_perf_query_intel = glCreatePerfQueryINTEL(query_id : GLuint, query_handle : GLuint*)
  fun delete_perf_query_intel = glDeletePerfQueryINTEL(query_handle : GLuint)
  fun end_perf_query_intel = glEndPerfQueryINTEL(query_handle : GLuint)
  fun get_first_perf_query_id_intel = glGetFirstPerfQueryIdINTEL(query_id : GLuint*)
  fun get_next_perf_query_id_intel = glGetNextPerfQueryIdINTEL(query_id : GLuint, next_query_id : GLuint*)
  fun get_perf_counter_info_intel = glGetPerfCounterInfoINTEL(query_id : GLuint, counter_id : GLuint, counter_name_length : GLuint, counter_name : GLchar*, counter_desc_length : GLuint, counter_desc : GLchar*, counter_offset : GLuint*, counter_data_size : GLuint*, counter_type_enum : GLuint*, counter_data_type_enum : GLuint*, raw_counter_max_value : GLuint64*)
  fun get_perf_query_data_intel = glGetPerfQueryDataINTEL(query_handle : GLuint, flags : GLuint, data_size : GLsizei, data : GLvoid*, bytes_written : GLuint*)
  alias GLvoid = Void
  fun get_perf_query_id_by_name_intel = glGetPerfQueryIdByNameINTEL(query_name : GLchar*, query_id : GLuint*)
  fun get_perf_query_info_intel = glGetPerfQueryInfoINTEL(query_id : GLuint, query_name_length : GLuint, query_name : GLchar*, data_size : GLuint*, no_counters : GLuint*, no_instances : GLuint*, caps_mask : GLuint*)
  fun multi_draw_arrays_indirect_bindless_nv = glMultiDrawArraysIndirectBindlessNV(mode : GLenum, indirect : Void*, draw_count : GLsizei, stride : GLsizei, vertex_buffer_count : GLint)
  fun multi_draw_elements_indirect_bindless_nv = glMultiDrawElementsIndirectBindlessNV(mode : GLenum, type : GLenum, indirect : Void*, draw_count : GLsizei, stride : GLsizei, vertex_buffer_count : GLint)
  fun multi_draw_arrays_indirect_bindless_count_nv = glMultiDrawArraysIndirectBindlessCountNV(mode : GLenum, indirect : Void*, draw_count : GLsizei, max_draw_count : GLsizei, stride : GLsizei, vertex_buffer_count : GLint)
  fun multi_draw_elements_indirect_bindless_count_nv = glMultiDrawElementsIndirectBindlessCountNV(mode : GLenum, type : GLenum, indirect : Void*, draw_count : GLsizei, max_draw_count : GLsizei, stride : GLsizei, vertex_buffer_count : GLint)
  fun get_texture_handle_nv = glGetTextureHandleNV(texture : GLuint) : GLuint64
  fun get_texture_sampler_handle_nv = glGetTextureSamplerHandleNV(texture : GLuint, sampler : GLuint) : GLuint64
  fun make_texture_handle_resident_nv = glMakeTextureHandleResidentNV(handle : GLuint64)
  fun make_texture_handle_non_resident_nv = glMakeTextureHandleNonResidentNV(handle : GLuint64)
  fun get_image_handle_nv = glGetImageHandleNV(texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, format : GLenum) : GLuint64
  fun make_image_handle_resident_nv = glMakeImageHandleResidentNV(handle : GLuint64, access : GLenum)
  fun make_image_handle_non_resident_nv = glMakeImageHandleNonResidentNV(handle : GLuint64)
  fun uniform_handleui64nv = glUniformHandleui64NV(location : GLint, value : GLuint64)
  fun uniform_handleui64v_nv = glUniformHandleui64vNV(location : GLint, count : GLsizei, value : GLuint64*)
  fun program_uniform_handleui64nv = glProgramUniformHandleui64NV(program : GLuint, location : GLint, value : GLuint64)
  fun program_uniform_handleui64v_nv = glProgramUniformHandleui64vNV(program : GLuint, location : GLint, count : GLsizei, values : GLuint64*)
  fun is_texture_handle_resident_nv = glIsTextureHandleResidentNV(handle : GLuint64) : GLboolean
  fun is_image_handle_resident_nv = glIsImageHandleResidentNV(handle : GLuint64) : GLboolean
  fun blend_parameteri_nv = glBlendParameteriNV(pname : GLenum, value : GLint)
  fun blend_barrier_nv = glBlendBarrierNV
  fun viewport_position_w_scale_nv = glViewportPositionWScaleNV(index : GLuint, xcoeff : GLfloat, ycoeff : GLfloat)
  fun create_states_nv = glCreateStatesNV(n : GLsizei, states : GLuint*)
  fun delete_states_nv = glDeleteStatesNV(n : GLsizei, states : GLuint*)
  fun is_state_nv = glIsStateNV(state : GLuint) : GLboolean
  fun state_capture_nv = glStateCaptureNV(state : GLuint, mode : GLenum)
  fun get_command_header_nv = glGetCommandHeaderNV(token_id : GLenum, size : GLuint) : GLuint
  fun get_stage_index_nv = glGetStageIndexNV(shadertype : GLenum) : GLushort
  fun draw_commands_nv = glDrawCommandsNV(primitive_mode : GLenum, buffer : GLuint, indirects : GLintptr*, sizes : GLsizei*, count : GLuint)
  fun draw_commands_address_nv = glDrawCommandsAddressNV(primitive_mode : GLenum, indirects : GLuint64*, sizes : GLsizei*, count : GLuint)
  fun draw_commands_states_nv = glDrawCommandsStatesNV(buffer : GLuint, indirects : GLintptr*, sizes : GLsizei*, states : GLuint*, fbos : GLuint*, count : GLuint)
  fun draw_commands_states_address_nv = glDrawCommandsStatesAddressNV(indirects : GLuint64*, sizes : GLsizei*, states : GLuint*, fbos : GLuint*, count : GLuint)
  fun create_command_lists_nv = glCreateCommandListsNV(n : GLsizei, lists : GLuint*)
  fun delete_command_lists_nv = glDeleteCommandListsNV(n : GLsizei, lists : GLuint*)
  fun is_command_list_nv = glIsCommandListNV(list : GLuint) : GLboolean
  fun list_draw_commands_states_client_nv = glListDrawCommandsStatesClientNV(list : GLuint, segment : GLuint, indirects : Void**, sizes : GLsizei*, states : GLuint*, fbos : GLuint*, count : GLuint)
  fun command_list_segments_nv = glCommandListSegmentsNV(list : GLuint, segments : GLuint)
  fun compile_command_list_nv = glCompileCommandListNV(list : GLuint)
  fun call_command_list_nv = glCallCommandListNV(list : GLuint)
  fun begin_conditional_render_nv = glBeginConditionalRenderNV(id : GLuint, mode : GLenum)
  fun end_conditional_render_nv = glEndConditionalRenderNV
  fun subpixel_precision_bias_nv = glSubpixelPrecisionBiasNV(xbits : GLuint, ybits : GLuint)
  fun conservative_raster_parameterf_nv = glConservativeRasterParameterfNV(pname : GLenum, value : GLfloat)
  fun conservative_raster_parameteri_nv = glConservativeRasterParameteriNV(pname : GLenum, param : GLint)
  fun draw_vk_image_nv = glDrawVkImageNV(vk_image : GLuint64, sampler : GLuint, x0 : GLfloat, y0 : GLfloat, x1 : GLfloat, y1 : GLfloat, z : GLfloat, s0 : GLfloat, t0 : GLfloat, s1 : GLfloat, t1 : GLfloat)
  fun get_vk_proc_addr_nv = glGetVkProcAddrNV(name : GLchar*) : Glvulkanprocnv
  alias Glvulkanprocnv = ( -> Void)
  fun wait_vk_semaphore_nv = glWaitVkSemaphoreNV(vk_semaphore : GLuint64)
  fun signal_vk_semaphore_nv = glSignalVkSemaphoreNV(vk_semaphore : GLuint64)
  fun signal_vk_fence_nv = glSignalVkFenceNV(vk_fence : GLuint64)
  fun fragment_coverage_color_nv = glFragmentCoverageColorNV(color : GLuint)
  fun coverage_modulation_table_nv = glCoverageModulationTableNV(n : GLsizei, v : GLfloat*)
  fun get_coverage_modulation_table_nv = glGetCoverageModulationTableNV(bufsize : GLsizei, v : GLfloat*)
  fun coverage_modulation_nv = glCoverageModulationNV(components : GLenum)
  fun renderbuffer_storage_multisample_coverage_nv = glRenderbufferStorageMultisampleCoverageNV(target : GLenum, coverage_samples : GLsizei, color_samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun uniform1i64nv = glUniform1i64NV(location : GLint, x : GLint64Ext)
  alias GLint64Ext = Int64T
  fun uniform2i64nv = glUniform2i64NV(location : GLint, x : GLint64Ext, y : GLint64Ext)
  fun uniform3i64nv = glUniform3i64NV(location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext)
  fun uniform4i64nv = glUniform4i64NV(location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext, w : GLint64Ext)
  fun uniform1i64v_nv = glUniform1i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform2i64v_nv = glUniform2i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform3i64v_nv = glUniform3i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform4i64v_nv = glUniform4i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform1ui64nv = glUniform1ui64NV(location : GLint, x : GLuint64Ext)
  fun uniform2ui64nv = glUniform2ui64NV(location : GLint, x : GLuint64Ext, y : GLuint64Ext)
  fun uniform3ui64nv = glUniform3ui64NV(location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext)
  fun uniform4ui64nv = glUniform4ui64NV(location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext, w : GLuint64Ext)
  fun uniform1ui64v_nv = glUniform1ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun uniform2ui64v_nv = glUniform2ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun uniform3ui64v_nv = glUniform3ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun uniform4ui64v_nv = glUniform4ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun get_uniformi64v_nv = glGetUniformi64vNV(program : GLuint, location : GLint, params : GLint64Ext*)
  fun program_uniform1i64nv = glProgramUniform1i64NV(program : GLuint, location : GLint, x : GLint64Ext)
  fun program_uniform2i64nv = glProgramUniform2i64NV(program : GLuint, location : GLint, x : GLint64Ext, y : GLint64Ext)
  fun program_uniform3i64nv = glProgramUniform3i64NV(program : GLuint, location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext)
  fun program_uniform4i64nv = glProgramUniform4i64NV(program : GLuint, location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext, w : GLint64Ext)
  fun program_uniform1i64v_nv = glProgramUniform1i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform2i64v_nv = glProgramUniform2i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform3i64v_nv = glProgramUniform3i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform4i64v_nv = glProgramUniform4i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform1ui64nv = glProgramUniform1ui64NV(program : GLuint, location : GLint, x : GLuint64Ext)
  fun program_uniform2ui64nv = glProgramUniform2ui64NV(program : GLuint, location : GLint, x : GLuint64Ext, y : GLuint64Ext)
  fun program_uniform3ui64nv = glProgramUniform3ui64NV(program : GLuint, location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext)
  fun program_uniform4ui64nv = glProgramUniform4ui64NV(program : GLuint, location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext, w : GLuint64Ext)
  fun program_uniform1ui64v_nv = glProgramUniform1ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun program_uniform2ui64v_nv = glProgramUniform2ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun program_uniform3ui64v_nv = glProgramUniform3ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun program_uniform4ui64v_nv = glProgramUniform4ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun get_internalformat_sampleiv_nv = glGetInternalformatSampleivNV(target : GLenum, internalformat : GLenum, samples : GLsizei, pname : GLenum, buf_size : GLsizei, params : GLint*)
  fun gen_paths_nv = glGenPathsNV(range : GLsizei) : GLuint
  fun delete_paths_nv = glDeletePathsNV(path : GLuint, range : GLsizei)
  fun is_path_nv = glIsPathNV(path : GLuint) : GLboolean
  fun path_commands_nv = glPathCommandsNV(path : GLuint, num_commands : GLsizei, commands : GLubyte*, num_coords : GLsizei, coord_type : GLenum, coords : Void*)
  fun path_coords_nv = glPathCoordsNV(path : GLuint, num_coords : GLsizei, coord_type : GLenum, coords : Void*)
  fun path_sub_commands_nv = glPathSubCommandsNV(path : GLuint, command_start : GLsizei, commands_to_delete : GLsizei, num_commands : GLsizei, commands : GLubyte*, num_coords : GLsizei, coord_type : GLenum, coords : Void*)
  fun path_sub_coords_nv = glPathSubCoordsNV(path : GLuint, coord_start : GLsizei, num_coords : GLsizei, coord_type : GLenum, coords : Void*)
  fun path_string_nv = glPathStringNV(path : GLuint, format : GLenum, length : GLsizei, path_string : Void*)
  fun path_glyphs_nv = glPathGlyphsNV(first_path_name : GLuint, font_target : GLenum, font_name : Void*, font_style : GLbitfield, num_glyphs : GLsizei, type : GLenum, charcodes : Void*, handle_missing_glyphs : GLenum, path_parameter_template : GLuint, em_scale : GLfloat)
  fun path_glyph_range_nv = glPathGlyphRangeNV(first_path_name : GLuint, font_target : GLenum, font_name : Void*, font_style : GLbitfield, first_glyph : GLuint, num_glyphs : GLsizei, handle_missing_glyphs : GLenum, path_parameter_template : GLuint, em_scale : GLfloat)
  fun weight_paths_nv = glWeightPathsNV(result_path : GLuint, num_paths : GLsizei, paths : GLuint*, weights : GLfloat*)
  fun copy_path_nv = glCopyPathNV(result_path : GLuint, src_path : GLuint)
  fun interpolate_paths_nv = glInterpolatePathsNV(result_path : GLuint, path_a : GLuint, path_b : GLuint, weight : GLfloat)
  fun transform_path_nv = glTransformPathNV(result_path : GLuint, src_path : GLuint, transform_type : GLenum, transform_values : GLfloat*)
  fun path_parameteriv_nv = glPathParameterivNV(path : GLuint, pname : GLenum, value : GLint*)
  fun path_parameteri_nv = glPathParameteriNV(path : GLuint, pname : GLenum, value : GLint)
  fun path_parameterfv_nv = glPathParameterfvNV(path : GLuint, pname : GLenum, value : GLfloat*)
  fun path_parameterf_nv = glPathParameterfNV(path : GLuint, pname : GLenum, value : GLfloat)
  fun path_dash_array_nv = glPathDashArrayNV(path : GLuint, dash_count : GLsizei, dash_array : GLfloat*)
  fun path_stencil_func_nv = glPathStencilFuncNV(func : GLenum, ref : GLint, mask : GLuint)
  fun path_stencil_depth_offset_nv = glPathStencilDepthOffsetNV(factor : GLfloat, units : GLfloat)
  fun stencil_fill_path_nv = glStencilFillPathNV(path : GLuint, fill_mode : GLenum, mask : GLuint)
  fun stencil_stroke_path_nv = glStencilStrokePathNV(path : GLuint, reference : GLint, mask : GLuint)
  fun stencil_fill_path_instanced_nv = glStencilFillPathInstancedNV(num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, fill_mode : GLenum, mask : GLuint, transform_type : GLenum, transform_values : GLfloat*)
  fun stencil_stroke_path_instanced_nv = glStencilStrokePathInstancedNV(num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, reference : GLint, mask : GLuint, transform_type : GLenum, transform_values : GLfloat*)
  fun path_cover_depth_func_nv = glPathCoverDepthFuncNV(func : GLenum)
  fun cover_fill_path_nv = glCoverFillPathNV(path : GLuint, cover_mode : GLenum)
  fun cover_stroke_path_nv = glCoverStrokePathNV(path : GLuint, cover_mode : GLenum)
  fun cover_fill_path_instanced_nv = glCoverFillPathInstancedNV(num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, cover_mode : GLenum, transform_type : GLenum, transform_values : GLfloat*)
  fun cover_stroke_path_instanced_nv = glCoverStrokePathInstancedNV(num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, cover_mode : GLenum, transform_type : GLenum, transform_values : GLfloat*)
  fun get_path_parameteriv_nv = glGetPathParameterivNV(path : GLuint, pname : GLenum, value : GLint*)
  fun get_path_parameterfv_nv = glGetPathParameterfvNV(path : GLuint, pname : GLenum, value : GLfloat*)
  fun get_path_commands_nv = glGetPathCommandsNV(path : GLuint, commands : GLubyte*)
  fun get_path_coords_nv = glGetPathCoordsNV(path : GLuint, coords : GLfloat*)
  fun get_path_dash_array_nv = glGetPathDashArrayNV(path : GLuint, dash_array : GLfloat*)
  fun get_path_metrics_nv = glGetPathMetricsNV(metric_query_mask : GLbitfield, num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, stride : GLsizei, metrics : GLfloat*)
  fun get_path_metric_range_nv = glGetPathMetricRangeNV(metric_query_mask : GLbitfield, first_path_name : GLuint, num_paths : GLsizei, stride : GLsizei, metrics : GLfloat*)
  fun get_path_spacing_nv = glGetPathSpacingNV(path_list_mode : GLenum, num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, advance_scale : GLfloat, kerning_scale : GLfloat, transform_type : GLenum, returned_spacing : GLfloat*)
  fun is_point_in_fill_path_nv = glIsPointInFillPathNV(path : GLuint, mask : GLuint, x : GLfloat, y : GLfloat) : GLboolean
  fun is_point_in_stroke_path_nv = glIsPointInStrokePathNV(path : GLuint, x : GLfloat, y : GLfloat) : GLboolean
  fun get_path_length_nv = glGetPathLengthNV(path : GLuint, start_segment : GLsizei, num_segments : GLsizei) : GLfloat
  fun point_along_path_nv = glPointAlongPathNV(path : GLuint, start_segment : GLsizei, num_segments : GLsizei, distance : GLfloat, x : GLfloat*, y : GLfloat*, tangent_x : GLfloat*, tangent_y : GLfloat*) : GLboolean
  fun matrix_load3x2f_nv = glMatrixLoad3x2fNV(matrix_mode : GLenum, m : GLfloat*)
  fun matrix_load3x3f_nv = glMatrixLoad3x3fNV(matrix_mode : GLenum, m : GLfloat*)
  fun matrix_load_transpose3x3f_nv = glMatrixLoadTranspose3x3fNV(matrix_mode : GLenum, m : GLfloat*)
  fun matrix_mult3x2f_nv = glMatrixMult3x2fNV(matrix_mode : GLenum, m : GLfloat*)
  fun matrix_mult3x3f_nv = glMatrixMult3x3fNV(matrix_mode : GLenum, m : GLfloat*)
  fun matrix_mult_transpose3x3f_nv = glMatrixMultTranspose3x3fNV(matrix_mode : GLenum, m : GLfloat*)
  fun stencil_then_cover_fill_path_nv = glStencilThenCoverFillPathNV(path : GLuint, fill_mode : GLenum, mask : GLuint, cover_mode : GLenum)
  fun stencil_then_cover_stroke_path_nv = glStencilThenCoverStrokePathNV(path : GLuint, reference : GLint, mask : GLuint, cover_mode : GLenum)
  fun stencil_then_cover_fill_path_instanced_nv = glStencilThenCoverFillPathInstancedNV(num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, fill_mode : GLenum, mask : GLuint, cover_mode : GLenum, transform_type : GLenum, transform_values : GLfloat*)
  fun stencil_then_cover_stroke_path_instanced_nv = glStencilThenCoverStrokePathInstancedNV(num_paths : GLsizei, path_name_type : GLenum, paths : Void*, path_base : GLuint, reference : GLint, mask : GLuint, cover_mode : GLenum, transform_type : GLenum, transform_values : GLfloat*)
  fun path_glyph_index_range_nv = glPathGlyphIndexRangeNV(font_target : GLenum, font_name : Void*, font_style : GLbitfield, path_parameter_template : GLuint, em_scale : GLfloat, base_and_count : GLuint[2]) : GLenum
  fun path_glyph_index_array_nv = glPathGlyphIndexArrayNV(first_path_name : GLuint, font_target : GLenum, font_name : Void*, font_style : GLbitfield, first_glyph_index : GLuint, num_glyphs : GLsizei, path_parameter_template : GLuint, em_scale : GLfloat) : GLenum
  fun path_memory_glyph_index_array_nv = glPathMemoryGlyphIndexArrayNV(first_path_name : GLuint, font_target : GLenum, font_size : GLsizeiptr, font_data : Void*, face_index : GLsizei, first_glyph_index : GLuint, num_glyphs : GLsizei, path_parameter_template : GLuint, em_scale : GLfloat) : GLenum
  fun program_path_fragment_input_gen_nv = glProgramPathFragmentInputGenNV(program : GLuint, location : GLint, gen_mode : GLenum, components : GLint, coeffs : GLfloat*)
  fun get_program_resourcefv_nv = glGetProgramResourcefvNV(program : GLuint, program_interface : GLenum, index : GLuint, prop_count : GLsizei, props : GLenum*, buf_size : GLsizei, length : GLsizei*, params : GLfloat*)
  fun framebuffer_sample_locationsfv_nv = glFramebufferSampleLocationsfvNV(target : GLenum, start : GLuint, count : GLsizei, v : GLfloat*)
  fun named_framebuffer_sample_locationsfv_nv = glNamedFramebufferSampleLocationsfvNV(framebuffer : GLuint, start : GLuint, count : GLsizei, v : GLfloat*)
  fun resolve_depth_values_nv = glResolveDepthValuesNV
  fun make_buffer_resident_nv = glMakeBufferResidentNV(target : GLenum, access : GLenum)
  fun make_buffer_non_resident_nv = glMakeBufferNonResidentNV(target : GLenum)
  fun is_buffer_resident_nv = glIsBufferResidentNV(target : GLenum) : GLboolean
  fun make_named_buffer_resident_nv = glMakeNamedBufferResidentNV(buffer : GLuint, access : GLenum)
  fun make_named_buffer_non_resident_nv = glMakeNamedBufferNonResidentNV(buffer : GLuint)
  fun is_named_buffer_resident_nv = glIsNamedBufferResidentNV(buffer : GLuint) : GLboolean
  fun get_buffer_parameterui64v_nv = glGetBufferParameterui64vNV(target : GLenum, pname : GLenum, params : GLuint64Ext*)
  fun get_named_buffer_parameterui64v_nv = glGetNamedBufferParameterui64vNV(buffer : GLuint, pname : GLenum, params : GLuint64Ext*)
  fun get_integerui64v_nv = glGetIntegerui64vNV(value : GLenum, result : GLuint64Ext*)
  fun uniformui64nv = glUniformui64NV(location : GLint, value : GLuint64Ext)
  fun uniformui64v_nv = glUniformui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun get_uniformui64v_nv = glGetUniformui64vNV(program : GLuint, location : GLint, params : GLuint64Ext*)
  fun program_uniformui64nv = glProgramUniformui64NV(program : GLuint, location : GLint, value : GLuint64Ext)
  fun program_uniformui64v_nv = glProgramUniformui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun texture_barrier_nv = glTextureBarrierNV
  fun vertex_attrib_l1i64nv = glVertexAttribL1i64NV(index : GLuint, x : GLint64Ext)
  fun vertex_attrib_l2i64nv = glVertexAttribL2i64NV(index : GLuint, x : GLint64Ext, y : GLint64Ext)
  fun vertex_attrib_l3i64nv = glVertexAttribL3i64NV(index : GLuint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext)
  fun vertex_attrib_l4i64nv = glVertexAttribL4i64NV(index : GLuint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext, w : GLint64Ext)
  fun vertex_attrib_l1i64v_nv = glVertexAttribL1i64vNV(index : GLuint, v : GLint64Ext*)
  fun vertex_attrib_l2i64v_nv = glVertexAttribL2i64vNV(index : GLuint, v : GLint64Ext*)
  fun vertex_attrib_l3i64v_nv = glVertexAttribL3i64vNV(index : GLuint, v : GLint64Ext*)
  fun vertex_attrib_l4i64v_nv = glVertexAttribL4i64vNV(index : GLuint, v : GLint64Ext*)
  fun vertex_attrib_l1ui64nv = glVertexAttribL1ui64NV(index : GLuint, x : GLuint64Ext)
  fun vertex_attrib_l2ui64nv = glVertexAttribL2ui64NV(index : GLuint, x : GLuint64Ext, y : GLuint64Ext)
  fun vertex_attrib_l3ui64nv = glVertexAttribL3ui64NV(index : GLuint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext)
  fun vertex_attrib_l4ui64nv = glVertexAttribL4ui64NV(index : GLuint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext, w : GLuint64Ext)
  fun vertex_attrib_l1ui64v_nv = glVertexAttribL1ui64vNV(index : GLuint, v : GLuint64Ext*)
  fun vertex_attrib_l2ui64v_nv = glVertexAttribL2ui64vNV(index : GLuint, v : GLuint64Ext*)
  fun vertex_attrib_l3ui64v_nv = glVertexAttribL3ui64vNV(index : GLuint, v : GLuint64Ext*)
  fun vertex_attrib_l4ui64v_nv = glVertexAttribL4ui64vNV(index : GLuint, v : GLuint64Ext*)
  fun get_vertex_attrib_li64v_nv = glGetVertexAttribLi64vNV(index : GLuint, pname : GLenum, params : GLint64Ext*)
  fun get_vertex_attrib_lui64v_nv = glGetVertexAttribLui64vNV(index : GLuint, pname : GLenum, params : GLuint64Ext*)
  fun vertex_attrib_l_format_nv = glVertexAttribLFormatNV(index : GLuint, size : GLint, type : GLenum, stride : GLsizei)
  fun buffer_address_range_nv = glBufferAddressRangeNV(pname : GLenum, index : GLuint, address : GLuint64Ext, length : GLsizeiptr)
  fun vertex_format_nv = glVertexFormatNV(size : GLint, type : GLenum, stride : GLsizei)
  fun normal_format_nv = glNormalFormatNV(type : GLenum, stride : GLsizei)
  fun color_format_nv = glColorFormatNV(size : GLint, type : GLenum, stride : GLsizei)
  fun index_format_nv = glIndexFormatNV(type : GLenum, stride : GLsizei)
  fun tex_coord_format_nv = glTexCoordFormatNV(size : GLint, type : GLenum, stride : GLsizei)
  fun edge_flag_format_nv = glEdgeFlagFormatNV(stride : GLsizei)
  fun secondary_color_format_nv = glSecondaryColorFormatNV(size : GLint, type : GLenum, stride : GLsizei)
  fun fog_coord_format_nv = glFogCoordFormatNV(type : GLenum, stride : GLsizei)
  fun vertex_attrib_format_nv = glVertexAttribFormatNV(index : GLuint, size : GLint, type : GLenum, normalized : GLboolean, stride : GLsizei)
  fun vertex_attrib_i_format_nv = glVertexAttribIFormatNV(index : GLuint, size : GLint, type : GLenum, stride : GLsizei)
  fun get_integerui64i_v_nv = glGetIntegerui64i_vNV(value : GLenum, index : GLuint, result : GLuint64Ext*)
  fun viewport_swizzle_nv = glViewportSwizzleNV(index : GLuint, swizzlex : GLenum, swizzley : GLenum, swizzlez : GLenum, swizzlew : GLenum)
  fun framebuffer_texture_multiview_ovr = glFramebufferTextureMultiviewOVR(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, base_view_index : GLint, num_views : GLsizei)
  fun clear_index = glClearIndex(c : GLfloat)
  fun clear_color = glClearColor(red : GLclampf, green : GLclampf, blue : GLclampf, alpha : GLclampf)
  alias GLclampf = LibC::Float
  fun clear = glClear(mask : GLbitfield)
  fun index_mask = glIndexMask(mask : GLuint)
  fun color_mask = glColorMask(red : GLboolean, green : GLboolean, blue : GLboolean, alpha : GLboolean)
  fun alpha_func = glAlphaFunc(func : GLenum, ref : GLclampf)
  fun blend_func = glBlendFunc(sfactor : GLenum, dfactor : GLenum)
  fun logic_op = glLogicOp(opcode : GLenum)
  fun cull_face = glCullFace(mode : GLenum)
  fun front_face = glFrontFace(mode : GLenum)
  fun point_size = glPointSize(size : GLfloat)
  fun line_width = glLineWidth(width : GLfloat)
  fun line_stipple = glLineStipple(factor : GLint, pattern : GLushort)
  fun polygon_mode = glPolygonMode(face : GLenum, mode : GLenum)
  fun polygon_offset = glPolygonOffset(factor : GLfloat, units : GLfloat)
  fun polygon_stipple = glPolygonStipple(mask : GLubyte*)
  fun get_polygon_stipple = glGetPolygonStipple(mask : GLubyte*)
  fun edge_flag = glEdgeFlag(flag : GLboolean)
  fun edge_flagv = glEdgeFlagv(flag : GLboolean*)
  fun scissor = glScissor(x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun clip_plane = glClipPlane(plane : GLenum, equation : GLdouble*)
  fun get_clip_plane = glGetClipPlane(plane : GLenum, equation : GLdouble*)
  fun draw_buffer = glDrawBuffer(mode : GLenum)
  fun read_buffer = glReadBuffer(mode : GLenum)
  fun enable = glEnable(cap : GLenum)
  fun disable = glDisable(cap : GLenum)
  fun is_enabled = glIsEnabled(cap : GLenum) : GLboolean
  fun enable_client_state = glEnableClientState(cap : GLenum)
  fun disable_client_state = glDisableClientState(cap : GLenum)
  fun get_booleanv = glGetBooleanv(pname : GLenum, params : GLboolean*)
  fun get_doublev = glGetDoublev(pname : GLenum, params : GLdouble*)
  fun get_floatv = glGetFloatv(pname : GLenum, params : GLfloat*)
  fun get_integerv = glGetIntegerv(pname : GLenum, params : GLint*)
  fun push_attrib = glPushAttrib(mask : GLbitfield)
  fun pop_attrib = glPopAttrib
  fun push_client_attrib = glPushClientAttrib(mask : GLbitfield)
  fun pop_client_attrib = glPopClientAttrib
  fun render_mode = glRenderMode(mode : GLenum) : GLint
  fun get_error = glGetError : GLenum
  fun get_string = glGetString(name : GLenum) : GLubyte*
  fun finish = glFinish
  fun flush = glFlush
  fun hint = glHint(target : GLenum, mode : GLenum)
  fun clear_depth = glClearDepth(depth : GLclampd)
  alias GLclampd = LibC::Double
  fun depth_func = glDepthFunc(func : GLenum)
  fun depth_mask = glDepthMask(flag : GLboolean)
  fun depth_range = glDepthRange(near_val : GLclampd, far_val : GLclampd)
  fun clear_accum = glClearAccum(red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat)
  fun accum = glAccum(op : GLenum, value : GLfloat)
  fun matrix_mode = glMatrixMode(mode : GLenum)
  fun ortho = glOrtho(left : GLdouble, right : GLdouble, bottom : GLdouble, top : GLdouble, near_val : GLdouble, far_val : GLdouble)
  fun frustum = glFrustum(left : GLdouble, right : GLdouble, bottom : GLdouble, top : GLdouble, near_val : GLdouble, far_val : GLdouble)
  fun viewport = glViewport(x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun push_matrix = glPushMatrix
  fun pop_matrix = glPopMatrix
  fun load_identity = glLoadIdentity
  fun load_matrixd = glLoadMatrixd(m : GLdouble*)
  fun load_matrixf = glLoadMatrixf(m : GLfloat*)
  fun mult_matrixd = glMultMatrixd(m : GLdouble*)
  fun mult_matrixf = glMultMatrixf(m : GLfloat*)
  fun rotated = glRotated(angle : GLdouble, x : GLdouble, y : GLdouble, z : GLdouble)
  fun rotatef = glRotatef(angle : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun scaled = glScaled(x : GLdouble, y : GLdouble, z : GLdouble)
  fun scalef = glScalef(x : GLfloat, y : GLfloat, z : GLfloat)
  fun translated = glTranslated(x : GLdouble, y : GLdouble, z : GLdouble)
  fun translatef = glTranslatef(x : GLfloat, y : GLfloat, z : GLfloat)
  fun is_list = glIsList(list : GLuint) : GLboolean
  fun delete_lists = glDeleteLists(list : GLuint, range : GLsizei)
  fun gen_lists = glGenLists(range : GLsizei) : GLuint
  fun new_list = glNewList(list : GLuint, mode : GLenum)
  fun end_list = glEndList
  fun call_list = glCallList(list : GLuint)
  fun call_lists = glCallLists(n : GLsizei, type : GLenum, lists : GLvoid*)
  fun list_base = glListBase(base : GLuint)
  fun begin = glBegin(mode : GLenum)
  fun _end = glEnd
  fun vertex2d = glVertex2d(x : GLdouble, y : GLdouble)
  fun vertex2f = glVertex2f(x : GLfloat, y : GLfloat)
  fun vertex2i = glVertex2i(x : GLint, y : GLint)
  fun vertex2s = glVertex2s(x : GLshort, y : GLshort)
  fun vertex3d = glVertex3d(x : GLdouble, y : GLdouble, z : GLdouble)
  fun vertex3f = glVertex3f(x : GLfloat, y : GLfloat, z : GLfloat)
  fun vertex3i = glVertex3i(x : GLint, y : GLint, z : GLint)
  fun vertex3s = glVertex3s(x : GLshort, y : GLshort, z : GLshort)
  fun vertex4d = glVertex4d(x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun vertex4f = glVertex4f(x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun vertex4i = glVertex4i(x : GLint, y : GLint, z : GLint, w : GLint)
  fun vertex4s = glVertex4s(x : GLshort, y : GLshort, z : GLshort, w : GLshort)
  fun vertex2dv = glVertex2dv(v : GLdouble*)
  fun vertex2fv = glVertex2fv(v : GLfloat*)
  fun vertex2iv = glVertex2iv(v : GLint*)
  fun vertex2sv = glVertex2sv(v : GLshort*)
  fun vertex3dv = glVertex3dv(v : GLdouble*)
  fun vertex3fv = glVertex3fv(v : GLfloat*)
  fun vertex3iv = glVertex3iv(v : GLint*)
  fun vertex3sv = glVertex3sv(v : GLshort*)
  fun vertex4dv = glVertex4dv(v : GLdouble*)
  fun vertex4fv = glVertex4fv(v : GLfloat*)
  fun vertex4iv = glVertex4iv(v : GLint*)
  fun vertex4sv = glVertex4sv(v : GLshort*)
  fun normal3b = glNormal3b(nx : GLbyte, ny : GLbyte, nz : GLbyte)
  fun normal3d = glNormal3d(nx : GLdouble, ny : GLdouble, nz : GLdouble)
  fun normal3f = glNormal3f(nx : GLfloat, ny : GLfloat, nz : GLfloat)
  fun normal3i = glNormal3i(nx : GLint, ny : GLint, nz : GLint)
  fun normal3s = glNormal3s(nx : GLshort, ny : GLshort, nz : GLshort)
  fun normal3bv = glNormal3bv(v : GLbyte*)
  fun normal3dv = glNormal3dv(v : GLdouble*)
  fun normal3fv = glNormal3fv(v : GLfloat*)
  fun normal3iv = glNormal3iv(v : GLint*)
  fun normal3sv = glNormal3sv(v : GLshort*)
  fun indexd = glIndexd(c : GLdouble)
  fun indexf = glIndexf(c : GLfloat)
  fun indexi = glIndexi(c : GLint)
  fun indexs = glIndexs(c : GLshort)
  fun indexub = glIndexub(c : GLubyte)
  fun indexdv = glIndexdv(c : GLdouble*)
  fun indexfv = glIndexfv(c : GLfloat*)
  fun indexiv = glIndexiv(c : GLint*)
  fun indexsv = glIndexsv(c : GLshort*)
  fun indexubv = glIndexubv(c : GLubyte*)
  fun color3b = glColor3b(red : GLbyte, green : GLbyte, blue : GLbyte)
  fun color3d = glColor3d(red : GLdouble, green : GLdouble, blue : GLdouble)
  fun color3f = glColor3f(red : GLfloat, green : GLfloat, blue : GLfloat)
  fun color3i = glColor3i(red : GLint, green : GLint, blue : GLint)
  fun color3s = glColor3s(red : GLshort, green : GLshort, blue : GLshort)
  fun color3ub = glColor3ub(red : GLubyte, green : GLubyte, blue : GLubyte)
  fun color3ui = glColor3ui(red : GLuint, green : GLuint, blue : GLuint)
  fun color3us = glColor3us(red : GLushort, green : GLushort, blue : GLushort)
  fun color4b = glColor4b(red : GLbyte, green : GLbyte, blue : GLbyte, alpha : GLbyte)
  fun color4d = glColor4d(red : GLdouble, green : GLdouble, blue : GLdouble, alpha : GLdouble)
  fun color4f = glColor4f(red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat)
  fun color4i = glColor4i(red : GLint, green : GLint, blue : GLint, alpha : GLint)
  fun color4s = glColor4s(red : GLshort, green : GLshort, blue : GLshort, alpha : GLshort)
  fun color4ub = glColor4ub(red : GLubyte, green : GLubyte, blue : GLubyte, alpha : GLubyte)
  fun color4ui = glColor4ui(red : GLuint, green : GLuint, blue : GLuint, alpha : GLuint)
  fun color4us = glColor4us(red : GLushort, green : GLushort, blue : GLushort, alpha : GLushort)
  fun color3bv = glColor3bv(v : GLbyte*)
  fun color3dv = glColor3dv(v : GLdouble*)
  fun color3fv = glColor3fv(v : GLfloat*)
  fun color3iv = glColor3iv(v : GLint*)
  fun color3sv = glColor3sv(v : GLshort*)
  fun color3ubv = glColor3ubv(v : GLubyte*)
  fun color3uiv = glColor3uiv(v : GLuint*)
  fun color3usv = glColor3usv(v : GLushort*)
  fun color4bv = glColor4bv(v : GLbyte*)
  fun color4dv = glColor4dv(v : GLdouble*)
  fun color4fv = glColor4fv(v : GLfloat*)
  fun color4iv = glColor4iv(v : GLint*)
  fun color4sv = glColor4sv(v : GLshort*)
  fun color4ubv = glColor4ubv(v : GLubyte*)
  fun color4uiv = glColor4uiv(v : GLuint*)
  fun color4usv = glColor4usv(v : GLushort*)
  fun tex_coord1d = glTexCoord1d(s : GLdouble)
  fun tex_coord1f = glTexCoord1f(s : GLfloat)
  fun tex_coord1i = glTexCoord1i(s : GLint)
  fun tex_coord1s = glTexCoord1s(s : GLshort)
  fun tex_coord2d = glTexCoord2d(s : GLdouble, t : GLdouble)
  fun tex_coord2f = glTexCoord2f(s : GLfloat, t : GLfloat)
  fun tex_coord2i = glTexCoord2i(s : GLint, t : GLint)
  fun tex_coord2s = glTexCoord2s(s : GLshort, t : GLshort)
  fun tex_coord3d = glTexCoord3d(s : GLdouble, t : GLdouble, r : GLdouble)
  fun tex_coord3f = glTexCoord3f(s : GLfloat, t : GLfloat, r : GLfloat)
  fun tex_coord3i = glTexCoord3i(s : GLint, t : GLint, r : GLint)
  fun tex_coord3s = glTexCoord3s(s : GLshort, t : GLshort, r : GLshort)
  fun tex_coord4d = glTexCoord4d(s : GLdouble, t : GLdouble, r : GLdouble, q : GLdouble)
  fun tex_coord4f = glTexCoord4f(s : GLfloat, t : GLfloat, r : GLfloat, q : GLfloat)
  fun tex_coord4i = glTexCoord4i(s : GLint, t : GLint, r : GLint, q : GLint)
  fun tex_coord4s = glTexCoord4s(s : GLshort, t : GLshort, r : GLshort, q : GLshort)
  fun tex_coord1dv = glTexCoord1dv(v : GLdouble*)
  fun tex_coord1fv = glTexCoord1fv(v : GLfloat*)
  fun tex_coord1iv = glTexCoord1iv(v : GLint*)
  fun tex_coord1sv = glTexCoord1sv(v : GLshort*)
  fun tex_coord2dv = glTexCoord2dv(v : GLdouble*)
  fun tex_coord2fv = glTexCoord2fv(v : GLfloat*)
  fun tex_coord2iv = glTexCoord2iv(v : GLint*)
  fun tex_coord2sv = glTexCoord2sv(v : GLshort*)
  fun tex_coord3dv = glTexCoord3dv(v : GLdouble*)
  fun tex_coord3fv = glTexCoord3fv(v : GLfloat*)
  fun tex_coord3iv = glTexCoord3iv(v : GLint*)
  fun tex_coord3sv = glTexCoord3sv(v : GLshort*)
  fun tex_coord4dv = glTexCoord4dv(v : GLdouble*)
  fun tex_coord4fv = glTexCoord4fv(v : GLfloat*)
  fun tex_coord4iv = glTexCoord4iv(v : GLint*)
  fun tex_coord4sv = glTexCoord4sv(v : GLshort*)
  fun raster_pos2d = glRasterPos2d(x : GLdouble, y : GLdouble)
  fun raster_pos2f = glRasterPos2f(x : GLfloat, y : GLfloat)
  fun raster_pos2i = glRasterPos2i(x : GLint, y : GLint)
  fun raster_pos2s = glRasterPos2s(x : GLshort, y : GLshort)
  fun raster_pos3d = glRasterPos3d(x : GLdouble, y : GLdouble, z : GLdouble)
  fun raster_pos3f = glRasterPos3f(x : GLfloat, y : GLfloat, z : GLfloat)
  fun raster_pos3i = glRasterPos3i(x : GLint, y : GLint, z : GLint)
  fun raster_pos3s = glRasterPos3s(x : GLshort, y : GLshort, z : GLshort)
  fun raster_pos4d = glRasterPos4d(x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun raster_pos4f = glRasterPos4f(x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun raster_pos4i = glRasterPos4i(x : GLint, y : GLint, z : GLint, w : GLint)
  fun raster_pos4s = glRasterPos4s(x : GLshort, y : GLshort, z : GLshort, w : GLshort)
  fun raster_pos2dv = glRasterPos2dv(v : GLdouble*)
  fun raster_pos2fv = glRasterPos2fv(v : GLfloat*)
  fun raster_pos2iv = glRasterPos2iv(v : GLint*)
  fun raster_pos2sv = glRasterPos2sv(v : GLshort*)
  fun raster_pos3dv = glRasterPos3dv(v : GLdouble*)
  fun raster_pos3fv = glRasterPos3fv(v : GLfloat*)
  fun raster_pos3iv = glRasterPos3iv(v : GLint*)
  fun raster_pos3sv = glRasterPos3sv(v : GLshort*)
  fun raster_pos4dv = glRasterPos4dv(v : GLdouble*)
  fun raster_pos4fv = glRasterPos4fv(v : GLfloat*)
  fun raster_pos4iv = glRasterPos4iv(v : GLint*)
  fun raster_pos4sv = glRasterPos4sv(v : GLshort*)
  fun rectd = glRectd(x1 : GLdouble, y1 : GLdouble, x2 : GLdouble, y2 : GLdouble)
  fun rectf = glRectf(x1 : GLfloat, y1 : GLfloat, x2 : GLfloat, y2 : GLfloat)
  fun recti = glRecti(x1 : GLint, y1 : GLint, x2 : GLint, y2 : GLint)
  fun rects = glRects(x1 : GLshort, y1 : GLshort, x2 : GLshort, y2 : GLshort)
  fun rectdv = glRectdv(v1 : GLdouble*, v2 : GLdouble*)
  fun rectfv = glRectfv(v1 : GLfloat*, v2 : GLfloat*)
  fun rectiv = glRectiv(v1 : GLint*, v2 : GLint*)
  fun rectsv = glRectsv(v1 : GLshort*, v2 : GLshort*)
  fun vertex_pointer = glVertexPointer(size : GLint, type : GLenum, stride : GLsizei, ptr : GLvoid*)
  fun normal_pointer = glNormalPointer(type : GLenum, stride : GLsizei, ptr : GLvoid*)
  fun color_pointer = glColorPointer(size : GLint, type : GLenum, stride : GLsizei, ptr : GLvoid*)
  fun index_pointer = glIndexPointer(type : GLenum, stride : GLsizei, ptr : GLvoid*)
  fun tex_coord_pointer = glTexCoordPointer(size : GLint, type : GLenum, stride : GLsizei, ptr : GLvoid*)
  fun edge_flag_pointer = glEdgeFlagPointer(stride : GLsizei, ptr : GLvoid*)
  fun get_pointerv = glGetPointerv(pname : GLenum, params : GLvoid**)
  fun array_element = glArrayElement(i : GLint)
  fun draw_arrays = glDrawArrays(mode : GLenum, first : GLint, count : GLsizei)
  fun draw_elements = glDrawElements(mode : GLenum, count : GLsizei, type : GLenum, indices : GLvoid*)
  fun interleaved_arrays = glInterleavedArrays(format : GLenum, stride : GLsizei, pointer : GLvoid*)
  fun shade_model = glShadeModel(mode : GLenum)
  fun lightf = glLightf(light : GLenum, pname : GLenum, param : GLfloat)
  fun lighti = glLighti(light : GLenum, pname : GLenum, param : GLint)
  fun lightfv = glLightfv(light : GLenum, pname : GLenum, params : GLfloat*)
  fun lightiv = glLightiv(light : GLenum, pname : GLenum, params : GLint*)
  fun get_lightfv = glGetLightfv(light : GLenum, pname : GLenum, params : GLfloat*)
  fun get_lightiv = glGetLightiv(light : GLenum, pname : GLenum, params : GLint*)
  fun light_modelf = glLightModelf(pname : GLenum, param : GLfloat)
  fun light_modeli = glLightModeli(pname : GLenum, param : GLint)
  fun light_modelfv = glLightModelfv(pname : GLenum, params : GLfloat*)
  fun light_modeliv = glLightModeliv(pname : GLenum, params : GLint*)
  fun materialf = glMaterialf(face : GLenum, pname : GLenum, param : GLfloat)
  fun materiali = glMateriali(face : GLenum, pname : GLenum, param : GLint)
  fun materialfv = glMaterialfv(face : GLenum, pname : GLenum, params : GLfloat*)
  fun materialiv = glMaterialiv(face : GLenum, pname : GLenum, params : GLint*)
  fun get_materialfv = glGetMaterialfv(face : GLenum, pname : GLenum, params : GLfloat*)
  fun get_materialiv = glGetMaterialiv(face : GLenum, pname : GLenum, params : GLint*)
  fun color_material = glColorMaterial(face : GLenum, mode : GLenum)
  fun pixel_zoom = glPixelZoom(xfactor : GLfloat, yfactor : GLfloat)
  fun pixel_storef = glPixelStoref(pname : GLenum, param : GLfloat)
  fun pixel_storei = glPixelStorei(pname : GLenum, param : GLint)
  fun pixel_transferf = glPixelTransferf(pname : GLenum, param : GLfloat)
  fun pixel_transferi = glPixelTransferi(pname : GLenum, param : GLint)
  fun pixel_mapfv = glPixelMapfv(map : GLenum, mapsize : GLsizei, values : GLfloat*)
  fun pixel_mapuiv = glPixelMapuiv(map : GLenum, mapsize : GLsizei, values : GLuint*)
  fun pixel_mapusv = glPixelMapusv(map : GLenum, mapsize : GLsizei, values : GLushort*)
  fun get_pixel_mapfv = glGetPixelMapfv(map : GLenum, values : GLfloat*)
  fun get_pixel_mapuiv = glGetPixelMapuiv(map : GLenum, values : GLuint*)
  fun get_pixel_mapusv = glGetPixelMapusv(map : GLenum, values : GLushort*)
  fun bitmap = glBitmap(width : GLsizei, height : GLsizei, xorig : GLfloat, yorig : GLfloat, xmove : GLfloat, ymove : GLfloat, bitmap : GLubyte*)
  fun read_pixels = glReadPixels(x : GLint, y : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun draw_pixels = glDrawPixels(width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun copy_pixels = glCopyPixels(x : GLint, y : GLint, width : GLsizei, height : GLsizei, type : GLenum)
  fun stencil_func = glStencilFunc(func : GLenum, ref : GLint, mask : GLuint)
  fun stencil_mask = glStencilMask(mask : GLuint)
  fun stencil_op = glStencilOp(fail : GLenum, zfail : GLenum, zpass : GLenum)
  fun clear_stencil = glClearStencil(s : GLint)
  fun tex_gend = glTexGend(coord : GLenum, pname : GLenum, param : GLdouble)
  fun tex_genf = glTexGenf(coord : GLenum, pname : GLenum, param : GLfloat)
  fun tex_geni = glTexGeni(coord : GLenum, pname : GLenum, param : GLint)
  fun tex_gendv = glTexGendv(coord : GLenum, pname : GLenum, params : GLdouble*)
  fun tex_genfv = glTexGenfv(coord : GLenum, pname : GLenum, params : GLfloat*)
  fun tex_geniv = glTexGeniv(coord : GLenum, pname : GLenum, params : GLint*)
  fun get_tex_gendv = glGetTexGendv(coord : GLenum, pname : GLenum, params : GLdouble*)
  fun get_tex_genfv = glGetTexGenfv(coord : GLenum, pname : GLenum, params : GLfloat*)
  fun get_tex_geniv = glGetTexGeniv(coord : GLenum, pname : GLenum, params : GLint*)
  fun tex_envf = glTexEnvf(target : GLenum, pname : GLenum, param : GLfloat)
  fun tex_envi = glTexEnvi(target : GLenum, pname : GLenum, param : GLint)
  fun tex_envfv = glTexEnvfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun tex_enviv = glTexEnviv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_tex_envfv = glGetTexEnvfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_tex_enviv = glGetTexEnviv(target : GLenum, pname : GLenum, params : GLint*)
  fun tex_parameterf = glTexParameterf(target : GLenum, pname : GLenum, param : GLfloat)
  fun tex_parameteri = glTexParameteri(target : GLenum, pname : GLenum, param : GLint)
  fun tex_parameterfv = glTexParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun tex_parameteriv = glTexParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_tex_parameterfv = glGetTexParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_tex_parameteriv = glGetTexParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun get_tex_level_parameterfv = glGetTexLevelParameterfv(target : GLenum, level : GLint, pname : GLenum, params : GLfloat*)
  fun get_tex_level_parameteriv = glGetTexLevelParameteriv(target : GLenum, level : GLint, pname : GLenum, params : GLint*)
  fun tex_image1d = glTexImage1D(target : GLenum, level : GLint, internal_format : GLint, width : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun tex_image2d = glTexImage2D(target : GLenum, level : GLint, internal_format : GLint, width : GLsizei, height : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun get_tex_image = glGetTexImage(target : GLenum, level : GLint, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun gen_textures = glGenTextures(n : GLsizei, textures : GLuint*)
  fun delete_textures = glDeleteTextures(n : GLsizei, textures : GLuint*)
  fun bind_texture = glBindTexture(target : GLenum, texture : GLuint)
  fun prioritize_textures = glPrioritizeTextures(n : GLsizei, textures : GLuint*, priorities : GLclampf*)
  fun are_textures_resident = glAreTexturesResident(n : GLsizei, textures : GLuint*, residences : GLboolean*) : GLboolean
  fun is_texture = glIsTexture(texture : GLuint) : GLboolean
  fun tex_sub_image1d = glTexSubImage1D(target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun tex_sub_image2d = glTexSubImage2D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun copy_tex_image1d = glCopyTexImage1D(target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, border : GLint)
  fun copy_tex_image2d = glCopyTexImage2D(target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, border : GLint)
  fun copy_tex_sub_image1d = glCopyTexSubImage1D(target : GLenum, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei)
  fun copy_tex_sub_image2d = glCopyTexSubImage2D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun map1d = glMap1d(target : GLenum, u1 : GLdouble, u2 : GLdouble, stride : GLint, order : GLint, points : GLdouble*)
  fun map1f = glMap1f(target : GLenum, u1 : GLfloat, u2 : GLfloat, stride : GLint, order : GLint, points : GLfloat*)
  fun map2d = glMap2d(target : GLenum, u1 : GLdouble, u2 : GLdouble, ustride : GLint, uorder : GLint, v1 : GLdouble, v2 : GLdouble, vstride : GLint, vorder : GLint, points : GLdouble*)
  fun map2f = glMap2f(target : GLenum, u1 : GLfloat, u2 : GLfloat, ustride : GLint, uorder : GLint, v1 : GLfloat, v2 : GLfloat, vstride : GLint, vorder : GLint, points : GLfloat*)
  fun get_mapdv = glGetMapdv(target : GLenum, query : GLenum, v : GLdouble*)
  fun get_mapfv = glGetMapfv(target : GLenum, query : GLenum, v : GLfloat*)
  fun get_mapiv = glGetMapiv(target : GLenum, query : GLenum, v : GLint*)
  fun eval_coord1d = glEvalCoord1d(u : GLdouble)
  fun eval_coord1f = glEvalCoord1f(u : GLfloat)
  fun eval_coord1dv = glEvalCoord1dv(u : GLdouble*)
  fun eval_coord1fv = glEvalCoord1fv(u : GLfloat*)
  fun eval_coord2d = glEvalCoord2d(u : GLdouble, v : GLdouble)
  fun eval_coord2f = glEvalCoord2f(u : GLfloat, v : GLfloat)
  fun eval_coord2dv = glEvalCoord2dv(u : GLdouble*)
  fun eval_coord2fv = glEvalCoord2fv(u : GLfloat*)
  fun map_grid1d = glMapGrid1d(un : GLint, u1 : GLdouble, u2 : GLdouble)
  fun map_grid1f = glMapGrid1f(un : GLint, u1 : GLfloat, u2 : GLfloat)
  fun map_grid2d = glMapGrid2d(un : GLint, u1 : GLdouble, u2 : GLdouble, vn : GLint, v1 : GLdouble, v2 : GLdouble)
  fun map_grid2f = glMapGrid2f(un : GLint, u1 : GLfloat, u2 : GLfloat, vn : GLint, v1 : GLfloat, v2 : GLfloat)
  fun eval_point1 = glEvalPoint1(i : GLint)
  fun eval_point2 = glEvalPoint2(i : GLint, j : GLint)
  fun eval_mesh1 = glEvalMesh1(mode : GLenum, i1 : GLint, i2 : GLint)
  fun eval_mesh2 = glEvalMesh2(mode : GLenum, i1 : GLint, i2 : GLint, j1 : GLint, j2 : GLint)
  fun fogf = glFogf(pname : GLenum, param : GLfloat)
  fun fogi = glFogi(pname : GLenum, param : GLint)
  fun fogfv = glFogfv(pname : GLenum, params : GLfloat*)
  fun fogiv = glFogiv(pname : GLenum, params : GLint*)
  fun feedback_buffer = glFeedbackBuffer(size : GLsizei, type : GLenum, buffer : GLfloat*)
  fun pass_through = glPassThrough(token : GLfloat)
  fun select_buffer = glSelectBuffer(size : GLsizei, buffer : GLuint*)
  fun init_names = glInitNames
  fun load_name = glLoadName(name : GLuint)
  fun push_name = glPushName(name : GLuint)
  fun pop_name = glPopName
  fun draw_range_elements = glDrawRangeElements(mode : GLenum, start : GLuint, _end : GLuint, count : GLsizei, type : GLenum, indices : GLvoid*)
  fun tex_image3d = glTexImage3D(target : GLenum, level : GLint, internal_format : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun tex_sub_image3d = glTexSubImage3D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : GLvoid*)
  fun copy_tex_sub_image3d = glCopyTexSubImage3D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun color_table = glColorTable(target : GLenum, internalformat : GLenum, width : GLsizei, format : GLenum, type : GLenum, table : GLvoid*)
  fun color_sub_table = glColorSubTable(target : GLenum, start : GLsizei, count : GLsizei, format : GLenum, type : GLenum, data : GLvoid*)
  fun color_table_parameteriv = glColorTableParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun color_table_parameterfv = glColorTableParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun copy_color_sub_table = glCopyColorSubTable(target : GLenum, start : GLsizei, x : GLint, y : GLint, width : GLsizei)
  fun copy_color_table = glCopyColorTable(target : GLenum, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei)
  fun get_color_table = glGetColorTable(target : GLenum, format : GLenum, type : GLenum, table : GLvoid*)
  fun get_color_table_parameterfv = glGetColorTableParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_color_table_parameteriv = glGetColorTableParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun blend_equation = glBlendEquation(mode : GLenum)
  fun blend_color = glBlendColor(red : GLclampf, green : GLclampf, blue : GLclampf, alpha : GLclampf)
  fun histogram = glHistogram(target : GLenum, width : GLsizei, internalformat : GLenum, sink : GLboolean)
  fun reset_histogram = glResetHistogram(target : GLenum)
  fun get_histogram = glGetHistogram(target : GLenum, reset : GLboolean, format : GLenum, type : GLenum, values : GLvoid*)
  fun get_histogram_parameterfv = glGetHistogramParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_histogram_parameteriv = glGetHistogramParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun minmax = glMinmax(target : GLenum, internalformat : GLenum, sink : GLboolean)
  fun reset_minmax = glResetMinmax(target : GLenum)
  fun get_minmax = glGetMinmax(target : GLenum, reset : GLboolean, format : GLenum, types : GLenum, values : GLvoid*)
  fun get_minmax_parameterfv = glGetMinmaxParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_minmax_parameteriv = glGetMinmaxParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun convolution_filter1d = glConvolutionFilter1D(target : GLenum, internalformat : GLenum, width : GLsizei, format : GLenum, type : GLenum, image : GLvoid*)
  fun convolution_filter2d = glConvolutionFilter2D(target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, image : GLvoid*)
  fun convolution_parameterf = glConvolutionParameterf(target : GLenum, pname : GLenum, params : GLfloat)
  fun convolution_parameterfv = glConvolutionParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun convolution_parameteri = glConvolutionParameteri(target : GLenum, pname : GLenum, params : GLint)
  fun convolution_parameteriv = glConvolutionParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun copy_convolution_filter1d = glCopyConvolutionFilter1D(target : GLenum, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei)
  fun copy_convolution_filter2d = glCopyConvolutionFilter2D(target : GLenum, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun get_convolution_filter = glGetConvolutionFilter(target : GLenum, format : GLenum, type : GLenum, image : GLvoid*)
  fun get_convolution_parameterfv = glGetConvolutionParameterfv(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_convolution_parameteriv = glGetConvolutionParameteriv(target : GLenum, pname : GLenum, params : GLint*)
  fun separable_filter2d = glSeparableFilter2D(target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, row : GLvoid*, column : GLvoid*)
  fun get_separable_filter = glGetSeparableFilter(target : GLenum, format : GLenum, type : GLenum, row : GLvoid*, column : GLvoid*, span : GLvoid*)
  fun active_texture = glActiveTexture(texture : GLenum)
  fun client_active_texture = glClientActiveTexture(texture : GLenum)
  fun compressed_tex_image1d = glCompressedTexImage1D(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, image_size : GLsizei, data : GLvoid*)
  fun compressed_tex_image2d = glCompressedTexImage2D(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, image_size : GLsizei, data : GLvoid*)
  fun compressed_tex_image3d = glCompressedTexImage3D(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, image_size : GLsizei, data : GLvoid*)
  fun compressed_tex_sub_image1d = glCompressedTexSubImage1D(target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, image_size : GLsizei, data : GLvoid*)
  fun compressed_tex_sub_image2d = glCompressedTexSubImage2D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, image_size : GLsizei, data : GLvoid*)
  fun compressed_tex_sub_image3d = glCompressedTexSubImage3D(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, image_size : GLsizei, data : GLvoid*)
  fun get_compressed_tex_image = glGetCompressedTexImage(target : GLenum, lod : GLint, img : GLvoid*)
  fun multi_tex_coord1d = glMultiTexCoord1d(target : GLenum, s : GLdouble)
  fun multi_tex_coord1dv = glMultiTexCoord1dv(target : GLenum, v : GLdouble*)
  fun multi_tex_coord1f = glMultiTexCoord1f(target : GLenum, s : GLfloat)
  fun multi_tex_coord1fv = glMultiTexCoord1fv(target : GLenum, v : GLfloat*)
  fun multi_tex_coord1i = glMultiTexCoord1i(target : GLenum, s : GLint)
  fun multi_tex_coord1iv = glMultiTexCoord1iv(target : GLenum, v : GLint*)
  fun multi_tex_coord1s = glMultiTexCoord1s(target : GLenum, s : GLshort)
  fun multi_tex_coord1sv = glMultiTexCoord1sv(target : GLenum, v : GLshort*)
  fun multi_tex_coord2d = glMultiTexCoord2d(target : GLenum, s : GLdouble, t : GLdouble)
  fun multi_tex_coord2dv = glMultiTexCoord2dv(target : GLenum, v : GLdouble*)
  fun multi_tex_coord2f = glMultiTexCoord2f(target : GLenum, s : GLfloat, t : GLfloat)
  fun multi_tex_coord2fv = glMultiTexCoord2fv(target : GLenum, v : GLfloat*)
  fun multi_tex_coord2i = glMultiTexCoord2i(target : GLenum, s : GLint, t : GLint)
  fun multi_tex_coord2iv = glMultiTexCoord2iv(target : GLenum, v : GLint*)
  fun multi_tex_coord2s = glMultiTexCoord2s(target : GLenum, s : GLshort, t : GLshort)
  fun multi_tex_coord2sv = glMultiTexCoord2sv(target : GLenum, v : GLshort*)
  fun multi_tex_coord3d = glMultiTexCoord3d(target : GLenum, s : GLdouble, t : GLdouble, r : GLdouble)
  fun multi_tex_coord3dv = glMultiTexCoord3dv(target : GLenum, v : GLdouble*)
  fun multi_tex_coord3f = glMultiTexCoord3f(target : GLenum, s : GLfloat, t : GLfloat, r : GLfloat)
  fun multi_tex_coord3fv = glMultiTexCoord3fv(target : GLenum, v : GLfloat*)
  fun multi_tex_coord3i = glMultiTexCoord3i(target : GLenum, s : GLint, t : GLint, r : GLint)
  fun multi_tex_coord3iv = glMultiTexCoord3iv(target : GLenum, v : GLint*)
  fun multi_tex_coord3s = glMultiTexCoord3s(target : GLenum, s : GLshort, t : GLshort, r : GLshort)
  fun multi_tex_coord3sv = glMultiTexCoord3sv(target : GLenum, v : GLshort*)
  fun multi_tex_coord4d = glMultiTexCoord4d(target : GLenum, s : GLdouble, t : GLdouble, r : GLdouble, q : GLdouble)
  fun multi_tex_coord4dv = glMultiTexCoord4dv(target : GLenum, v : GLdouble*)
  fun multi_tex_coord4f = glMultiTexCoord4f(target : GLenum, s : GLfloat, t : GLfloat, r : GLfloat, q : GLfloat)
  fun multi_tex_coord4fv = glMultiTexCoord4fv(target : GLenum, v : GLfloat*)
  fun multi_tex_coord4i = glMultiTexCoord4i(target : GLenum, s : GLint, t : GLint, r : GLint, q : GLint)
  fun multi_tex_coord4iv = glMultiTexCoord4iv(target : GLenum, v : GLint*)
  fun multi_tex_coord4s = glMultiTexCoord4s(target : GLenum, s : GLshort, t : GLshort, r : GLshort, q : GLshort)
  fun multi_tex_coord4sv = glMultiTexCoord4sv(target : GLenum, v : GLshort*)
  fun load_transpose_matrixd = glLoadTransposeMatrixd(m : GLdouble[16])
  fun load_transpose_matrixf = glLoadTransposeMatrixf(m : GLfloat[16])
  fun mult_transpose_matrixd = glMultTransposeMatrixd(m : GLdouble[16])
  fun mult_transpose_matrixf = glMultTransposeMatrixf(m : GLfloat[16])
  fun sample_coverage = glSampleCoverage(value : GLclampf, invert : GLboolean)
  fun active_texture_arb = glActiveTextureARB(texture : GLenum)
  fun client_active_texture_arb = glClientActiveTextureARB(texture : GLenum)
  fun multi_tex_coord1d_arb = glMultiTexCoord1dARB(target : GLenum, s : GLdouble)
  fun multi_tex_coord1dv_arb = glMultiTexCoord1dvARB(target : GLenum, v : GLdouble*)
  fun multi_tex_coord1f_arb = glMultiTexCoord1fARB(target : GLenum, s : GLfloat)
  fun multi_tex_coord1fv_arb = glMultiTexCoord1fvARB(target : GLenum, v : GLfloat*)
  fun multi_tex_coord1i_arb = glMultiTexCoord1iARB(target : GLenum, s : GLint)
  fun multi_tex_coord1iv_arb = glMultiTexCoord1ivARB(target : GLenum, v : GLint*)
  fun multi_tex_coord1s_arb = glMultiTexCoord1sARB(target : GLenum, s : GLshort)
  fun multi_tex_coord1sv_arb = glMultiTexCoord1svARB(target : GLenum, v : GLshort*)
  fun multi_tex_coord2d_arb = glMultiTexCoord2dARB(target : GLenum, s : GLdouble, t : GLdouble)
  fun multi_tex_coord2dv_arb = glMultiTexCoord2dvARB(target : GLenum, v : GLdouble*)
  fun multi_tex_coord2f_arb = glMultiTexCoord2fARB(target : GLenum, s : GLfloat, t : GLfloat)
  fun multi_tex_coord2fv_arb = glMultiTexCoord2fvARB(target : GLenum, v : GLfloat*)
  fun multi_tex_coord2i_arb = glMultiTexCoord2iARB(target : GLenum, s : GLint, t : GLint)
  fun multi_tex_coord2iv_arb = glMultiTexCoord2ivARB(target : GLenum, v : GLint*)
  fun multi_tex_coord2s_arb = glMultiTexCoord2sARB(target : GLenum, s : GLshort, t : GLshort)
  fun multi_tex_coord2sv_arb = glMultiTexCoord2svARB(target : GLenum, v : GLshort*)
  fun multi_tex_coord3d_arb = glMultiTexCoord3dARB(target : GLenum, s : GLdouble, t : GLdouble, r : GLdouble)
  fun multi_tex_coord3dv_arb = glMultiTexCoord3dvARB(target : GLenum, v : GLdouble*)
  fun multi_tex_coord3f_arb = glMultiTexCoord3fARB(target : GLenum, s : GLfloat, t : GLfloat, r : GLfloat)
  fun multi_tex_coord3fv_arb = glMultiTexCoord3fvARB(target : GLenum, v : GLfloat*)
  fun multi_tex_coord3i_arb = glMultiTexCoord3iARB(target : GLenum, s : GLint, t : GLint, r : GLint)
  fun multi_tex_coord3iv_arb = glMultiTexCoord3ivARB(target : GLenum, v : GLint*)
  fun multi_tex_coord3s_arb = glMultiTexCoord3sARB(target : GLenum, s : GLshort, t : GLshort, r : GLshort)
  fun multi_tex_coord3sv_arb = glMultiTexCoord3svARB(target : GLenum, v : GLshort*)
  fun multi_tex_coord4d_arb = glMultiTexCoord4dARB(target : GLenum, s : GLdouble, t : GLdouble, r : GLdouble, q : GLdouble)
  fun multi_tex_coord4dv_arb = glMultiTexCoord4dvARB(target : GLenum, v : GLdouble*)
  fun multi_tex_coord4f_arb = glMultiTexCoord4fARB(target : GLenum, s : GLfloat, t : GLfloat, r : GLfloat, q : GLfloat)
  fun multi_tex_coord4fv_arb = glMultiTexCoord4fvARB(target : GLenum, v : GLfloat*)
  fun multi_tex_coord4i_arb = glMultiTexCoord4iARB(target : GLenum, s : GLint, t : GLint, r : GLint, q : GLint)
  fun multi_tex_coord4iv_arb = glMultiTexCoord4ivARB(target : GLenum, v : GLint*)
  fun multi_tex_coord4s_arb = glMultiTexCoord4sARB(target : GLenum, s : GLshort, t : GLshort, r : GLshort, q : GLshort)
  fun multi_tex_coord4sv_arb = glMultiTexCoord4svARB(target : GLenum, v : GLshort*)
  fun clamp_color_arb = glClampColorARB(target : GLenum, clamp : GLenum)
  fun draw_buffers_arb = glDrawBuffersARB(n : GLsizei, bufs : GLenum*)
  fun program_string_arb = glProgramStringARB(target : GLenum, format : GLenum, len : GLsizei, string : Void*)
  fun bind_program_arb = glBindProgramARB(target : GLenum, program : GLuint)
  fun delete_programs_arb = glDeleteProgramsARB(n : GLsizei, programs : GLuint*)
  fun gen_programs_arb = glGenProgramsARB(n : GLsizei, programs : GLuint*)
  fun program_env_parameter4d_arb = glProgramEnvParameter4dARB(target : GLenum, index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun program_env_parameter4dv_arb = glProgramEnvParameter4dvARB(target : GLenum, index : GLuint, params : GLdouble*)
  fun program_env_parameter4f_arb = glProgramEnvParameter4fARB(target : GLenum, index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun program_env_parameter4fv_arb = glProgramEnvParameter4fvARB(target : GLenum, index : GLuint, params : GLfloat*)
  fun program_local_parameter4d_arb = glProgramLocalParameter4dARB(target : GLenum, index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun program_local_parameter4dv_arb = glProgramLocalParameter4dvARB(target : GLenum, index : GLuint, params : GLdouble*)
  fun program_local_parameter4f_arb = glProgramLocalParameter4fARB(target : GLenum, index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun program_local_parameter4fv_arb = glProgramLocalParameter4fvARB(target : GLenum, index : GLuint, params : GLfloat*)
  fun get_program_env_parameterdv_arb = glGetProgramEnvParameterdvARB(target : GLenum, index : GLuint, params : GLdouble*)
  fun get_program_env_parameterfv_arb = glGetProgramEnvParameterfvARB(target : GLenum, index : GLuint, params : GLfloat*)
  fun get_program_local_parameterdv_arb = glGetProgramLocalParameterdvARB(target : GLenum, index : GLuint, params : GLdouble*)
  fun get_program_local_parameterfv_arb = glGetProgramLocalParameterfvARB(target : GLenum, index : GLuint, params : GLfloat*)
  fun get_programiv_arb = glGetProgramivARB(target : GLenum, pname : GLenum, params : GLint*)
  fun get_program_string_arb = glGetProgramStringARB(target : GLenum, pname : GLenum, string : Void*)
  fun is_program_arb = glIsProgramARB(program : GLuint) : GLboolean
  fun current_palette_matrix_arb = glCurrentPaletteMatrixARB(index : GLint)
  fun matrix_indexubv_arb = glMatrixIndexubvARB(size : GLint, indices : GLubyte*)
  fun matrix_indexusv_arb = glMatrixIndexusvARB(size : GLint, indices : GLushort*)
  fun matrix_indexuiv_arb = glMatrixIndexuivARB(size : GLint, indices : GLuint*)
  fun matrix_index_pointer_arb = glMatrixIndexPointerARB(size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun sample_coverage_arb = glSampleCoverageARB(value : GLfloat, invert : GLboolean)
  fun gen_queries_arb = glGenQueriesARB(n : GLsizei, ids : GLuint*)
  fun delete_queries_arb = glDeleteQueriesARB(n : GLsizei, ids : GLuint*)
  fun is_query_arb = glIsQueryARB(id : GLuint) : GLboolean
  fun begin_query_arb = glBeginQueryARB(target : GLenum, id : GLuint)
  fun end_query_arb = glEndQueryARB(target : GLenum)
  fun get_queryiv_arb = glGetQueryivARB(target : GLenum, pname : GLenum, params : GLint*)
  fun get_query_objectiv_arb = glGetQueryObjectivARB(id : GLuint, pname : GLenum, params : GLint*)
  fun get_query_objectuiv_arb = glGetQueryObjectuivARB(id : GLuint, pname : GLenum, params : GLuint*)
  fun point_parameterf_arb = glPointParameterfARB(pname : GLenum, param : GLfloat)
  fun point_parameterfv_arb = glPointParameterfvARB(pname : GLenum, params : GLfloat*)
  fun delete_object_arb = glDeleteObjectARB(obj : GLhandleArb)
  alias GLhandleArb = LibC::UInt
  fun get_handle_arb = glGetHandleARB(pname : GLenum) : GLhandleArb
  fun detach_object_arb = glDetachObjectARB(container_obj : GLhandleArb, attached_obj : GLhandleArb)
  fun create_shader_object_arb = glCreateShaderObjectARB(shader_type : GLenum) : GLhandleArb
  fun shader_source_arb = glShaderSourceARB(shader_obj : GLhandleArb, count : GLsizei, string : GLcharArb**, length : GLint*)
  alias GLcharArb = LibC::Char
  fun compile_shader_arb = glCompileShaderARB(shader_obj : GLhandleArb)
  fun create_program_object_arb = glCreateProgramObjectARB : GLhandleArb
  fun attach_object_arb = glAttachObjectARB(container_obj : GLhandleArb, obj : GLhandleArb)
  fun link_program_arb = glLinkProgramARB(program_obj : GLhandleArb)
  fun use_program_object_arb = glUseProgramObjectARB(program_obj : GLhandleArb)
  fun validate_program_arb = glValidateProgramARB(program_obj : GLhandleArb)
  fun uniform1f_arb = glUniform1fARB(location : GLint, v0 : GLfloat)
  fun uniform2f_arb = glUniform2fARB(location : GLint, v0 : GLfloat, v1 : GLfloat)
  fun uniform3f_arb = glUniform3fARB(location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat)
  fun uniform4f_arb = glUniform4fARB(location : GLint, v0 : GLfloat, v1 : GLfloat, v2 : GLfloat, v3 : GLfloat)
  fun uniform1i_arb = glUniform1iARB(location : GLint, v0 : GLint)
  fun uniform2i_arb = glUniform2iARB(location : GLint, v0 : GLint, v1 : GLint)
  fun uniform3i_arb = glUniform3iARB(location : GLint, v0 : GLint, v1 : GLint, v2 : GLint)
  fun uniform4i_arb = glUniform4iARB(location : GLint, v0 : GLint, v1 : GLint, v2 : GLint, v3 : GLint)
  fun uniform1fv_arb = glUniform1fvARB(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform2fv_arb = glUniform2fvARB(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform3fv_arb = glUniform3fvARB(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform4fv_arb = glUniform4fvARB(location : GLint, count : GLsizei, value : GLfloat*)
  fun uniform1iv_arb = glUniform1ivARB(location : GLint, count : GLsizei, value : GLint*)
  fun uniform2iv_arb = glUniform2ivARB(location : GLint, count : GLsizei, value : GLint*)
  fun uniform3iv_arb = glUniform3ivARB(location : GLint, count : GLsizei, value : GLint*)
  fun uniform4iv_arb = glUniform4ivARB(location : GLint, count : GLsizei, value : GLint*)
  fun uniform_matrix2fv_arb = glUniformMatrix2fvARB(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix3fv_arb = glUniformMatrix3fvARB(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun uniform_matrix4fv_arb = glUniformMatrix4fvARB(location : GLint, count : GLsizei, transpose : GLboolean, value : GLfloat*)
  fun get_object_parameterfv_arb = glGetObjectParameterfvARB(obj : GLhandleArb, pname : GLenum, params : GLfloat*)
  fun get_object_parameteriv_arb = glGetObjectParameterivARB(obj : GLhandleArb, pname : GLenum, params : GLint*)
  fun get_info_log_arb = glGetInfoLogARB(obj : GLhandleArb, max_length : GLsizei, length : GLsizei*, info_log : GLcharArb*)
  fun get_attached_objects_arb = glGetAttachedObjectsARB(container_obj : GLhandleArb, max_count : GLsizei, count : GLsizei*, obj : GLhandleArb*)
  fun get_uniform_location_arb = glGetUniformLocationARB(program_obj : GLhandleArb, name : GLcharArb*) : GLint
  fun get_active_uniform_arb = glGetActiveUniformARB(program_obj : GLhandleArb, index : GLuint, max_length : GLsizei, length : GLsizei*, size : GLint*, type : GLenum*, name : GLcharArb*)
  fun get_uniformfv_arb = glGetUniformfvARB(program_obj : GLhandleArb, location : GLint, params : GLfloat*)
  fun get_uniformiv_arb = glGetUniformivARB(program_obj : GLhandleArb, location : GLint, params : GLint*)
  fun get_shader_source_arb = glGetShaderSourceARB(obj : GLhandleArb, max_length : GLsizei, length : GLsizei*, source : GLcharArb*)
  fun compressed_tex_image3darb = glCompressedTexImage3DARB(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, image_size : GLsizei, data : Void*)
  fun compressed_tex_image2darb = glCompressedTexImage2DARB(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, border : GLint, image_size : GLsizei, data : Void*)
  fun compressed_tex_image1darb = glCompressedTexImage1DARB(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, border : GLint, image_size : GLsizei, data : Void*)
  fun compressed_tex_sub_image3darb = glCompressedTexSubImage3DARB(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun compressed_tex_sub_image2darb = glCompressedTexSubImage2DARB(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun compressed_tex_sub_image1darb = glCompressedTexSubImage1DARB(target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, image_size : GLsizei, data : Void*)
  fun get_compressed_tex_image_arb = glGetCompressedTexImageARB(target : GLenum, level : GLint, img : Void*)
  fun load_transpose_matrixf_arb = glLoadTransposeMatrixfARB(m : GLfloat*)
  fun load_transpose_matrixd_arb = glLoadTransposeMatrixdARB(m : GLdouble*)
  fun mult_transpose_matrixf_arb = glMultTransposeMatrixfARB(m : GLfloat*)
  fun mult_transpose_matrixd_arb = glMultTransposeMatrixdARB(m : GLdouble*)
  fun weightbv_arb = glWeightbvARB(size : GLint, weights : GLbyte*)
  fun weightsv_arb = glWeightsvARB(size : GLint, weights : GLshort*)
  fun weightiv_arb = glWeightivARB(size : GLint, weights : GLint*)
  fun weightfv_arb = glWeightfvARB(size : GLint, weights : GLfloat*)
  fun weightdv_arb = glWeightdvARB(size : GLint, weights : GLdouble*)
  fun weightubv_arb = glWeightubvARB(size : GLint, weights : GLubyte*)
  fun weightusv_arb = glWeightusvARB(size : GLint, weights : GLushort*)
  fun weightuiv_arb = glWeightuivARB(size : GLint, weights : GLuint*)
  fun weight_pointer_arb = glWeightPointerARB(size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun vertex_blend_arb = glVertexBlendARB(count : GLint)
  fun bind_buffer_arb = glBindBufferARB(target : GLenum, buffer : GLuint)
  fun delete_buffers_arb = glDeleteBuffersARB(n : GLsizei, buffers : GLuint*)
  fun gen_buffers_arb = glGenBuffersARB(n : GLsizei, buffers : GLuint*)
  fun is_buffer_arb = glIsBufferARB(buffer : GLuint) : GLboolean
  fun buffer_data_arb = glBufferDataARB(target : GLenum, size : GLsizeiptrArb, data : Void*, usage : GLenum)
  alias GLsizeiptrArb = PtrdiffT
  fun buffer_sub_data_arb = glBufferSubDataARB(target : GLenum, offset : GLintptrArb, size : GLsizeiptrArb, data : Void*)
  alias GLintptrArb = PtrdiffT
  fun get_buffer_sub_data_arb = glGetBufferSubDataARB(target : GLenum, offset : GLintptrArb, size : GLsizeiptrArb, data : Void*)
  fun map_buffer_arb = glMapBufferARB(target : GLenum, access : GLenum) : Void*
  fun unmap_buffer_arb = glUnmapBufferARB(target : GLenum) : GLboolean
  fun get_buffer_parameteriv_arb = glGetBufferParameterivARB(target : GLenum, pname : GLenum, params : GLint*)
  fun get_buffer_pointerv_arb = glGetBufferPointervARB(target : GLenum, pname : GLenum, params : Void**)
  fun vertex_attrib1d_arb = glVertexAttrib1dARB(index : GLuint, x : GLdouble)
  fun vertex_attrib1dv_arb = glVertexAttrib1dvARB(index : GLuint, v : GLdouble*)
  fun vertex_attrib1f_arb = glVertexAttrib1fARB(index : GLuint, x : GLfloat)
  fun vertex_attrib1fv_arb = glVertexAttrib1fvARB(index : GLuint, v : GLfloat*)
  fun vertex_attrib1s_arb = glVertexAttrib1sARB(index : GLuint, x : GLshort)
  fun vertex_attrib1sv_arb = glVertexAttrib1svARB(index : GLuint, v : GLshort*)
  fun vertex_attrib2d_arb = glVertexAttrib2dARB(index : GLuint, x : GLdouble, y : GLdouble)
  fun vertex_attrib2dv_arb = glVertexAttrib2dvARB(index : GLuint, v : GLdouble*)
  fun vertex_attrib2f_arb = glVertexAttrib2fARB(index : GLuint, x : GLfloat, y : GLfloat)
  fun vertex_attrib2fv_arb = glVertexAttrib2fvARB(index : GLuint, v : GLfloat*)
  fun vertex_attrib2s_arb = glVertexAttrib2sARB(index : GLuint, x : GLshort, y : GLshort)
  fun vertex_attrib2sv_arb = glVertexAttrib2svARB(index : GLuint, v : GLshort*)
  fun vertex_attrib3d_arb = glVertexAttrib3dARB(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble)
  fun vertex_attrib3dv_arb = glVertexAttrib3dvARB(index : GLuint, v : GLdouble*)
  fun vertex_attrib3f_arb = glVertexAttrib3fARB(index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat)
  fun vertex_attrib3fv_arb = glVertexAttrib3fvARB(index : GLuint, v : GLfloat*)
  fun vertex_attrib3s_arb = glVertexAttrib3sARB(index : GLuint, x : GLshort, y : GLshort, z : GLshort)
  fun vertex_attrib3sv_arb = glVertexAttrib3svARB(index : GLuint, v : GLshort*)
  fun vertex_attrib4nbv_arb = glVertexAttrib4NbvARB(index : GLuint, v : GLbyte*)
  fun vertex_attrib4niv_arb = glVertexAttrib4NivARB(index : GLuint, v : GLint*)
  fun vertex_attrib4nsv_arb = glVertexAttrib4NsvARB(index : GLuint, v : GLshort*)
  fun vertex_attrib4nub_arb = glVertexAttrib4NubARB(index : GLuint, x : GLubyte, y : GLubyte, z : GLubyte, w : GLubyte)
  fun vertex_attrib4nubv_arb = glVertexAttrib4NubvARB(index : GLuint, v : GLubyte*)
  fun vertex_attrib4nuiv_arb = glVertexAttrib4NuivARB(index : GLuint, v : GLuint*)
  fun vertex_attrib4nusv_arb = glVertexAttrib4NusvARB(index : GLuint, v : GLushort*)
  fun vertex_attrib4bv_arb = glVertexAttrib4bvARB(index : GLuint, v : GLbyte*)
  fun vertex_attrib4d_arb = glVertexAttrib4dARB(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun vertex_attrib4dv_arb = glVertexAttrib4dvARB(index : GLuint, v : GLdouble*)
  fun vertex_attrib4f_arb = glVertexAttrib4fARB(index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun vertex_attrib4fv_arb = glVertexAttrib4fvARB(index : GLuint, v : GLfloat*)
  fun vertex_attrib4iv_arb = glVertexAttrib4ivARB(index : GLuint, v : GLint*)
  fun vertex_attrib4s_arb = glVertexAttrib4sARB(index : GLuint, x : GLshort, y : GLshort, z : GLshort, w : GLshort)
  fun vertex_attrib4sv_arb = glVertexAttrib4svARB(index : GLuint, v : GLshort*)
  fun vertex_attrib4ubv_arb = glVertexAttrib4ubvARB(index : GLuint, v : GLubyte*)
  fun vertex_attrib4uiv_arb = glVertexAttrib4uivARB(index : GLuint, v : GLuint*)
  fun vertex_attrib4usv_arb = glVertexAttrib4usvARB(index : GLuint, v : GLushort*)
  fun vertex_attrib_pointer_arb = glVertexAttribPointerARB(index : GLuint, size : GLint, type : GLenum, normalized : GLboolean, stride : GLsizei, pointer : Void*)
  fun enable_vertex_attrib_array_arb = glEnableVertexAttribArrayARB(index : GLuint)
  fun disable_vertex_attrib_array_arb = glDisableVertexAttribArrayARB(index : GLuint)
  fun get_vertex_attribdv_arb = glGetVertexAttribdvARB(index : GLuint, pname : GLenum, params : GLdouble*)
  fun get_vertex_attribfv_arb = glGetVertexAttribfvARB(index : GLuint, pname : GLenum, params : GLfloat*)
  fun get_vertex_attribiv_arb = glGetVertexAttribivARB(index : GLuint, pname : GLenum, params : GLint*)
  fun get_vertex_attrib_pointerv_arb = glGetVertexAttribPointervARB(index : GLuint, pname : GLenum, pointer : Void**)
  fun bind_attrib_location_arb = glBindAttribLocationARB(program_obj : GLhandleArb, index : GLuint, name : GLcharArb*)
  fun get_active_attrib_arb = glGetActiveAttribARB(program_obj : GLhandleArb, index : GLuint, max_length : GLsizei, length : GLsizei*, size : GLint*, type : GLenum*, name : GLcharArb*)
  fun get_attrib_location_arb = glGetAttribLocationARB(program_obj : GLhandleArb, name : GLcharArb*) : GLint
  fun window_pos2d_arb = glWindowPos2dARB(x : GLdouble, y : GLdouble)
  fun window_pos2dv_arb = glWindowPos2dvARB(v : GLdouble*)
  fun window_pos2f_arb = glWindowPos2fARB(x : GLfloat, y : GLfloat)
  fun window_pos2fv_arb = glWindowPos2fvARB(v : GLfloat*)
  fun window_pos2i_arb = glWindowPos2iARB(x : GLint, y : GLint)
  fun window_pos2iv_arb = glWindowPos2ivARB(v : GLint*)
  fun window_pos2s_arb = glWindowPos2sARB(x : GLshort, y : GLshort)
  fun window_pos2sv_arb = glWindowPos2svARB(v : GLshort*)
  fun window_pos3d_arb = glWindowPos3dARB(x : GLdouble, y : GLdouble, z : GLdouble)
  fun window_pos3dv_arb = glWindowPos3dvARB(v : GLdouble*)
  fun window_pos3f_arb = glWindowPos3fARB(x : GLfloat, y : GLfloat, z : GLfloat)
  fun window_pos3fv_arb = glWindowPos3fvARB(v : GLfloat*)
  fun window_pos3i_arb = glWindowPos3iARB(x : GLint, y : GLint, z : GLint)
  fun window_pos3iv_arb = glWindowPos3ivARB(v : GLint*)
  fun window_pos3s_arb = glWindowPos3sARB(x : GLshort, y : GLshort, z : GLshort)
  fun window_pos3sv_arb = glWindowPos3svARB(v : GLshort*)
  fun multi_tex_coord1b_oes = glMultiTexCoord1bOES(texture : GLenum, s : GLbyte)
  fun multi_tex_coord1bv_oes = glMultiTexCoord1bvOES(texture : GLenum, coords : GLbyte*)
  fun multi_tex_coord2b_oes = glMultiTexCoord2bOES(texture : GLenum, s : GLbyte, t : GLbyte)
  fun multi_tex_coord2bv_oes = glMultiTexCoord2bvOES(texture : GLenum, coords : GLbyte*)
  fun multi_tex_coord3b_oes = glMultiTexCoord3bOES(texture : GLenum, s : GLbyte, t : GLbyte, r : GLbyte)
  fun multi_tex_coord3bv_oes = glMultiTexCoord3bvOES(texture : GLenum, coords : GLbyte*)
  fun multi_tex_coord4b_oes = glMultiTexCoord4bOES(texture : GLenum, s : GLbyte, t : GLbyte, r : GLbyte, q : GLbyte)
  fun multi_tex_coord4bv_oes = glMultiTexCoord4bvOES(texture : GLenum, coords : GLbyte*)
  fun tex_coord1b_oes = glTexCoord1bOES(s : GLbyte)
  fun tex_coord1bv_oes = glTexCoord1bvOES(coords : GLbyte*)
  fun tex_coord2b_oes = glTexCoord2bOES(s : GLbyte, t : GLbyte)
  fun tex_coord2bv_oes = glTexCoord2bvOES(coords : GLbyte*)
  fun tex_coord3b_oes = glTexCoord3bOES(s : GLbyte, t : GLbyte, r : GLbyte)
  fun tex_coord3bv_oes = glTexCoord3bvOES(coords : GLbyte*)
  fun tex_coord4b_oes = glTexCoord4bOES(s : GLbyte, t : GLbyte, r : GLbyte, q : GLbyte)
  fun tex_coord4bv_oes = glTexCoord4bvOES(coords : GLbyte*)
  fun vertex2b_oes = glVertex2bOES(x : GLbyte, y : GLbyte)
  fun vertex2bv_oes = glVertex2bvOES(coords : GLbyte*)
  fun vertex3b_oes = glVertex3bOES(x : GLbyte, y : GLbyte, z : GLbyte)
  fun vertex3bv_oes = glVertex3bvOES(coords : GLbyte*)
  fun vertex4b_oes = glVertex4bOES(x : GLbyte, y : GLbyte, z : GLbyte, w : GLbyte)
  fun vertex4bv_oes = glVertex4bvOES(coords : GLbyte*)
  fun alpha_funcx_oes = glAlphaFuncxOES(func : GLenum, ref : GLfixed)
  alias GLfixed = GLint
  fun clear_colorx_oes = glClearColorxOES(red : GLfixed, green : GLfixed, blue : GLfixed, alpha : GLfixed)
  fun clear_depthx_oes = glClearDepthxOES(depth : GLfixed)
  fun clip_planex_oes = glClipPlanexOES(plane : GLenum, equation : GLfixed*)
  fun color4x_oes = glColor4xOES(red : GLfixed, green : GLfixed, blue : GLfixed, alpha : GLfixed)
  fun depth_rangex_oes = glDepthRangexOES(n : GLfixed, f : GLfixed)
  fun fogx_oes = glFogxOES(pname : GLenum, param : GLfixed)
  fun fogxv_oes = glFogxvOES(pname : GLenum, param : GLfixed*)
  fun frustumx_oes = glFrustumxOES(l : GLfixed, r : GLfixed, b : GLfixed, t : GLfixed, n : GLfixed, f : GLfixed)
  fun get_clip_planex_oes = glGetClipPlanexOES(plane : GLenum, equation : GLfixed*)
  fun get_fixedv_oes = glGetFixedvOES(pname : GLenum, params : GLfixed*)
  fun get_tex_envxv_oes = glGetTexEnvxvOES(target : GLenum, pname : GLenum, params : GLfixed*)
  fun get_tex_parameterxv_oes = glGetTexParameterxvOES(target : GLenum, pname : GLenum, params : GLfixed*)
  fun light_modelx_oes = glLightModelxOES(pname : GLenum, param : GLfixed)
  fun light_modelxv_oes = glLightModelxvOES(pname : GLenum, param : GLfixed*)
  fun lightx_oes = glLightxOES(light : GLenum, pname : GLenum, param : GLfixed)
  fun lightxv_oes = glLightxvOES(light : GLenum, pname : GLenum, params : GLfixed*)
  fun line_widthx_oes = glLineWidthxOES(width : GLfixed)
  fun load_matrixx_oes = glLoadMatrixxOES(m : GLfixed*)
  fun materialx_oes = glMaterialxOES(face : GLenum, pname : GLenum, param : GLfixed)
  fun materialxv_oes = glMaterialxvOES(face : GLenum, pname : GLenum, param : GLfixed*)
  fun mult_matrixx_oes = glMultMatrixxOES(m : GLfixed*)
  fun multi_tex_coord4x_oes = glMultiTexCoord4xOES(texture : GLenum, s : GLfixed, t : GLfixed, r : GLfixed, q : GLfixed)
  fun normal3x_oes = glNormal3xOES(nx : GLfixed, ny : GLfixed, nz : GLfixed)
  fun orthox_oes = glOrthoxOES(l : GLfixed, r : GLfixed, b : GLfixed, t : GLfixed, n : GLfixed, f : GLfixed)
  fun point_parameterxv_oes = glPointParameterxvOES(pname : GLenum, params : GLfixed*)
  fun point_sizex_oes = glPointSizexOES(size : GLfixed)
  fun polygon_offsetx_oes = glPolygonOffsetxOES(factor : GLfixed, units : GLfixed)
  fun rotatex_oes = glRotatexOES(angle : GLfixed, x : GLfixed, y : GLfixed, z : GLfixed)
  fun scalex_oes = glScalexOES(x : GLfixed, y : GLfixed, z : GLfixed)
  fun tex_envx_oes = glTexEnvxOES(target : GLenum, pname : GLenum, param : GLfixed)
  fun tex_envxv_oes = glTexEnvxvOES(target : GLenum, pname : GLenum, params : GLfixed*)
  fun tex_parameterx_oes = glTexParameterxOES(target : GLenum, pname : GLenum, param : GLfixed)
  fun tex_parameterxv_oes = glTexParameterxvOES(target : GLenum, pname : GLenum, params : GLfixed*)
  fun translatex_oes = glTranslatexOES(x : GLfixed, y : GLfixed, z : GLfixed)
  fun accumx_oes = glAccumxOES(op : GLenum, value : GLfixed)
  fun bitmapx_oes = glBitmapxOES(width : GLsizei, height : GLsizei, xorig : GLfixed, yorig : GLfixed, xmove : GLfixed, ymove : GLfixed, bitmap : GLubyte*)
  fun blend_colorx_oes = glBlendColorxOES(red : GLfixed, green : GLfixed, blue : GLfixed, alpha : GLfixed)
  fun clear_accumx_oes = glClearAccumxOES(red : GLfixed, green : GLfixed, blue : GLfixed, alpha : GLfixed)
  fun color3x_oes = glColor3xOES(red : GLfixed, green : GLfixed, blue : GLfixed)
  fun color3xv_oes = glColor3xvOES(components : GLfixed*)
  fun color4xv_oes = glColor4xvOES(components : GLfixed*)
  fun convolution_parameterx_oes = glConvolutionParameterxOES(target : GLenum, pname : GLenum, param : GLfixed)
  fun convolution_parameterxv_oes = glConvolutionParameterxvOES(target : GLenum, pname : GLenum, params : GLfixed*)
  fun eval_coord1x_oes = glEvalCoord1xOES(u : GLfixed)
  fun eval_coord1xv_oes = glEvalCoord1xvOES(coords : GLfixed*)
  fun eval_coord2x_oes = glEvalCoord2xOES(u : GLfixed, v : GLfixed)
  fun eval_coord2xv_oes = glEvalCoord2xvOES(coords : GLfixed*)
  fun feedback_bufferx_oes = glFeedbackBufferxOES(n : GLsizei, type : GLenum, buffer : GLfixed*)
  fun get_convolution_parameterxv_oes = glGetConvolutionParameterxvOES(target : GLenum, pname : GLenum, params : GLfixed*)
  fun get_histogram_parameterxv_oes = glGetHistogramParameterxvOES(target : GLenum, pname : GLenum, params : GLfixed*)
  fun get_lightx_oes = glGetLightxOES(light : GLenum, pname : GLenum, params : GLfixed*)
  fun get_mapxv_oes = glGetMapxvOES(target : GLenum, query : GLenum, v : GLfixed*)
  fun get_materialx_oes = glGetMaterialxOES(face : GLenum, pname : GLenum, param : GLfixed)
  fun get_pixel_mapxv = glGetPixelMapxv(map : GLenum, size : GLint, values : GLfixed*)
  fun get_tex_genxv_oes = glGetTexGenxvOES(coord : GLenum, pname : GLenum, params : GLfixed*)
  fun get_tex_level_parameterxv_oes = glGetTexLevelParameterxvOES(target : GLenum, level : GLint, pname : GLenum, params : GLfixed*)
  fun indexx_oes = glIndexxOES(component : GLfixed)
  fun indexxv_oes = glIndexxvOES(component : GLfixed*)
  fun load_transpose_matrixx_oes = glLoadTransposeMatrixxOES(m : GLfixed*)
  fun map1x_oes = glMap1xOES(target : GLenum, u1 : GLfixed, u2 : GLfixed, stride : GLint, order : GLint, points : GLfixed)
  fun map2x_oes = glMap2xOES(target : GLenum, u1 : GLfixed, u2 : GLfixed, ustride : GLint, uorder : GLint, v1 : GLfixed, v2 : GLfixed, vstride : GLint, vorder : GLint, points : GLfixed)
  fun map_grid1x_oes = glMapGrid1xOES(n : GLint, u1 : GLfixed, u2 : GLfixed)
  fun map_grid2x_oes = glMapGrid2xOES(n : GLint, u1 : GLfixed, u2 : GLfixed, v1 : GLfixed, v2 : GLfixed)
  fun mult_transpose_matrixx_oes = glMultTransposeMatrixxOES(m : GLfixed*)
  fun multi_tex_coord1x_oes = glMultiTexCoord1xOES(texture : GLenum, s : GLfixed)
  fun multi_tex_coord1xv_oes = glMultiTexCoord1xvOES(texture : GLenum, coords : GLfixed*)
  fun multi_tex_coord2x_oes = glMultiTexCoord2xOES(texture : GLenum, s : GLfixed, t : GLfixed)
  fun multi_tex_coord2xv_oes = glMultiTexCoord2xvOES(texture : GLenum, coords : GLfixed*)
  fun multi_tex_coord3x_oes = glMultiTexCoord3xOES(texture : GLenum, s : GLfixed, t : GLfixed, r : GLfixed)
  fun multi_tex_coord3xv_oes = glMultiTexCoord3xvOES(texture : GLenum, coords : GLfixed*)
  fun multi_tex_coord4xv_oes = glMultiTexCoord4xvOES(texture : GLenum, coords : GLfixed*)
  fun normal3xv_oes = glNormal3xvOES(coords : GLfixed*)
  fun pass_throughx_oes = glPassThroughxOES(token : GLfixed)
  fun pixel_mapx = glPixelMapx(map : GLenum, size : GLint, values : GLfixed*)
  fun pixel_storex = glPixelStorex(pname : GLenum, param : GLfixed)
  fun pixel_transferx_oes = glPixelTransferxOES(pname : GLenum, param : GLfixed)
  fun pixel_zoomx_oes = glPixelZoomxOES(xfactor : GLfixed, yfactor : GLfixed)
  fun prioritize_texturesx_oes = glPrioritizeTexturesxOES(n : GLsizei, textures : GLuint*, priorities : GLfixed*)
  fun raster_pos2x_oes = glRasterPos2xOES(x : GLfixed, y : GLfixed)
  fun raster_pos2xv_oes = glRasterPos2xvOES(coords : GLfixed*)
  fun raster_pos3x_oes = glRasterPos3xOES(x : GLfixed, y : GLfixed, z : GLfixed)
  fun raster_pos3xv_oes = glRasterPos3xvOES(coords : GLfixed*)
  fun raster_pos4x_oes = glRasterPos4xOES(x : GLfixed, y : GLfixed, z : GLfixed, w : GLfixed)
  fun raster_pos4xv_oes = glRasterPos4xvOES(coords : GLfixed*)
  fun rectx_oes = glRectxOES(x1 : GLfixed, y1 : GLfixed, x2 : GLfixed, y2 : GLfixed)
  fun rectxv_oes = glRectxvOES(v1 : GLfixed*, v2 : GLfixed*)
  fun tex_coord1x_oes = glTexCoord1xOES(s : GLfixed)
  fun tex_coord1xv_oes = glTexCoord1xvOES(coords : GLfixed*)
  fun tex_coord2x_oes = glTexCoord2xOES(s : GLfixed, t : GLfixed)
  fun tex_coord2xv_oes = glTexCoord2xvOES(coords : GLfixed*)
  fun tex_coord3x_oes = glTexCoord3xOES(s : GLfixed, t : GLfixed, r : GLfixed)
  fun tex_coord3xv_oes = glTexCoord3xvOES(coords : GLfixed*)
  fun tex_coord4x_oes = glTexCoord4xOES(s : GLfixed, t : GLfixed, r : GLfixed, q : GLfixed)
  fun tex_coord4xv_oes = glTexCoord4xvOES(coords : GLfixed*)
  fun tex_genx_oes = glTexGenxOES(coord : GLenum, pname : GLenum, param : GLfixed)
  fun tex_genxv_oes = glTexGenxvOES(coord : GLenum, pname : GLenum, params : GLfixed*)
  fun vertex2x_oes = glVertex2xOES(x : GLfixed)
  fun vertex2xv_oes = glVertex2xvOES(coords : GLfixed*)
  fun vertex3x_oes = glVertex3xOES(x : GLfixed, y : GLfixed)
  fun vertex3xv_oes = glVertex3xvOES(coords : GLfixed*)
  fun vertex4x_oes = glVertex4xOES(x : GLfixed, y : GLfixed, z : GLfixed)
  fun vertex4xv_oes = glVertex4xvOES(coords : GLfixed*)
  fun query_matrixx_oes = glQueryMatrixxOES(mantissa : GLfixed*, exponent : GLint*) : GLbitfield
  fun clear_depthf_oes = glClearDepthfOES(depth : GLclampf)
  fun clip_planef_oes = glClipPlanefOES(plane : GLenum, equation : GLfloat*)
  fun depth_rangef_oes = glDepthRangefOES(n : GLclampf, f : GLclampf)
  fun frustumf_oes = glFrustumfOES(l : GLfloat, r : GLfloat, b : GLfloat, t : GLfloat, n : GLfloat, f : GLfloat)
  fun get_clip_planef_oes = glGetClipPlanefOES(plane : GLenum, equation : GLfloat*)
  fun orthof_oes = glOrthofOES(l : GLfloat, r : GLfloat, b : GLfloat, t : GLfloat, n : GLfloat, f : GLfloat)
  fun tbuffer_mask3dfx = glTbufferMask3DFX(mask : GLuint)
  fun debug_message_enable_amd = glDebugMessageEnableAMD(category : GLenum, severity : GLenum, count : GLsizei, ids : GLuint*, enabled : GLboolean)
  fun debug_message_insert_amd = glDebugMessageInsertAMD(category : GLenum, severity : GLenum, id : GLuint, length : GLsizei, buf : GLchar*)
  fun debug_message_callback_amd = glDebugMessageCallbackAMD(callback : Gldebugprocamd, user_param : Void*)
  alias Gldebugprocamd = (GLuint, GLenum, GLenum, GLsizei, GLchar*, Void* -> Void)
  fun get_debug_message_log_amd = glGetDebugMessageLogAMD(count : GLuint, bufsize : GLsizei, categories : GLenum*, severities : GLuint*, ids : GLuint*, lengths : GLsizei*, message : GLchar*) : GLuint
  fun blend_func_indexed_amd = glBlendFuncIndexedAMD(buf : GLuint, src : GLenum, dst : GLenum)
  fun blend_func_separate_indexed_amd = glBlendFuncSeparateIndexedAMD(buf : GLuint, src_rgb : GLenum, dst_rgb : GLenum, src_alpha : GLenum, dst_alpha : GLenum)
  fun blend_equation_indexed_amd = glBlendEquationIndexedAMD(buf : GLuint, mode : GLenum)
  fun blend_equation_separate_indexed_amd = glBlendEquationSeparateIndexedAMD(buf : GLuint, mode_rgb : GLenum, mode_alpha : GLenum)
  fun framebuffer_sample_positionsfv_amd = glFramebufferSamplePositionsfvAMD(target : GLenum, numsamples : GLuint, pixelindex : GLuint, values : GLfloat*)
  fun named_framebuffer_sample_positionsfv_amd = glNamedFramebufferSamplePositionsfvAMD(framebuffer : GLuint, numsamples : GLuint, pixelindex : GLuint, values : GLfloat*)
  fun get_framebuffer_parameterfv_amd = glGetFramebufferParameterfvAMD(target : GLenum, pname : GLenum, numsamples : GLuint, pixelindex : GLuint, size : GLsizei, values : GLfloat*)
  fun get_named_framebuffer_parameterfv_amd = glGetNamedFramebufferParameterfvAMD(framebuffer : GLuint, pname : GLenum, numsamples : GLuint, pixelindex : GLuint, size : GLsizei, values : GLfloat*)
  fun uniform1i64nv = glUniform1i64NV(location : GLint, x : GLint64Ext)
  fun uniform2i64nv = glUniform2i64NV(location : GLint, x : GLint64Ext, y : GLint64Ext)
  fun uniform3i64nv = glUniform3i64NV(location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext)
  fun uniform4i64nv = glUniform4i64NV(location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext, w : GLint64Ext)
  fun uniform1i64v_nv = glUniform1i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform2i64v_nv = glUniform2i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform3i64v_nv = glUniform3i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform4i64v_nv = glUniform4i64vNV(location : GLint, count : GLsizei, value : GLint64Ext*)
  fun uniform1ui64nv = glUniform1ui64NV(location : GLint, x : GLuint64Ext)
  fun uniform2ui64nv = glUniform2ui64NV(location : GLint, x : GLuint64Ext, y : GLuint64Ext)
  fun uniform3ui64nv = glUniform3ui64NV(location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext)
  fun uniform4ui64nv = glUniform4ui64NV(location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext, w : GLuint64Ext)
  fun uniform1ui64v_nv = glUniform1ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun uniform2ui64v_nv = glUniform2ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun uniform3ui64v_nv = glUniform3ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun uniform4ui64v_nv = glUniform4ui64vNV(location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun get_uniformi64v_nv = glGetUniformi64vNV(program : GLuint, location : GLint, params : GLint64Ext*)
  fun get_uniformui64v_nv = glGetUniformui64vNV(program : GLuint, location : GLint, params : GLuint64Ext*)
  fun program_uniform1i64nv = glProgramUniform1i64NV(program : GLuint, location : GLint, x : GLint64Ext)
  fun program_uniform2i64nv = glProgramUniform2i64NV(program : GLuint, location : GLint, x : GLint64Ext, y : GLint64Ext)
  fun program_uniform3i64nv = glProgramUniform3i64NV(program : GLuint, location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext)
  fun program_uniform4i64nv = glProgramUniform4i64NV(program : GLuint, location : GLint, x : GLint64Ext, y : GLint64Ext, z : GLint64Ext, w : GLint64Ext)
  fun program_uniform1i64v_nv = glProgramUniform1i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform2i64v_nv = glProgramUniform2i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform3i64v_nv = glProgramUniform3i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform4i64v_nv = glProgramUniform4i64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLint64Ext*)
  fun program_uniform1ui64nv = glProgramUniform1ui64NV(program : GLuint, location : GLint, x : GLuint64Ext)
  fun program_uniform2ui64nv = glProgramUniform2ui64NV(program : GLuint, location : GLint, x : GLuint64Ext, y : GLuint64Ext)
  fun program_uniform3ui64nv = glProgramUniform3ui64NV(program : GLuint, location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext)
  fun program_uniform4ui64nv = glProgramUniform4ui64NV(program : GLuint, location : GLint, x : GLuint64Ext, y : GLuint64Ext, z : GLuint64Ext, w : GLuint64Ext)
  fun program_uniform1ui64v_nv = glProgramUniform1ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun program_uniform2ui64v_nv = glProgramUniform2ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun program_uniform3ui64v_nv = glProgramUniform3ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun program_uniform4ui64v_nv = glProgramUniform4ui64vNV(program : GLuint, location : GLint, count : GLsizei, value : GLuint64Ext*)
  fun vertex_attrib_parameteri_amd = glVertexAttribParameteriAMD(index : GLuint, pname : GLenum, param : GLint)
  fun multi_draw_arrays_indirect_amd = glMultiDrawArraysIndirectAMD(mode : GLenum, indirect : Void*, primcount : GLsizei, stride : GLsizei)
  fun multi_draw_elements_indirect_amd = glMultiDrawElementsIndirectAMD(mode : GLenum, type : GLenum, indirect : Void*, primcount : GLsizei, stride : GLsizei)
  fun gen_names_amd = glGenNamesAMD(identifier : GLenum, num : GLuint, names : GLuint*)
  fun delete_names_amd = glDeleteNamesAMD(identifier : GLenum, num : GLuint, names : GLuint*)
  fun is_name_amd = glIsNameAMD(identifier : GLenum, name : GLuint) : GLboolean
  fun query_object_parameterui_amd = glQueryObjectParameteruiAMD(target : GLenum, id : GLuint, pname : GLenum, param : GLuint)
  fun set_multisamplefv_amd = glSetMultisamplefvAMD(pname : GLenum, index : GLuint, val : GLfloat*)
  fun tex_storage_sparse_amd = glTexStorageSparseAMD(target : GLenum, internal_format : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, layers : GLsizei, flags : GLbitfield)
  fun texture_storage_sparse_amd = glTextureStorageSparseAMD(texture : GLuint, target : GLenum, internal_format : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, layers : GLsizei, flags : GLbitfield)
  fun stencil_op_value_amd = glStencilOpValueAMD(face : GLenum, value : GLuint)
  fun tessellation_factor_amd = glTessellationFactorAMD(factor : GLfloat)
  fun tessellation_mode_amd = glTessellationModeAMD(mode : GLenum)
  fun element_pointer_apple = glElementPointerAPPLE(type : GLenum, pointer : Void*)
  fun draw_element_array_apple = glDrawElementArrayAPPLE(mode : GLenum, first : GLint, count : GLsizei)
  fun draw_range_element_array_apple = glDrawRangeElementArrayAPPLE(mode : GLenum, start : GLuint, _end : GLuint, first : GLint, count : GLsizei)
  fun multi_draw_element_array_apple = glMultiDrawElementArrayAPPLE(mode : GLenum, first : GLint*, count : GLsizei*, primcount : GLsizei)
  fun multi_draw_range_element_array_apple = glMultiDrawRangeElementArrayAPPLE(mode : GLenum, start : GLuint, _end : GLuint, first : GLint*, count : GLsizei*, primcount : GLsizei)
  fun gen_fences_apple = glGenFencesAPPLE(n : GLsizei, fences : GLuint*)
  fun delete_fences_apple = glDeleteFencesAPPLE(n : GLsizei, fences : GLuint*)
  fun set_fence_apple = glSetFenceAPPLE(fence : GLuint)
  fun is_fence_apple = glIsFenceAPPLE(fence : GLuint) : GLboolean
  fun test_fence_apple = glTestFenceAPPLE(fence : GLuint) : GLboolean
  fun finish_fence_apple = glFinishFenceAPPLE(fence : GLuint)
  fun test_object_apple = glTestObjectAPPLE(object : GLenum, name : GLuint) : GLboolean
  fun finish_object_apple = glFinishObjectAPPLE(object : GLenum, name : GLint)
  fun buffer_parameteri_apple = glBufferParameteriAPPLE(target : GLenum, pname : GLenum, param : GLint)
  fun flush_mapped_buffer_range_apple = glFlushMappedBufferRangeAPPLE(target : GLenum, offset : GLintptr, size : GLsizeiptr)
  fun object_purgeable_apple = glObjectPurgeableAPPLE(object_type : GLenum, name : GLuint, option : GLenum) : GLenum
  fun object_unpurgeable_apple = glObjectUnpurgeableAPPLE(object_type : GLenum, name : GLuint, option : GLenum) : GLenum
  fun get_object_parameteriv_apple = glGetObjectParameterivAPPLE(object_type : GLenum, name : GLuint, pname : GLenum, params : GLint*)
  fun texture_range_apple = glTextureRangeAPPLE(target : GLenum, length : GLsizei, pointer : Void*)
  fun get_tex_parameter_pointerv_apple = glGetTexParameterPointervAPPLE(target : GLenum, pname : GLenum, params : Void**)
  fun bind_vertex_array_apple = glBindVertexArrayAPPLE(array : GLuint)
  fun delete_vertex_arrays_apple = glDeleteVertexArraysAPPLE(n : GLsizei, arrays : GLuint*)
  fun gen_vertex_arrays_apple = glGenVertexArraysAPPLE(n : GLsizei, arrays : GLuint*)
  fun is_vertex_array_apple = glIsVertexArrayAPPLE(array : GLuint) : GLboolean
  fun vertex_array_range_apple = glVertexArrayRangeAPPLE(length : GLsizei, pointer : Void*)
  fun flush_vertex_array_range_apple = glFlushVertexArrayRangeAPPLE(length : GLsizei, pointer : Void*)
  fun vertex_array_parameteri_apple = glVertexArrayParameteriAPPLE(pname : GLenum, param : GLint)
  fun enable_vertex_attrib_apple = glEnableVertexAttribAPPLE(index : GLuint, pname : GLenum)
  fun disable_vertex_attrib_apple = glDisableVertexAttribAPPLE(index : GLuint, pname : GLenum)
  fun is_vertex_attrib_enabled_apple = glIsVertexAttribEnabledAPPLE(index : GLuint, pname : GLenum) : GLboolean
  fun map_vertex_attrib1d_apple = glMapVertexAttrib1dAPPLE(index : GLuint, size : GLuint, u1 : GLdouble, u2 : GLdouble, stride : GLint, order : GLint, points : GLdouble*)
  fun map_vertex_attrib1f_apple = glMapVertexAttrib1fAPPLE(index : GLuint, size : GLuint, u1 : GLfloat, u2 : GLfloat, stride : GLint, order : GLint, points : GLfloat*)
  fun map_vertex_attrib2d_apple = glMapVertexAttrib2dAPPLE(index : GLuint, size : GLuint, u1 : GLdouble, u2 : GLdouble, ustride : GLint, uorder : GLint, v1 : GLdouble, v2 : GLdouble, vstride : GLint, vorder : GLint, points : GLdouble*)
  fun map_vertex_attrib2f_apple = glMapVertexAttrib2fAPPLE(index : GLuint, size : GLuint, u1 : GLfloat, u2 : GLfloat, ustride : GLint, uorder : GLint, v1 : GLfloat, v2 : GLfloat, vstride : GLint, vorder : GLint, points : GLfloat*)
  fun draw_buffers_ati = glDrawBuffersATI(n : GLsizei, bufs : GLenum*)
  fun element_pointer_ati = glElementPointerATI(type : GLenum, pointer : Void*)
  fun draw_element_array_ati = glDrawElementArrayATI(mode : GLenum, count : GLsizei)
  fun draw_range_element_array_ati = glDrawRangeElementArrayATI(mode : GLenum, start : GLuint, _end : GLuint, count : GLsizei)
  fun tex_bump_parameteriv_ati = glTexBumpParameterivATI(pname : GLenum, param : GLint*)
  fun tex_bump_parameterfv_ati = glTexBumpParameterfvATI(pname : GLenum, param : GLfloat*)
  fun get_tex_bump_parameteriv_ati = glGetTexBumpParameterivATI(pname : GLenum, param : GLint*)
  fun get_tex_bump_parameterfv_ati = glGetTexBumpParameterfvATI(pname : GLenum, param : GLfloat*)
  fun gen_fragment_shaders_ati = glGenFragmentShadersATI(range : GLuint) : GLuint
  fun bind_fragment_shader_ati = glBindFragmentShaderATI(id : GLuint)
  fun delete_fragment_shader_ati = glDeleteFragmentShaderATI(id : GLuint)
  fun begin_fragment_shader_ati = glBeginFragmentShaderATI
  fun end_fragment_shader_ati = glEndFragmentShaderATI
  fun pass_tex_coord_ati = glPassTexCoordATI(dst : GLuint, coord : GLuint, swizzle : GLenum)
  fun sample_map_ati = glSampleMapATI(dst : GLuint, interp : GLuint, swizzle : GLenum)
  fun color_fragment_op1ati = glColorFragmentOp1ATI(op : GLenum, dst : GLuint, dst_mask : GLuint, dst_mod : GLuint, arg1 : GLuint, arg1rep : GLuint, arg1mod : GLuint)
  fun color_fragment_op2ati = glColorFragmentOp2ATI(op : GLenum, dst : GLuint, dst_mask : GLuint, dst_mod : GLuint, arg1 : GLuint, arg1rep : GLuint, arg1mod : GLuint, arg2 : GLuint, arg2rep : GLuint, arg2mod : GLuint)
  fun color_fragment_op3ati = glColorFragmentOp3ATI(op : GLenum, dst : GLuint, dst_mask : GLuint, dst_mod : GLuint, arg1 : GLuint, arg1rep : GLuint, arg1mod : GLuint, arg2 : GLuint, arg2rep : GLuint, arg2mod : GLuint, arg3 : GLuint, arg3rep : GLuint, arg3mod : GLuint)
  fun alpha_fragment_op1ati = glAlphaFragmentOp1ATI(op : GLenum, dst : GLuint, dst_mod : GLuint, arg1 : GLuint, arg1rep : GLuint, arg1mod : GLuint)
  fun alpha_fragment_op2ati = glAlphaFragmentOp2ATI(op : GLenum, dst : GLuint, dst_mod : GLuint, arg1 : GLuint, arg1rep : GLuint, arg1mod : GLuint, arg2 : GLuint, arg2rep : GLuint, arg2mod : GLuint)
  fun alpha_fragment_op3ati = glAlphaFragmentOp3ATI(op : GLenum, dst : GLuint, dst_mod : GLuint, arg1 : GLuint, arg1rep : GLuint, arg1mod : GLuint, arg2 : GLuint, arg2rep : GLuint, arg2mod : GLuint, arg3 : GLuint, arg3rep : GLuint, arg3mod : GLuint)
  fun set_fragment_shader_constant_ati = glSetFragmentShaderConstantATI(dst : GLuint, value : GLfloat*)
  fun map_object_buffer_ati = glMapObjectBufferATI(buffer : GLuint) : Void*
  fun unmap_object_buffer_ati = glUnmapObjectBufferATI(buffer : GLuint)
  fun pn_trianglesi_ati = glPNTrianglesiATI(pname : GLenum, param : GLint)
  fun pn_trianglesf_ati = glPNTrianglesfATI(pname : GLenum, param : GLfloat)
  fun stencil_op_separate_ati = glStencilOpSeparateATI(face : GLenum, sfail : GLenum, dpfail : GLenum, dppass : GLenum)
  fun stencil_func_separate_ati = glStencilFuncSeparateATI(frontfunc : GLenum, backfunc : GLenum, ref : GLint, mask : GLuint)
  fun new_object_buffer_ati = glNewObjectBufferATI(size : GLsizei, pointer : Void*, usage : GLenum) : GLuint
  fun is_object_buffer_ati = glIsObjectBufferATI(buffer : GLuint) : GLboolean
  fun update_object_buffer_ati = glUpdateObjectBufferATI(buffer : GLuint, offset : GLuint, size : GLsizei, pointer : Void*, preserve : GLenum)
  fun get_object_bufferfv_ati = glGetObjectBufferfvATI(buffer : GLuint, pname : GLenum, params : GLfloat*)
  fun get_object_bufferiv_ati = glGetObjectBufferivATI(buffer : GLuint, pname : GLenum, params : GLint*)
  fun free_object_buffer_ati = glFreeObjectBufferATI(buffer : GLuint)
  fun array_object_ati = glArrayObjectATI(array : GLenum, size : GLint, type : GLenum, stride : GLsizei, buffer : GLuint, offset : GLuint)
  fun get_array_objectfv_ati = glGetArrayObjectfvATI(array : GLenum, pname : GLenum, params : GLfloat*)
  fun get_array_objectiv_ati = glGetArrayObjectivATI(array : GLenum, pname : GLenum, params : GLint*)
  fun variant_array_object_ati = glVariantArrayObjectATI(id : GLuint, type : GLenum, stride : GLsizei, buffer : GLuint, offset : GLuint)
  fun get_variant_array_objectfv_ati = glGetVariantArrayObjectfvATI(id : GLuint, pname : GLenum, params : GLfloat*)
  fun get_variant_array_objectiv_ati = glGetVariantArrayObjectivATI(id : GLuint, pname : GLenum, params : GLint*)
  fun vertex_attrib_array_object_ati = glVertexAttribArrayObjectATI(index : GLuint, size : GLint, type : GLenum, normalized : GLboolean, stride : GLsizei, buffer : GLuint, offset : GLuint)
  fun get_vertex_attrib_array_objectfv_ati = glGetVertexAttribArrayObjectfvATI(index : GLuint, pname : GLenum, params : GLfloat*)
  fun get_vertex_attrib_array_objectiv_ati = glGetVertexAttribArrayObjectivATI(index : GLuint, pname : GLenum, params : GLint*)
  fun vertex_stream1s_ati = glVertexStream1sATI(stream : GLenum, x : GLshort)
  fun vertex_stream1sv_ati = glVertexStream1svATI(stream : GLenum, coords : GLshort*)
  fun vertex_stream1i_ati = glVertexStream1iATI(stream : GLenum, x : GLint)
  fun vertex_stream1iv_ati = glVertexStream1ivATI(stream : GLenum, coords : GLint*)
  fun vertex_stream1f_ati = glVertexStream1fATI(stream : GLenum, x : GLfloat)
  fun vertex_stream1fv_ati = glVertexStream1fvATI(stream : GLenum, coords : GLfloat*)
  fun vertex_stream1d_ati = glVertexStream1dATI(stream : GLenum, x : GLdouble)
  fun vertex_stream1dv_ati = glVertexStream1dvATI(stream : GLenum, coords : GLdouble*)
  fun vertex_stream2s_ati = glVertexStream2sATI(stream : GLenum, x : GLshort, y : GLshort)
  fun vertex_stream2sv_ati = glVertexStream2svATI(stream : GLenum, coords : GLshort*)
  fun vertex_stream2i_ati = glVertexStream2iATI(stream : GLenum, x : GLint, y : GLint)
  fun vertex_stream2iv_ati = glVertexStream2ivATI(stream : GLenum, coords : GLint*)
  fun vertex_stream2f_ati = glVertexStream2fATI(stream : GLenum, x : GLfloat, y : GLfloat)
  fun vertex_stream2fv_ati = glVertexStream2fvATI(stream : GLenum, coords : GLfloat*)
  fun vertex_stream2d_ati = glVertexStream2dATI(stream : GLenum, x : GLdouble, y : GLdouble)
  fun vertex_stream2dv_ati = glVertexStream2dvATI(stream : GLenum, coords : GLdouble*)
  fun vertex_stream3s_ati = glVertexStream3sATI(stream : GLenum, x : GLshort, y : GLshort, z : GLshort)
  fun vertex_stream3sv_ati = glVertexStream3svATI(stream : GLenum, coords : GLshort*)
  fun vertex_stream3i_ati = glVertexStream3iATI(stream : GLenum, x : GLint, y : GLint, z : GLint)
  fun vertex_stream3iv_ati = glVertexStream3ivATI(stream : GLenum, coords : GLint*)
  fun vertex_stream3f_ati = glVertexStream3fATI(stream : GLenum, x : GLfloat, y : GLfloat, z : GLfloat)
  fun vertex_stream3fv_ati = glVertexStream3fvATI(stream : GLenum, coords : GLfloat*)
  fun vertex_stream3d_ati = glVertexStream3dATI(stream : GLenum, x : GLdouble, y : GLdouble, z : GLdouble)
  fun vertex_stream3dv_ati = glVertexStream3dvATI(stream : GLenum, coords : GLdouble*)
  fun vertex_stream4s_ati = glVertexStream4sATI(stream : GLenum, x : GLshort, y : GLshort, z : GLshort, w : GLshort)
  fun vertex_stream4sv_ati = glVertexStream4svATI(stream : GLenum, coords : GLshort*)
  fun vertex_stream4i_ati = glVertexStream4iATI(stream : GLenum, x : GLint, y : GLint, z : GLint, w : GLint)
  fun vertex_stream4iv_ati = glVertexStream4ivATI(stream : GLenum, coords : GLint*)
  fun vertex_stream4f_ati = glVertexStream4fATI(stream : GLenum, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun vertex_stream4fv_ati = glVertexStream4fvATI(stream : GLenum, coords : GLfloat*)
  fun vertex_stream4d_ati = glVertexStream4dATI(stream : GLenum, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun vertex_stream4dv_ati = glVertexStream4dvATI(stream : GLenum, coords : GLdouble*)
  fun normal_stream3b_ati = glNormalStream3bATI(stream : GLenum, nx : GLbyte, ny : GLbyte, nz : GLbyte)
  fun normal_stream3bv_ati = glNormalStream3bvATI(stream : GLenum, coords : GLbyte*)
  fun normal_stream3s_ati = glNormalStream3sATI(stream : GLenum, nx : GLshort, ny : GLshort, nz : GLshort)
  fun normal_stream3sv_ati = glNormalStream3svATI(stream : GLenum, coords : GLshort*)
  fun normal_stream3i_ati = glNormalStream3iATI(stream : GLenum, nx : GLint, ny : GLint, nz : GLint)
  fun normal_stream3iv_ati = glNormalStream3ivATI(stream : GLenum, coords : GLint*)
  fun normal_stream3f_ati = glNormalStream3fATI(stream : GLenum, nx : GLfloat, ny : GLfloat, nz : GLfloat)
  fun normal_stream3fv_ati = glNormalStream3fvATI(stream : GLenum, coords : GLfloat*)
  fun normal_stream3d_ati = glNormalStream3dATI(stream : GLenum, nx : GLdouble, ny : GLdouble, nz : GLdouble)
  fun normal_stream3dv_ati = glNormalStream3dvATI(stream : GLenum, coords : GLdouble*)
  fun client_active_vertex_stream_ati = glClientActiveVertexStreamATI(stream : GLenum)
  fun vertex_blend_envi_ati = glVertexBlendEnviATI(pname : GLenum, param : GLint)
  fun vertex_blend_envf_ati = glVertexBlendEnvfATI(pname : GLenum, param : GLfloat)
  fun uniform_buffer_ext = glUniformBufferEXT(program : GLuint, location : GLint, buffer : GLuint)
  fun get_uniform_buffer_size_ext = glGetUniformBufferSizeEXT(program : GLuint, location : GLint) : GLint
  fun get_uniform_offset_ext = glGetUniformOffsetEXT(program : GLuint, location : GLint) : GLintptr
  fun blend_color_ext = glBlendColorEXT(red : GLfloat, green : GLfloat, blue : GLfloat, alpha : GLfloat)
  fun blend_equation_separate_ext = glBlendEquationSeparateEXT(mode_rgb : GLenum, mode_alpha : GLenum)
  fun blend_func_separate_ext = glBlendFuncSeparateEXT(sfactor_rgb : GLenum, dfactor_rgb : GLenum, sfactor_alpha : GLenum, dfactor_alpha : GLenum)
  fun blend_equation_ext = glBlendEquationEXT(mode : GLenum)
  fun color_sub_table_ext = glColorSubTableEXT(target : GLenum, start : GLsizei, count : GLsizei, format : GLenum, type : GLenum, data : Void*)
  fun copy_color_sub_table_ext = glCopyColorSubTableEXT(target : GLenum, start : GLsizei, x : GLint, y : GLint, width : GLsizei)
  fun lock_arrays_ext = glLockArraysEXT(first : GLint, count : GLsizei)
  fun unlock_arrays_ext = glUnlockArraysEXT
  fun convolution_filter1dext = glConvolutionFilter1DEXT(target : GLenum, internalformat : GLenum, width : GLsizei, format : GLenum, type : GLenum, image : Void*)
  fun convolution_filter2dext = glConvolutionFilter2DEXT(target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, image : Void*)
  fun convolution_parameterf_ext = glConvolutionParameterfEXT(target : GLenum, pname : GLenum, params : GLfloat)
  fun convolution_parameterfv_ext = glConvolutionParameterfvEXT(target : GLenum, pname : GLenum, params : GLfloat*)
  fun convolution_parameteri_ext = glConvolutionParameteriEXT(target : GLenum, pname : GLenum, params : GLint)
  fun convolution_parameteriv_ext = glConvolutionParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun copy_convolution_filter1dext = glCopyConvolutionFilter1DEXT(target : GLenum, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei)
  fun copy_convolution_filter2dext = glCopyConvolutionFilter2DEXT(target : GLenum, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun get_convolution_filter_ext = glGetConvolutionFilterEXT(target : GLenum, format : GLenum, type : GLenum, image : Void*)
  fun get_convolution_parameterfv_ext = glGetConvolutionParameterfvEXT(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_convolution_parameteriv_ext = glGetConvolutionParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun get_separable_filter_ext = glGetSeparableFilterEXT(target : GLenum, format : GLenum, type : GLenum, row : Void*, column : Void*, span : Void*)
  fun separable_filter2dext = glSeparableFilter2DEXT(target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, row : Void*, column : Void*)
  fun tangent3b_ext = glTangent3bEXT(tx : GLbyte, ty : GLbyte, tz : GLbyte)
  fun tangent3bv_ext = glTangent3bvEXT(v : GLbyte*)
  fun tangent3d_ext = glTangent3dEXT(tx : GLdouble, ty : GLdouble, tz : GLdouble)
  fun tangent3dv_ext = glTangent3dvEXT(v : GLdouble*)
  fun tangent3f_ext = glTangent3fEXT(tx : GLfloat, ty : GLfloat, tz : GLfloat)
  fun tangent3fv_ext = glTangent3fvEXT(v : GLfloat*)
  fun tangent3i_ext = glTangent3iEXT(tx : GLint, ty : GLint, tz : GLint)
  fun tangent3iv_ext = glTangent3ivEXT(v : GLint*)
  fun tangent3s_ext = glTangent3sEXT(tx : GLshort, ty : GLshort, tz : GLshort)
  fun tangent3sv_ext = glTangent3svEXT(v : GLshort*)
  fun binormal3b_ext = glBinormal3bEXT(bx : GLbyte, by : GLbyte, bz : GLbyte)
  fun binormal3bv_ext = glBinormal3bvEXT(v : GLbyte*)
  fun binormal3d_ext = glBinormal3dEXT(bx : GLdouble, by : GLdouble, bz : GLdouble)
  fun binormal3dv_ext = glBinormal3dvEXT(v : GLdouble*)
  fun binormal3f_ext = glBinormal3fEXT(bx : GLfloat, by : GLfloat, bz : GLfloat)
  fun binormal3fv_ext = glBinormal3fvEXT(v : GLfloat*)
  fun binormal3i_ext = glBinormal3iEXT(bx : GLint, by : GLint, bz : GLint)
  fun binormal3iv_ext = glBinormal3ivEXT(v : GLint*)
  fun binormal3s_ext = glBinormal3sEXT(bx : GLshort, by : GLshort, bz : GLshort)
  fun binormal3sv_ext = glBinormal3svEXT(v : GLshort*)
  fun tangent_pointer_ext = glTangentPointerEXT(type : GLenum, stride : GLsizei, pointer : Void*)
  fun binormal_pointer_ext = glBinormalPointerEXT(type : GLenum, stride : GLsizei, pointer : Void*)
  fun copy_tex_image1dext = glCopyTexImage1DEXT(target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, border : GLint)
  fun copy_tex_image2dext = glCopyTexImage2DEXT(target : GLenum, level : GLint, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei, height : GLsizei, border : GLint)
  fun copy_tex_sub_image1dext = glCopyTexSubImage1DEXT(target : GLenum, level : GLint, xoffset : GLint, x : GLint, y : GLint, width : GLsizei)
  fun copy_tex_sub_image2dext = glCopyTexSubImage2DEXT(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun copy_tex_sub_image3dext = glCopyTexSubImage3DEXT(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, x : GLint, y : GLint, width : GLsizei, height : GLsizei)
  fun cull_parameterdv_ext = glCullParameterdvEXT(pname : GLenum, params : GLdouble*)
  fun cull_parameterfv_ext = glCullParameterfvEXT(pname : GLenum, params : GLfloat*)
  fun depth_bounds_ext = glDepthBoundsEXT(zmin : GLclampd, zmax : GLclampd)
  fun color_mask_indexed_ext = glColorMaskIndexedEXT(index : GLuint, r : GLboolean, g : GLboolean, b : GLboolean, a : GLboolean)
  fun draw_range_elements_ext = glDrawRangeElementsEXT(mode : GLenum, start : GLuint, _end : GLuint, count : GLsizei, type : GLenum, indices : Void*)
  fun buffer_storage_external_ext = glBufferStorageExternalEXT(target : GLenum, offset : GLintptr, size : GLsizeiptr, client_buffer : GLeglClientBufferExt, flags : GLbitfield)
  alias GLeglClientBufferExt = Void*
  fun named_buffer_storage_external_ext = glNamedBufferStorageExternalEXT(buffer : GLuint, offset : GLintptr, size : GLsizeiptr, client_buffer : GLeglClientBufferExt, flags : GLbitfield)
  fun fog_coordf_ext = glFogCoordfEXT(coord : GLfloat)
  fun fog_coordfv_ext = glFogCoordfvEXT(coord : GLfloat*)
  fun fog_coordd_ext = glFogCoorddEXT(coord : GLdouble)
  fun fog_coorddv_ext = glFogCoorddvEXT(coord : GLdouble*)
  fun fog_coord_pointer_ext = glFogCoordPointerEXT(type : GLenum, stride : GLsizei, pointer : Void*)
  fun blit_framebuffer_ext = glBlitFramebufferEXT(src_x0 : GLint, src_y0 : GLint, src_x1 : GLint, src_y1 : GLint, dst_x0 : GLint, dst_y0 : GLint, dst_x1 : GLint, dst_y1 : GLint, mask : GLbitfield, filter : GLenum)
  fun renderbuffer_storage_multisample_ext = glRenderbufferStorageMultisampleEXT(target : GLenum, samples : GLsizei, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun is_renderbuffer_ext = glIsRenderbufferEXT(renderbuffer : GLuint) : GLboolean
  fun bind_renderbuffer_ext = glBindRenderbufferEXT(target : GLenum, renderbuffer : GLuint)
  fun delete_renderbuffers_ext = glDeleteRenderbuffersEXT(n : GLsizei, renderbuffers : GLuint*)
  fun gen_renderbuffers_ext = glGenRenderbuffersEXT(n : GLsizei, renderbuffers : GLuint*)
  fun renderbuffer_storage_ext = glRenderbufferStorageEXT(target : GLenum, internalformat : GLenum, width : GLsizei, height : GLsizei)
  fun get_renderbuffer_parameteriv_ext = glGetRenderbufferParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun is_framebuffer_ext = glIsFramebufferEXT(framebuffer : GLuint) : GLboolean
  fun bind_framebuffer_ext = glBindFramebufferEXT(target : GLenum, framebuffer : GLuint)
  fun delete_framebuffers_ext = glDeleteFramebuffersEXT(n : GLsizei, framebuffers : GLuint*)
  fun gen_framebuffers_ext = glGenFramebuffersEXT(n : GLsizei, framebuffers : GLuint*)
  fun check_framebuffer_status_ext = glCheckFramebufferStatusEXT(target : GLenum) : GLenum
  fun framebuffer_texture1dext = glFramebufferTexture1DEXT(target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint)
  fun framebuffer_texture2dext = glFramebufferTexture2DEXT(target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint)
  fun framebuffer_texture3dext = glFramebufferTexture3DEXT(target : GLenum, attachment : GLenum, textarget : GLenum, texture : GLuint, level : GLint, zoffset : GLint)
  fun framebuffer_renderbuffer_ext = glFramebufferRenderbufferEXT(target : GLenum, attachment : GLenum, renderbuffertarget : GLenum, renderbuffer : GLuint)
  fun get_framebuffer_attachment_parameteriv_ext = glGetFramebufferAttachmentParameterivEXT(target : GLenum, attachment : GLenum, pname : GLenum, params : GLint*)
  fun generate_mipmap_ext = glGenerateMipmapEXT(target : GLenum)
  fun program_parameteri_ext = glProgramParameteriEXT(program : GLuint, pname : GLenum, value : GLint)
  fun program_env_parameters4fv_ext = glProgramEnvParameters4fvEXT(target : GLenum, index : GLuint, count : GLsizei, params : GLfloat*)
  fun program_local_parameters4fv_ext = glProgramLocalParameters4fvEXT(target : GLenum, index : GLuint, count : GLsizei, params : GLfloat*)
  fun get_uniformuiv_ext = glGetUniformuivEXT(program : GLuint, location : GLint, params : GLuint*)
  fun bind_frag_data_location_ext = glBindFragDataLocationEXT(program : GLuint, color : GLuint, name : GLchar*)
  fun get_frag_data_location_ext = glGetFragDataLocationEXT(program : GLuint, name : GLchar*) : GLint
  fun uniform1ui_ext = glUniform1uiEXT(location : GLint, v0 : GLuint)
  fun uniform2ui_ext = glUniform2uiEXT(location : GLint, v0 : GLuint, v1 : GLuint)
  fun uniform3ui_ext = glUniform3uiEXT(location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint)
  fun uniform4ui_ext = glUniform4uiEXT(location : GLint, v0 : GLuint, v1 : GLuint, v2 : GLuint, v3 : GLuint)
  fun uniform1uiv_ext = glUniform1uivEXT(location : GLint, count : GLsizei, value : GLuint*)
  fun uniform2uiv_ext = glUniform2uivEXT(location : GLint, count : GLsizei, value : GLuint*)
  fun uniform3uiv_ext = glUniform3uivEXT(location : GLint, count : GLsizei, value : GLuint*)
  fun uniform4uiv_ext = glUniform4uivEXT(location : GLint, count : GLsizei, value : GLuint*)
  fun get_histogram_ext = glGetHistogramEXT(target : GLenum, reset : GLboolean, format : GLenum, type : GLenum, values : Void*)
  fun get_histogram_parameterfv_ext = glGetHistogramParameterfvEXT(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_histogram_parameteriv_ext = glGetHistogramParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun get_minmax_ext = glGetMinmaxEXT(target : GLenum, reset : GLboolean, format : GLenum, type : GLenum, values : Void*)
  fun get_minmax_parameterfv_ext = glGetMinmaxParameterfvEXT(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_minmax_parameteriv_ext = glGetMinmaxParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun histogram_ext = glHistogramEXT(target : GLenum, width : GLsizei, internalformat : GLenum, sink : GLboolean)
  fun minmax_ext = glMinmaxEXT(target : GLenum, internalformat : GLenum, sink : GLboolean)
  fun reset_histogram_ext = glResetHistogramEXT(target : GLenum)
  fun reset_minmax_ext = glResetMinmaxEXT(target : GLenum)
  fun index_func_ext = glIndexFuncEXT(func : GLenum, ref : GLclampf)
  fun index_material_ext = glIndexMaterialEXT(face : GLenum, mode : GLenum)
  fun apply_texture_ext = glApplyTextureEXT(mode : GLenum)
  fun texture_light_ext = glTextureLightEXT(pname : GLenum)
  fun texture_material_ext = glTextureMaterialEXT(face : GLenum, mode : GLenum)
  fun get_unsigned_bytev_ext = glGetUnsignedBytevEXT(pname : GLenum, data : GLubyte*)
  fun get_unsigned_bytei_v_ext = glGetUnsignedBytei_vEXT(target : GLenum, index : GLuint, data : GLubyte*)
  fun delete_memory_objects_ext = glDeleteMemoryObjectsEXT(n : GLsizei, memory_objects : GLuint*)
  fun is_memory_object_ext = glIsMemoryObjectEXT(memory_object : GLuint) : GLboolean
  fun create_memory_objects_ext = glCreateMemoryObjectsEXT(n : GLsizei, memory_objects : GLuint*)
  fun memory_object_parameteriv_ext = glMemoryObjectParameterivEXT(memory_object : GLuint, pname : GLenum, params : GLint*)
  fun get_memory_object_parameteriv_ext = glGetMemoryObjectParameterivEXT(memory_object : GLuint, pname : GLenum, params : GLint*)
  fun tex_storage_mem2dext = glTexStorageMem2DEXT(target : GLenum, levels : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, memory : GLuint, offset : GLuint64)
  fun tex_storage_mem2d_multisample_ext = glTexStorageMem2DMultisampleEXT(target : GLenum, samples : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, fixed_sample_locations : GLboolean, memory : GLuint, offset : GLuint64)
  fun tex_storage_mem3dext = glTexStorageMem3DEXT(target : GLenum, levels : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, memory : GLuint, offset : GLuint64)
  fun tex_storage_mem3d_multisample_ext = glTexStorageMem3DMultisampleEXT(target : GLenum, samples : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixed_sample_locations : GLboolean, memory : GLuint, offset : GLuint64)
  fun buffer_storage_mem_ext = glBufferStorageMemEXT(target : GLenum, size : GLsizeiptr, memory : GLuint, offset : GLuint64)
  fun texture_storage_mem2dext = glTextureStorageMem2DEXT(texture : GLuint, levels : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, memory : GLuint, offset : GLuint64)
  fun texture_storage_mem2d_multisample_ext = glTextureStorageMem2DMultisampleEXT(texture : GLuint, samples : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, fixed_sample_locations : GLboolean, memory : GLuint, offset : GLuint64)
  fun texture_storage_mem3dext = glTextureStorageMem3DEXT(texture : GLuint, levels : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, memory : GLuint, offset : GLuint64)
  fun texture_storage_mem3d_multisample_ext = glTextureStorageMem3DMultisampleEXT(texture : GLuint, samples : GLsizei, internal_format : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, fixed_sample_locations : GLboolean, memory : GLuint, offset : GLuint64)
  fun named_buffer_storage_mem_ext = glNamedBufferStorageMemEXT(buffer : GLuint, size : GLsizeiptr, memory : GLuint, offset : GLuint64)
  fun tex_storage_mem1dext = glTexStorageMem1DEXT(target : GLenum, levels : GLsizei, internal_format : GLenum, width : GLsizei, memory : GLuint, offset : GLuint64)
  fun texture_storage_mem1dext = glTextureStorageMem1DEXT(texture : GLuint, levels : GLsizei, internal_format : GLenum, width : GLsizei, memory : GLuint, offset : GLuint64)
  fun import_memory_fd_ext = glImportMemoryFdEXT(memory : GLuint, size : GLuint64, handle_type : GLenum, fd : GLint)
  fun import_memory_win32handle_ext = glImportMemoryWin32HandleEXT(memory : GLuint, size : GLuint64, handle_type : GLenum, handle : Void*)
  fun import_memory_win32name_ext = glImportMemoryWin32NameEXT(memory : GLuint, size : GLuint64, handle_type : GLenum, name : Void*)
  fun multi_draw_arrays_ext = glMultiDrawArraysEXT(mode : GLenum, first : GLint*, count : GLsizei*, primcount : GLsizei)
  fun multi_draw_elements_ext = glMultiDrawElementsEXT(mode : GLenum, count : GLsizei*, type : GLenum, indices : Void**, primcount : GLsizei)
  fun sample_mask_ext = glSampleMaskEXT(value : GLclampf, invert : GLboolean)
  fun sample_pattern_ext = glSamplePatternEXT(pattern : GLenum)
  fun color_table_ext = glColorTableEXT(target : GLenum, internal_format : GLenum, width : GLsizei, format : GLenum, type : GLenum, table : Void*)
  fun get_color_table_ext = glGetColorTableEXT(target : GLenum, format : GLenum, type : GLenum, data : Void*)
  fun get_color_table_parameteriv_ext = glGetColorTableParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun get_color_table_parameterfv_ext = glGetColorTableParameterfvEXT(target : GLenum, pname : GLenum, params : GLfloat*)
  fun pixel_transform_parameteri_ext = glPixelTransformParameteriEXT(target : GLenum, pname : GLenum, param : GLint)
  fun pixel_transform_parameterf_ext = glPixelTransformParameterfEXT(target : GLenum, pname : GLenum, param : GLfloat)
  fun pixel_transform_parameteriv_ext = glPixelTransformParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun pixel_transform_parameterfv_ext = glPixelTransformParameterfvEXT(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_pixel_transform_parameteriv_ext = glGetPixelTransformParameterivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun get_pixel_transform_parameterfv_ext = glGetPixelTransformParameterfvEXT(target : GLenum, pname : GLenum, params : GLfloat*)
  fun point_parameterf_ext = glPointParameterfEXT(pname : GLenum, param : GLfloat)
  fun point_parameterfv_ext = glPointParameterfvEXT(pname : GLenum, params : GLfloat*)
  fun polygon_offset_ext = glPolygonOffsetEXT(factor : GLfloat, bias : GLfloat)
  fun provoking_vertex_ext = glProvokingVertexEXT(mode : GLenum)
  fun secondary_color3b_ext = glSecondaryColor3bEXT(red : GLbyte, green : GLbyte, blue : GLbyte)
  fun secondary_color3bv_ext = glSecondaryColor3bvEXT(v : GLbyte*)
  fun secondary_color3d_ext = glSecondaryColor3dEXT(red : GLdouble, green : GLdouble, blue : GLdouble)
  fun secondary_color3dv_ext = glSecondaryColor3dvEXT(v : GLdouble*)
  fun secondary_color3f_ext = glSecondaryColor3fEXT(red : GLfloat, green : GLfloat, blue : GLfloat)
  fun secondary_color3fv_ext = glSecondaryColor3fvEXT(v : GLfloat*)
  fun secondary_color3i_ext = glSecondaryColor3iEXT(red : GLint, green : GLint, blue : GLint)
  fun secondary_color3iv_ext = glSecondaryColor3ivEXT(v : GLint*)
  fun secondary_color3s_ext = glSecondaryColor3sEXT(red : GLshort, green : GLshort, blue : GLshort)
  fun secondary_color3sv_ext = glSecondaryColor3svEXT(v : GLshort*)
  fun secondary_color3ub_ext = glSecondaryColor3ubEXT(red : GLubyte, green : GLubyte, blue : GLubyte)
  fun secondary_color3ubv_ext = glSecondaryColor3ubvEXT(v : GLubyte*)
  fun secondary_color3ui_ext = glSecondaryColor3uiEXT(red : GLuint, green : GLuint, blue : GLuint)
  fun secondary_color3uiv_ext = glSecondaryColor3uivEXT(v : GLuint*)
  fun secondary_color3us_ext = glSecondaryColor3usEXT(red : GLushort, green : GLushort, blue : GLushort)
  fun secondary_color3usv_ext = glSecondaryColor3usvEXT(v : GLushort*)
  fun secondary_color_pointer_ext = glSecondaryColorPointerEXT(size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun gen_semaphores_ext = glGenSemaphoresEXT(n : GLsizei, semaphores : GLuint*)
  fun delete_semaphores_ext = glDeleteSemaphoresEXT(n : GLsizei, semaphores : GLuint*)
  fun is_semaphore_ext = glIsSemaphoreEXT(semaphore : GLuint) : GLboolean
  fun semaphore_parameterui64v_ext = glSemaphoreParameterui64vEXT(semaphore : GLuint, pname : GLenum, params : GLuint64*)
  fun get_semaphore_parameterui64v_ext = glGetSemaphoreParameterui64vEXT(semaphore : GLuint, pname : GLenum, params : GLuint64*)
  fun wait_semaphore_ext = glWaitSemaphoreEXT(semaphore : GLuint, num_buffer_barriers : GLuint, buffers : GLuint*, num_texture_barriers : GLuint, textures : GLuint*, src_layouts : GLenum*)
  fun signal_semaphore_ext = glSignalSemaphoreEXT(semaphore : GLuint, num_buffer_barriers : GLuint, buffers : GLuint*, num_texture_barriers : GLuint, textures : GLuint*, dst_layouts : GLenum*)
  fun import_semaphore_fd_ext = glImportSemaphoreFdEXT(semaphore : GLuint, handle_type : GLenum, fd : GLint)
  fun import_semaphore_win32handle_ext = glImportSemaphoreWin32HandleEXT(semaphore : GLuint, handle_type : GLenum, handle : Void*)
  fun import_semaphore_win32name_ext = glImportSemaphoreWin32NameEXT(semaphore : GLuint, handle_type : GLenum, name : Void*)
  fun bind_image_texture_ext = glBindImageTextureEXT(index : GLuint, texture : GLuint, level : GLint, layered : GLboolean, layer : GLint, access : GLenum, format : GLint)
  fun memory_barrier_ext = glMemoryBarrierEXT(barriers : GLbitfield)
  fun stencil_clear_tag_ext = glStencilClearTagEXT(stencil_tag_bits : GLsizei, stencil_clear_tag : GLuint)
  fun active_stencil_face_ext = glActiveStencilFaceEXT(face : GLenum)
  fun tex_sub_image1dext = glTexSubImage1DEXT(target : GLenum, level : GLint, xoffset : GLint, width : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun tex_sub_image2dext = glTexSubImage2DEXT(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, width : GLsizei, height : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun tex_image3dext = glTexImage3DEXT(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun tex_sub_image3dext = glTexSubImage3DEXT(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun framebuffer_texture_layer_ext = glFramebufferTextureLayerEXT(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, layer : GLint)
  fun tex_buffer_ext = glTexBufferEXT(target : GLenum, internalformat : GLenum, buffer : GLuint)
  fun tex_parameter_iiv_ext = glTexParameterIivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun tex_parameter_iuiv_ext = glTexParameterIuivEXT(target : GLenum, pname : GLenum, params : GLuint*)
  fun get_tex_parameter_iiv_ext = glGetTexParameterIivEXT(target : GLenum, pname : GLenum, params : GLint*)
  fun get_tex_parameter_iuiv_ext = glGetTexParameterIuivEXT(target : GLenum, pname : GLenum, params : GLuint*)
  fun clear_color_ii_ext = glClearColorIiEXT(red : GLint, green : GLint, blue : GLint, alpha : GLint)
  fun clear_color_iui_ext = glClearColorIuiEXT(red : GLuint, green : GLuint, blue : GLuint, alpha : GLuint)
  fun are_textures_resident_ext = glAreTexturesResidentEXT(n : GLsizei, textures : GLuint*, residences : GLboolean*) : GLboolean
  fun bind_texture_ext = glBindTextureEXT(target : GLenum, texture : GLuint)
  fun delete_textures_ext = glDeleteTexturesEXT(n : GLsizei, textures : GLuint*)
  fun gen_textures_ext = glGenTexturesEXT(n : GLsizei, textures : GLuint*)
  fun is_texture_ext = glIsTextureEXT(texture : GLuint) : GLboolean
  fun prioritize_textures_ext = glPrioritizeTexturesEXT(n : GLsizei, textures : GLuint*, priorities : GLclampf*)
  fun texture_normal_ext = glTextureNormalEXT(mode : GLenum)
  fun get_query_objecti64v_ext = glGetQueryObjecti64vEXT(id : GLuint, pname : GLenum, params : GLint64*)
  fun get_query_objectui64v_ext = glGetQueryObjectui64vEXT(id : GLuint, pname : GLenum, params : GLuint64*)
  fun begin_transform_feedback_ext = glBeginTransformFeedbackEXT(primitive_mode : GLenum)
  fun end_transform_feedback_ext = glEndTransformFeedbackEXT
  fun bind_buffer_range_ext = glBindBufferRangeEXT(target : GLenum, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr)
  fun bind_buffer_offset_ext = glBindBufferOffsetEXT(target : GLenum, index : GLuint, buffer : GLuint, offset : GLintptr)
  fun bind_buffer_base_ext = glBindBufferBaseEXT(target : GLenum, index : GLuint, buffer : GLuint)
  fun transform_feedback_varyings_ext = glTransformFeedbackVaryingsEXT(program : GLuint, count : GLsizei, varyings : GLchar**, buffer_mode : GLenum)
  fun get_transform_feedback_varying_ext = glGetTransformFeedbackVaryingEXT(program : GLuint, index : GLuint, buf_size : GLsizei, length : GLsizei*, size : GLsizei*, type : GLenum*, name : GLchar*)
  fun array_element_ext = glArrayElementEXT(i : GLint)
  fun color_pointer_ext = glColorPointerEXT(size : GLint, type : GLenum, stride : GLsizei, count : GLsizei, pointer : Void*)
  fun draw_arrays_ext = glDrawArraysEXT(mode : GLenum, first : GLint, count : GLsizei)
  fun edge_flag_pointer_ext = glEdgeFlagPointerEXT(stride : GLsizei, count : GLsizei, pointer : GLboolean*)
  fun get_pointerv_ext = glGetPointervEXT(pname : GLenum, params : Void**)
  fun index_pointer_ext = glIndexPointerEXT(type : GLenum, stride : GLsizei, count : GLsizei, pointer : Void*)
  fun normal_pointer_ext = glNormalPointerEXT(type : GLenum, stride : GLsizei, count : GLsizei, pointer : Void*)
  fun tex_coord_pointer_ext = glTexCoordPointerEXT(size : GLint, type : GLenum, stride : GLsizei, count : GLsizei, pointer : Void*)
  fun vertex_pointer_ext = glVertexPointerEXT(size : GLint, type : GLenum, stride : GLsizei, count : GLsizei, pointer : Void*)
  fun vertex_attrib_l1d_ext = glVertexAttribL1dEXT(index : GLuint, x : GLdouble)
  fun vertex_attrib_l2d_ext = glVertexAttribL2dEXT(index : GLuint, x : GLdouble, y : GLdouble)
  fun vertex_attrib_l3d_ext = glVertexAttribL3dEXT(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble)
  fun vertex_attrib_l4d_ext = glVertexAttribL4dEXT(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun vertex_attrib_l1dv_ext = glVertexAttribL1dvEXT(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l2dv_ext = glVertexAttribL2dvEXT(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l3dv_ext = glVertexAttribL3dvEXT(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l4dv_ext = glVertexAttribL4dvEXT(index : GLuint, v : GLdouble*)
  fun vertex_attrib_l_pointer_ext = glVertexAttribLPointerEXT(index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun get_vertex_attrib_ldv_ext = glGetVertexAttribLdvEXT(index : GLuint, pname : GLenum, params : GLdouble*)
  fun begin_vertex_shader_ext = glBeginVertexShaderEXT
  fun end_vertex_shader_ext = glEndVertexShaderEXT
  fun bind_vertex_shader_ext = glBindVertexShaderEXT(id : GLuint)
  fun gen_vertex_shaders_ext = glGenVertexShadersEXT(range : GLuint) : GLuint
  fun delete_vertex_shader_ext = glDeleteVertexShaderEXT(id : GLuint)
  fun shader_op1ext = glShaderOp1EXT(op : GLenum, res : GLuint, arg1 : GLuint)
  fun shader_op2ext = glShaderOp2EXT(op : GLenum, res : GLuint, arg1 : GLuint, arg2 : GLuint)
  fun shader_op3ext = glShaderOp3EXT(op : GLenum, res : GLuint, arg1 : GLuint, arg2 : GLuint, arg3 : GLuint)
  fun swizzle_ext = glSwizzleEXT(res : GLuint, in : GLuint, out_x : GLenum, out_y : GLenum, out_z : GLenum, out_w : GLenum)
  fun write_mask_ext = glWriteMaskEXT(res : GLuint, in : GLuint, out_x : GLenum, out_y : GLenum, out_z : GLenum, out_w : GLenum)
  fun insert_component_ext = glInsertComponentEXT(res : GLuint, src : GLuint, num : GLuint)
  fun extract_component_ext = glExtractComponentEXT(res : GLuint, src : GLuint, num : GLuint)
  fun gen_symbols_ext = glGenSymbolsEXT(datatype : GLenum, storagetype : GLenum, range : GLenum, components : GLuint) : GLuint
  fun set_invariant_ext = glSetInvariantEXT(id : GLuint, type : GLenum, addr : Void*)
  fun set_local_constant_ext = glSetLocalConstantEXT(id : GLuint, type : GLenum, addr : Void*)
  fun variantbv_ext = glVariantbvEXT(id : GLuint, addr : GLbyte*)
  fun variantsv_ext = glVariantsvEXT(id : GLuint, addr : GLshort*)
  fun variantiv_ext = glVariantivEXT(id : GLuint, addr : GLint*)
  fun variantfv_ext = glVariantfvEXT(id : GLuint, addr : GLfloat*)
  fun variantdv_ext = glVariantdvEXT(id : GLuint, addr : GLdouble*)
  fun variantubv_ext = glVariantubvEXT(id : GLuint, addr : GLubyte*)
  fun variantusv_ext = glVariantusvEXT(id : GLuint, addr : GLushort*)
  fun variantuiv_ext = glVariantuivEXT(id : GLuint, addr : GLuint*)
  fun variant_pointer_ext = glVariantPointerEXT(id : GLuint, type : GLenum, stride : GLuint, addr : Void*)
  fun enable_variant_client_state_ext = glEnableVariantClientStateEXT(id : GLuint)
  fun disable_variant_client_state_ext = glDisableVariantClientStateEXT(id : GLuint)
  fun bind_light_parameter_ext = glBindLightParameterEXT(light : GLenum, value : GLenum) : GLuint
  fun bind_material_parameter_ext = glBindMaterialParameterEXT(face : GLenum, value : GLenum) : GLuint
  fun bind_tex_gen_parameter_ext = glBindTexGenParameterEXT(unit : GLenum, coord : GLenum, value : GLenum) : GLuint
  fun bind_texture_unit_parameter_ext = glBindTextureUnitParameterEXT(unit : GLenum, value : GLenum) : GLuint
  fun bind_parameter_ext = glBindParameterEXT(value : GLenum) : GLuint
  fun is_variant_enabled_ext = glIsVariantEnabledEXT(id : GLuint, cap : GLenum) : GLboolean
  fun get_variant_booleanv_ext = glGetVariantBooleanvEXT(id : GLuint, value : GLenum, data : GLboolean*)
  fun get_variant_integerv_ext = glGetVariantIntegervEXT(id : GLuint, value : GLenum, data : GLint*)
  fun get_variant_floatv_ext = glGetVariantFloatvEXT(id : GLuint, value : GLenum, data : GLfloat*)
  fun get_variant_pointerv_ext = glGetVariantPointervEXT(id : GLuint, value : GLenum, data : Void**)
  fun get_invariant_booleanv_ext = glGetInvariantBooleanvEXT(id : GLuint, value : GLenum, data : GLboolean*)
  fun get_invariant_integerv_ext = glGetInvariantIntegervEXT(id : GLuint, value : GLenum, data : GLint*)
  fun get_invariant_floatv_ext = glGetInvariantFloatvEXT(id : GLuint, value : GLenum, data : GLfloat*)
  fun get_local_constant_booleanv_ext = glGetLocalConstantBooleanvEXT(id : GLuint, value : GLenum, data : GLboolean*)
  fun get_local_constant_integerv_ext = glGetLocalConstantIntegervEXT(id : GLuint, value : GLenum, data : GLint*)
  fun get_local_constant_floatv_ext = glGetLocalConstantFloatvEXT(id : GLuint, value : GLenum, data : GLfloat*)
  fun vertex_weightf_ext = glVertexWeightfEXT(weight : GLfloat)
  fun vertex_weightfv_ext = glVertexWeightfvEXT(weight : GLfloat*)
  fun vertex_weight_pointer_ext = glVertexWeightPointerEXT(size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun acquire_keyed_mutex_win32ext = glAcquireKeyedMutexWin32EXT(memory : GLuint, key : GLuint64, timeout : GLuint) : GLboolean
  fun release_keyed_mutex_win32ext = glReleaseKeyedMutexWin32EXT(memory : GLuint, key : GLuint64) : GLboolean
  fun import_sync_ext = glImportSyncEXT(external_sync_type : GLenum, external_sync : GLintptr, flags : GLbitfield) : GLsync
  fun frame_terminator_gremedy = glFrameTerminatorGREMEDY
  fun string_marker_gremedy = glStringMarkerGREMEDY(len : GLsizei, string : Void*)
  fun image_transform_parameteri_hp = glImageTransformParameteriHP(target : GLenum, pname : GLenum, param : GLint)
  fun image_transform_parameterf_hp = glImageTransformParameterfHP(target : GLenum, pname : GLenum, param : GLfloat)
  fun image_transform_parameteriv_hp = glImageTransformParameterivHP(target : GLenum, pname : GLenum, params : GLint*)
  fun image_transform_parameterfv_hp = glImageTransformParameterfvHP(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_image_transform_parameteriv_hp = glGetImageTransformParameterivHP(target : GLenum, pname : GLenum, params : GLint*)
  fun get_image_transform_parameterfv_hp = glGetImageTransformParameterfvHP(target : GLenum, pname : GLenum, params : GLfloat*)
  fun multi_mode_draw_arrays_ibm = glMultiModeDrawArraysIBM(mode : GLenum*, first : GLint*, count : GLsizei*, primcount : GLsizei, modestride : GLint)
  fun multi_mode_draw_elements_ibm = glMultiModeDrawElementsIBM(mode : GLenum*, count : GLsizei*, type : GLenum, indices : Void**, primcount : GLsizei, modestride : GLint)
  fun flush_static_data_ibm = glFlushStaticDataIBM(target : GLenum)
  fun color_pointer_list_ibm = glColorPointerListIBM(size : GLint, type : GLenum, stride : GLint, pointer : Void**, ptrstride : GLint)
  fun secondary_color_pointer_list_ibm = glSecondaryColorPointerListIBM(size : GLint, type : GLenum, stride : GLint, pointer : Void**, ptrstride : GLint)
  fun edge_flag_pointer_list_ibm = glEdgeFlagPointerListIBM(stride : GLint, pointer : GLboolean**, ptrstride : GLint)
  fun fog_coord_pointer_list_ibm = glFogCoordPointerListIBM(type : GLenum, stride : GLint, pointer : Void**, ptrstride : GLint)
  fun index_pointer_list_ibm = glIndexPointerListIBM(type : GLenum, stride : GLint, pointer : Void**, ptrstride : GLint)
  fun normal_pointer_list_ibm = glNormalPointerListIBM(type : GLenum, stride : GLint, pointer : Void**, ptrstride : GLint)
  fun tex_coord_pointer_list_ibm = glTexCoordPointerListIBM(size : GLint, type : GLenum, stride : GLint, pointer : Void**, ptrstride : GLint)
  fun vertex_pointer_list_ibm = glVertexPointerListIBM(size : GLint, type : GLenum, stride : GLint, pointer : Void**, ptrstride : GLint)
  fun blend_func_separate_ingr = glBlendFuncSeparateINGR(sfactor_rgb : GLenum, dfactor_rgb : GLenum, sfactor_alpha : GLenum, dfactor_alpha : GLenum)
  fun sync_texture_intel = glSyncTextureINTEL(texture : GLuint)
  fun unmap_texture2dintel = glUnmapTexture2DINTEL(texture : GLuint, level : GLint)
  fun map_texture2dintel = glMapTexture2DINTEL(texture : GLuint, level : GLint, access : GLbitfield, stride : GLint*, layout : GLenum*) : Void*
  fun vertex_pointerv_intel = glVertexPointervINTEL(size : GLint, type : GLenum, pointer : Void**)
  fun normal_pointerv_intel = glNormalPointervINTEL(type : GLenum, pointer : Void**)
  fun color_pointerv_intel = glColorPointervINTEL(size : GLint, type : GLenum, pointer : Void**)
  fun tex_coord_pointerv_intel = glTexCoordPointervINTEL(size : GLint, type : GLenum, pointer : Void**)
  fun resize_buffers_mesa = glResizeBuffersMESA
  fun window_pos2d_mesa = glWindowPos2dMESA(x : GLdouble, y : GLdouble)
  fun window_pos2dv_mesa = glWindowPos2dvMESA(v : GLdouble*)
  fun window_pos2f_mesa = glWindowPos2fMESA(x : GLfloat, y : GLfloat)
  fun window_pos2fv_mesa = glWindowPos2fvMESA(v : GLfloat*)
  fun window_pos2i_mesa = glWindowPos2iMESA(x : GLint, y : GLint)
  fun window_pos2iv_mesa = glWindowPos2ivMESA(v : GLint*)
  fun window_pos2s_mesa = glWindowPos2sMESA(x : GLshort, y : GLshort)
  fun window_pos2sv_mesa = glWindowPos2svMESA(v : GLshort*)
  fun window_pos3d_mesa = glWindowPos3dMESA(x : GLdouble, y : GLdouble, z : GLdouble)
  fun window_pos3dv_mesa = glWindowPos3dvMESA(v : GLdouble*)
  fun window_pos3f_mesa = glWindowPos3fMESA(x : GLfloat, y : GLfloat, z : GLfloat)
  fun window_pos3fv_mesa = glWindowPos3fvMESA(v : GLfloat*)
  fun window_pos3i_mesa = glWindowPos3iMESA(x : GLint, y : GLint, z : GLint)
  fun window_pos3iv_mesa = glWindowPos3ivMESA(v : GLint*)
  fun window_pos3s_mesa = glWindowPos3sMESA(x : GLshort, y : GLshort, z : GLshort)
  fun window_pos3sv_mesa = glWindowPos3svMESA(v : GLshort*)
  fun window_pos4d_mesa = glWindowPos4dMESA(x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun window_pos4dv_mesa = glWindowPos4dvMESA(v : GLdouble*)
  fun window_pos4f_mesa = glWindowPos4fMESA(x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun window_pos4fv_mesa = glWindowPos4fvMESA(v : GLfloat*)
  fun window_pos4i_mesa = glWindowPos4iMESA(x : GLint, y : GLint, z : GLint, w : GLint)
  fun window_pos4iv_mesa = glWindowPos4ivMESA(v : GLint*)
  fun window_pos4s_mesa = glWindowPos4sMESA(x : GLshort, y : GLshort, z : GLshort, w : GLshort)
  fun window_pos4sv_mesa = glWindowPos4svMESA(v : GLshort*)
  fun begin_conditional_render_nvx = glBeginConditionalRenderNVX(id : GLuint)
  fun end_conditional_render_nvx = glEndConditionalRenderNVX
  fun lgpu_named_buffer_sub_data_nvx = glLGPUNamedBufferSubDataNVX(gpu_mask : GLbitfield, buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : Void*)
  fun lgpu_copy_image_sub_data_nvx = glLGPUCopyImageSubDataNVX(source_gpu : GLuint, destination_gpu_mask : GLbitfield, src_name : GLuint, src_target : GLenum, src_level : GLint, src_x : GLint, srx_y : GLint, src_z : GLint, dst_name : GLuint, dst_target : GLenum, dst_level : GLint, dst_x : GLint, dst_y : GLint, dst_z : GLint, width : GLsizei, height : GLsizei, depth : GLsizei)
  fun lgpu_interlock_nvx = glLGPUInterlockNVX
  fun alpha_to_coverage_dither_control_nv = glAlphaToCoverageDitherControlNV(mode : GLenum)
  fun copy_image_sub_data_nv = glCopyImageSubDataNV(src_name : GLuint, src_target : GLenum, src_level : GLint, src_x : GLint, src_y : GLint, src_z : GLint, dst_name : GLuint, dst_target : GLenum, dst_level : GLint, dst_x : GLint, dst_y : GLint, dst_z : GLint, width : GLsizei, height : GLsizei, depth : GLsizei)
  fun depth_ranged_nv = glDepthRangedNV(z_near : GLdouble, z_far : GLdouble)
  fun clear_depthd_nv = glClearDepthdNV(depth : GLdouble)
  fun depth_boundsd_nv = glDepthBoundsdNV(zmin : GLdouble, zmax : GLdouble)
  fun draw_texture_nv = glDrawTextureNV(texture : GLuint, sampler : GLuint, x0 : GLfloat, y0 : GLfloat, x1 : GLfloat, y1 : GLfloat, z : GLfloat, s0 : GLfloat, t0 : GLfloat, s1 : GLfloat, t1 : GLfloat)
  fun map_control_points_nv = glMapControlPointsNV(target : GLenum, index : GLuint, type : GLenum, ustride : GLsizei, vstride : GLsizei, uorder : GLint, vorder : GLint, packed : GLboolean, points : Void*)
  fun map_parameteriv_nv = glMapParameterivNV(target : GLenum, pname : GLenum, params : GLint*)
  fun map_parameterfv_nv = glMapParameterfvNV(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_map_control_points_nv = glGetMapControlPointsNV(target : GLenum, index : GLuint, type : GLenum, ustride : GLsizei, vstride : GLsizei, packed : GLboolean, points : Void*)
  fun get_map_parameteriv_nv = glGetMapParameterivNV(target : GLenum, pname : GLenum, params : GLint*)
  fun get_map_parameterfv_nv = glGetMapParameterfvNV(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_map_attrib_parameteriv_nv = glGetMapAttribParameterivNV(target : GLenum, index : GLuint, pname : GLenum, params : GLint*)
  fun get_map_attrib_parameterfv_nv = glGetMapAttribParameterfvNV(target : GLenum, index : GLuint, pname : GLenum, params : GLfloat*)
  fun eval_maps_nv = glEvalMapsNV(target : GLenum, mode : GLenum)
  fun get_multisamplefv_nv = glGetMultisamplefvNV(pname : GLenum, index : GLuint, val : GLfloat*)
  fun sample_mask_indexed_nv = glSampleMaskIndexedNV(index : GLuint, mask : GLbitfield)
  fun tex_renderbuffer_nv = glTexRenderbufferNV(target : GLenum, renderbuffer : GLuint)
  fun delete_fences_nv = glDeleteFencesNV(n : GLsizei, fences : GLuint*)
  fun gen_fences_nv = glGenFencesNV(n : GLsizei, fences : GLuint*)
  fun is_fence_nv = glIsFenceNV(fence : GLuint) : GLboolean
  fun test_fence_nv = glTestFenceNV(fence : GLuint) : GLboolean
  fun get_fenceiv_nv = glGetFenceivNV(fence : GLuint, pname : GLenum, params : GLint*)
  fun finish_fence_nv = glFinishFenceNV(fence : GLuint)
  fun set_fence_nv = glSetFenceNV(fence : GLuint, condition : GLenum)
  fun program_named_parameter4f_nv = glProgramNamedParameter4fNV(id : GLuint, len : GLsizei, name : GLubyte*, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun program_named_parameter4fv_nv = glProgramNamedParameter4fvNV(id : GLuint, len : GLsizei, name : GLubyte*, v : GLfloat*)
  fun program_named_parameter4d_nv = glProgramNamedParameter4dNV(id : GLuint, len : GLsizei, name : GLubyte*, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun program_named_parameter4dv_nv = glProgramNamedParameter4dvNV(id : GLuint, len : GLsizei, name : GLubyte*, v : GLdouble*)
  fun get_program_named_parameterfv_nv = glGetProgramNamedParameterfvNV(id : GLuint, len : GLsizei, name : GLubyte*, params : GLfloat*)
  fun get_program_named_parameterdv_nv = glGetProgramNamedParameterdvNV(id : GLuint, len : GLsizei, name : GLubyte*, params : GLdouble*)
  fun program_vertex_limit_nv = glProgramVertexLimitNV(target : GLenum, limit : GLint)
  fun framebuffer_texture_ext = glFramebufferTextureEXT(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint)
  fun framebuffer_texture_face_ext = glFramebufferTextureFaceEXT(target : GLenum, attachment : GLenum, texture : GLuint, level : GLint, face : GLenum)
  fun render_gpu_mask_nv = glRenderGpuMaskNV(mask : GLbitfield)
  fun multicast_buffer_sub_data_nv = glMulticastBufferSubDataNV(gpu_mask : GLbitfield, buffer : GLuint, offset : GLintptr, size : GLsizeiptr, data : GLvoid*)
  fun multicast_copy_buffer_sub_data_nv = glMulticastCopyBufferSubDataNV(read_gpu : GLuint, write_gpu_mask : GLbitfield, read_buffer : GLuint, write_buffer : GLuint, read_offset : GLintptr, write_offset : GLintptr, size : GLsizeiptr)
  fun multicast_copy_image_sub_data_nv = glMulticastCopyImageSubDataNV(src_gpu : GLuint, dst_gpu_mask : GLbitfield, src_name : GLuint, src_target : GLenum, src_level : GLint, src_x : GLint, src_y : GLint, src_z : GLint, dst_name : GLuint, dst_target : GLenum, dst_level : GLint, dst_x : GLint, dst_y : GLint, dst_z : GLint, src_width : GLsizei, src_height : GLsizei, src_depth : GLsizei)
  fun multicast_blit_framebuffer_nv = glMulticastBlitFramebufferNV(src_gpu : GLuint, dst_gpu : GLuint, src_x0 : GLint, src_y0 : GLint, src_x1 : GLint, src_y1 : GLint, dst_x0 : GLint, dst_y0 : GLint, dst_x1 : GLint, dst_y1 : GLint, mask : GLbitfield, filter : GLenum)
  fun multicast_framebuffer_sample_locationsfv_nv = glMulticastFramebufferSampleLocationsfvNV(gpu : GLuint, framebuffer : GLuint, start : GLuint, count : GLsizei, v : GLfloat*)
  fun multicast_barrier_nv = glMulticastBarrierNV
  fun multicast_wait_sync_nv = glMulticastWaitSyncNV(signal_gpu : GLuint, wait_gpu_mask : GLbitfield)
  fun multicast_get_query_objectiv_nv = glMulticastGetQueryObjectivNV(gpu : GLuint, id : GLuint, pname : GLenum, params : GLint*)
  fun multicast_get_query_objectuiv_nv = glMulticastGetQueryObjectuivNV(gpu : GLuint, id : GLuint, pname : GLenum, params : GLuint*)
  fun multicast_get_query_objecti64v_nv = glMulticastGetQueryObjecti64vNV(gpu : GLuint, id : GLuint, pname : GLenum, params : GLint64*)
  fun multicast_get_query_objectui64v_nv = glMulticastGetQueryObjectui64vNV(gpu : GLuint, id : GLuint, pname : GLenum, params : GLuint64*)
  fun program_local_parameter_i4i_nv = glProgramLocalParameterI4iNV(target : GLenum, index : GLuint, x : GLint, y : GLint, z : GLint, w : GLint)
  fun program_local_parameter_i4iv_nv = glProgramLocalParameterI4ivNV(target : GLenum, index : GLuint, params : GLint*)
  fun program_local_parameters_i4iv_nv = glProgramLocalParametersI4ivNV(target : GLenum, index : GLuint, count : GLsizei, params : GLint*)
  fun program_local_parameter_i4ui_nv = glProgramLocalParameterI4uiNV(target : GLenum, index : GLuint, x : GLuint, y : GLuint, z : GLuint, w : GLuint)
  fun program_local_parameter_i4uiv_nv = glProgramLocalParameterI4uivNV(target : GLenum, index : GLuint, params : GLuint*)
  fun program_local_parameters_i4uiv_nv = glProgramLocalParametersI4uivNV(target : GLenum, index : GLuint, count : GLsizei, params : GLuint*)
  fun program_env_parameter_i4i_nv = glProgramEnvParameterI4iNV(target : GLenum, index : GLuint, x : GLint, y : GLint, z : GLint, w : GLint)
  fun program_env_parameter_i4iv_nv = glProgramEnvParameterI4ivNV(target : GLenum, index : GLuint, params : GLint*)
  fun program_env_parameters_i4iv_nv = glProgramEnvParametersI4ivNV(target : GLenum, index : GLuint, count : GLsizei, params : GLint*)
  fun program_env_parameter_i4ui_nv = glProgramEnvParameterI4uiNV(target : GLenum, index : GLuint, x : GLuint, y : GLuint, z : GLuint, w : GLuint)
  fun program_env_parameter_i4uiv_nv = glProgramEnvParameterI4uivNV(target : GLenum, index : GLuint, params : GLuint*)
  fun program_env_parameters_i4uiv_nv = glProgramEnvParametersI4uivNV(target : GLenum, index : GLuint, count : GLsizei, params : GLuint*)
  fun get_program_local_parameter_iiv_nv = glGetProgramLocalParameterIivNV(target : GLenum, index : GLuint, params : GLint*)
  fun get_program_local_parameter_iuiv_nv = glGetProgramLocalParameterIuivNV(target : GLenum, index : GLuint, params : GLuint*)
  fun get_program_env_parameter_iiv_nv = glGetProgramEnvParameterIivNV(target : GLenum, index : GLuint, params : GLint*)
  fun get_program_env_parameter_iuiv_nv = glGetProgramEnvParameterIuivNV(target : GLenum, index : GLuint, params : GLuint*)
  fun program_subroutine_parametersuiv_nv = glProgramSubroutineParametersuivNV(target : GLenum, count : GLsizei, params : GLuint*)
  fun get_program_subroutine_parameteruiv_nv = glGetProgramSubroutineParameteruivNV(target : GLenum, index : GLuint, param : GLuint*)
  fun vertex2h_nv = glVertex2hNV(x : GLhalfNv, y : GLhalfNv)
  alias GLhalfNv = LibC::UShort
  fun vertex2hv_nv = glVertex2hvNV(v : GLhalfNv*)
  fun vertex3h_nv = glVertex3hNV(x : GLhalfNv, y : GLhalfNv, z : GLhalfNv)
  fun vertex3hv_nv = glVertex3hvNV(v : GLhalfNv*)
  fun vertex4h_nv = glVertex4hNV(x : GLhalfNv, y : GLhalfNv, z : GLhalfNv, w : GLhalfNv)
  fun vertex4hv_nv = glVertex4hvNV(v : GLhalfNv*)
  fun normal3h_nv = glNormal3hNV(nx : GLhalfNv, ny : GLhalfNv, nz : GLhalfNv)
  fun normal3hv_nv = glNormal3hvNV(v : GLhalfNv*)
  fun color3h_nv = glColor3hNV(red : GLhalfNv, green : GLhalfNv, blue : GLhalfNv)
  fun color3hv_nv = glColor3hvNV(v : GLhalfNv*)
  fun color4h_nv = glColor4hNV(red : GLhalfNv, green : GLhalfNv, blue : GLhalfNv, alpha : GLhalfNv)
  fun color4hv_nv = glColor4hvNV(v : GLhalfNv*)
  fun tex_coord1h_nv = glTexCoord1hNV(s : GLhalfNv)
  fun tex_coord1hv_nv = glTexCoord1hvNV(v : GLhalfNv*)
  fun tex_coord2h_nv = glTexCoord2hNV(s : GLhalfNv, t : GLhalfNv)
  fun tex_coord2hv_nv = glTexCoord2hvNV(v : GLhalfNv*)
  fun tex_coord3h_nv = glTexCoord3hNV(s : GLhalfNv, t : GLhalfNv, r : GLhalfNv)
  fun tex_coord3hv_nv = glTexCoord3hvNV(v : GLhalfNv*)
  fun tex_coord4h_nv = glTexCoord4hNV(s : GLhalfNv, t : GLhalfNv, r : GLhalfNv, q : GLhalfNv)
  fun tex_coord4hv_nv = glTexCoord4hvNV(v : GLhalfNv*)
  fun multi_tex_coord1h_nv = glMultiTexCoord1hNV(target : GLenum, s : GLhalfNv)
  fun multi_tex_coord1hv_nv = glMultiTexCoord1hvNV(target : GLenum, v : GLhalfNv*)
  fun multi_tex_coord2h_nv = glMultiTexCoord2hNV(target : GLenum, s : GLhalfNv, t : GLhalfNv)
  fun multi_tex_coord2hv_nv = glMultiTexCoord2hvNV(target : GLenum, v : GLhalfNv*)
  fun multi_tex_coord3h_nv = glMultiTexCoord3hNV(target : GLenum, s : GLhalfNv, t : GLhalfNv, r : GLhalfNv)
  fun multi_tex_coord3hv_nv = glMultiTexCoord3hvNV(target : GLenum, v : GLhalfNv*)
  fun multi_tex_coord4h_nv = glMultiTexCoord4hNV(target : GLenum, s : GLhalfNv, t : GLhalfNv, r : GLhalfNv, q : GLhalfNv)
  fun multi_tex_coord4hv_nv = glMultiTexCoord4hvNV(target : GLenum, v : GLhalfNv*)
  fun fog_coordh_nv = glFogCoordhNV(fog : GLhalfNv)
  fun fog_coordhv_nv = glFogCoordhvNV(fog : GLhalfNv*)
  fun secondary_color3h_nv = glSecondaryColor3hNV(red : GLhalfNv, green : GLhalfNv, blue : GLhalfNv)
  fun secondary_color3hv_nv = glSecondaryColor3hvNV(v : GLhalfNv*)
  fun vertex_weighth_nv = glVertexWeighthNV(weight : GLhalfNv)
  fun vertex_weighthv_nv = glVertexWeighthvNV(weight : GLhalfNv*)
  fun vertex_attrib1h_nv = glVertexAttrib1hNV(index : GLuint, x : GLhalfNv)
  fun vertex_attrib1hv_nv = glVertexAttrib1hvNV(index : GLuint, v : GLhalfNv*)
  fun vertex_attrib2h_nv = glVertexAttrib2hNV(index : GLuint, x : GLhalfNv, y : GLhalfNv)
  fun vertex_attrib2hv_nv = glVertexAttrib2hvNV(index : GLuint, v : GLhalfNv*)
  fun vertex_attrib3h_nv = glVertexAttrib3hNV(index : GLuint, x : GLhalfNv, y : GLhalfNv, z : GLhalfNv)
  fun vertex_attrib3hv_nv = glVertexAttrib3hvNV(index : GLuint, v : GLhalfNv*)
  fun vertex_attrib4h_nv = glVertexAttrib4hNV(index : GLuint, x : GLhalfNv, y : GLhalfNv, z : GLhalfNv, w : GLhalfNv)
  fun vertex_attrib4hv_nv = glVertexAttrib4hvNV(index : GLuint, v : GLhalfNv*)
  fun vertex_attribs1hv_nv = glVertexAttribs1hvNV(index : GLuint, n : GLsizei, v : GLhalfNv*)
  fun vertex_attribs2hv_nv = glVertexAttribs2hvNV(index : GLuint, n : GLsizei, v : GLhalfNv*)
  fun vertex_attribs3hv_nv = glVertexAttribs3hvNV(index : GLuint, n : GLsizei, v : GLhalfNv*)
  fun vertex_attribs4hv_nv = glVertexAttribs4hvNV(index : GLuint, n : GLsizei, v : GLhalfNv*)
  fun gen_occlusion_queries_nv = glGenOcclusionQueriesNV(n : GLsizei, ids : GLuint*)
  fun delete_occlusion_queries_nv = glDeleteOcclusionQueriesNV(n : GLsizei, ids : GLuint*)
  fun is_occlusion_query_nv = glIsOcclusionQueryNV(id : GLuint) : GLboolean
  fun begin_occlusion_query_nv = glBeginOcclusionQueryNV(id : GLuint)
  fun end_occlusion_query_nv = glEndOcclusionQueryNV
  fun get_occlusion_queryiv_nv = glGetOcclusionQueryivNV(id : GLuint, pname : GLenum, params : GLint*)
  fun get_occlusion_queryuiv_nv = glGetOcclusionQueryuivNV(id : GLuint, pname : GLenum, params : GLuint*)
  fun program_buffer_parametersfv_nv = glProgramBufferParametersfvNV(target : GLenum, binding_index : GLuint, word_index : GLuint, count : GLsizei, params : GLfloat*)
  fun program_buffer_parameters_iiv_nv = glProgramBufferParametersIivNV(target : GLenum, binding_index : GLuint, word_index : GLuint, count : GLsizei, params : GLint*)
  fun program_buffer_parameters_iuiv_nv = glProgramBufferParametersIuivNV(target : GLenum, binding_index : GLuint, word_index : GLuint, count : GLsizei, params : GLuint*)
  fun pixel_data_range_nv = glPixelDataRangeNV(target : GLenum, length : GLsizei, pointer : Void*)
  fun flush_pixel_data_range_nv = glFlushPixelDataRangeNV(target : GLenum)
  fun point_parameteri_nv = glPointParameteriNV(pname : GLenum, param : GLint)
  fun point_parameteriv_nv = glPointParameterivNV(pname : GLenum, params : GLint*)
  fun present_frame_keyed_nv = glPresentFrameKeyedNV(video_slot : GLuint, min_present_time : GLuint64Ext, begin_present_time_id : GLuint, present_duration_id : GLuint, type : GLenum, target0 : GLenum, fill0 : GLuint, key0 : GLuint, target1 : GLenum, fill1 : GLuint, key1 : GLuint)
  fun present_frame_dual_fill_nv = glPresentFrameDualFillNV(video_slot : GLuint, min_present_time : GLuint64Ext, begin_present_time_id : GLuint, present_duration_id : GLuint, type : GLenum, target0 : GLenum, fill0 : GLuint, target1 : GLenum, fill1 : GLuint, target2 : GLenum, fill2 : GLuint, target3 : GLenum, fill3 : GLuint)
  fun get_videoiv_nv = glGetVideoivNV(video_slot : GLuint, pname : GLenum, params : GLint*)
  fun get_videouiv_nv = glGetVideouivNV(video_slot : GLuint, pname : GLenum, params : GLuint*)
  fun get_videoi64v_nv = glGetVideoi64vNV(video_slot : GLuint, pname : GLenum, params : GLint64Ext*)
  fun get_videoui64v_nv = glGetVideoui64vNV(video_slot : GLuint, pname : GLenum, params : GLuint64Ext*)
  fun primitive_restart_nv = glPrimitiveRestartNV
  fun primitive_restart_index_nv = glPrimitiveRestartIndexNV(index : GLuint)
  fun query_resource_nv = glQueryResourceNV(query_type : GLenum, tag_id : GLint, buf_size : GLuint, buffer : GLint*) : GLint
  fun gen_query_resource_tag_nv = glGenQueryResourceTagNV(n : GLsizei, tag_ids : GLint*)
  fun delete_query_resource_tag_nv = glDeleteQueryResourceTagNV(n : GLsizei, tag_ids : GLint*)
  fun query_resource_tag_nv = glQueryResourceTagNV(tag_id : GLint, tag_string : GLchar*)
  fun combiner_parameterfv_nv = glCombinerParameterfvNV(pname : GLenum, params : GLfloat*)
  fun combiner_parameterf_nv = glCombinerParameterfNV(pname : GLenum, param : GLfloat)
  fun combiner_parameteriv_nv = glCombinerParameterivNV(pname : GLenum, params : GLint*)
  fun combiner_parameteri_nv = glCombinerParameteriNV(pname : GLenum, param : GLint)
  fun combiner_input_nv = glCombinerInputNV(stage : GLenum, portion : GLenum, variable : GLenum, input : GLenum, mapping : GLenum, component_usage : GLenum)
  fun combiner_output_nv = glCombinerOutputNV(stage : GLenum, portion : GLenum, ab_output : GLenum, cd_output : GLenum, sum_output : GLenum, scale : GLenum, bias : GLenum, ab_dot_product : GLboolean, cd_dot_product : GLboolean, mux_sum : GLboolean)
  fun final_combiner_input_nv = glFinalCombinerInputNV(variable : GLenum, input : GLenum, mapping : GLenum, component_usage : GLenum)
  fun get_combiner_input_parameterfv_nv = glGetCombinerInputParameterfvNV(stage : GLenum, portion : GLenum, variable : GLenum, pname : GLenum, params : GLfloat*)
  fun get_combiner_input_parameteriv_nv = glGetCombinerInputParameterivNV(stage : GLenum, portion : GLenum, variable : GLenum, pname : GLenum, params : GLint*)
  fun get_combiner_output_parameterfv_nv = glGetCombinerOutputParameterfvNV(stage : GLenum, portion : GLenum, pname : GLenum, params : GLfloat*)
  fun get_combiner_output_parameteriv_nv = glGetCombinerOutputParameterivNV(stage : GLenum, portion : GLenum, pname : GLenum, params : GLint*)
  fun get_final_combiner_input_parameterfv_nv = glGetFinalCombinerInputParameterfvNV(variable : GLenum, pname : GLenum, params : GLfloat*)
  fun get_final_combiner_input_parameteriv_nv = glGetFinalCombinerInputParameterivNV(variable : GLenum, pname : GLenum, params : GLint*)
  fun combiner_stage_parameterfv_nv = glCombinerStageParameterfvNV(stage : GLenum, pname : GLenum, params : GLfloat*)
  fun get_combiner_stage_parameterfv_nv = glGetCombinerStageParameterfvNV(stage : GLenum, pname : GLenum, params : GLfloat*)
  fun tex_image2d_multisample_coverage_nv = glTexImage2DMultisampleCoverageNV(target : GLenum, coverage_samples : GLsizei, color_samples : GLsizei, internal_format : GLint, width : GLsizei, height : GLsizei, fixed_sample_locations : GLboolean)
  fun tex_image3d_multisample_coverage_nv = glTexImage3DMultisampleCoverageNV(target : GLenum, coverage_samples : GLsizei, color_samples : GLsizei, internal_format : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, fixed_sample_locations : GLboolean)
  fun texture_image2d_multisample_nv = glTextureImage2DMultisampleNV(texture : GLuint, target : GLenum, samples : GLsizei, internal_format : GLint, width : GLsizei, height : GLsizei, fixed_sample_locations : GLboolean)
  fun texture_image3d_multisample_nv = glTextureImage3DMultisampleNV(texture : GLuint, target : GLenum, samples : GLsizei, internal_format : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, fixed_sample_locations : GLboolean)
  fun texture_image2d_multisample_coverage_nv = glTextureImage2DMultisampleCoverageNV(texture : GLuint, target : GLenum, coverage_samples : GLsizei, color_samples : GLsizei, internal_format : GLint, width : GLsizei, height : GLsizei, fixed_sample_locations : GLboolean)
  fun texture_image3d_multisample_coverage_nv = glTextureImage3DMultisampleCoverageNV(texture : GLuint, target : GLenum, coverage_samples : GLsizei, color_samples : GLsizei, internal_format : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, fixed_sample_locations : GLboolean)
  fun begin_transform_feedback_nv = glBeginTransformFeedbackNV(primitive_mode : GLenum)
  fun end_transform_feedback_nv = glEndTransformFeedbackNV
  fun transform_feedback_attribs_nv = glTransformFeedbackAttribsNV(count : GLsizei, attribs : GLint*, buffer_mode : GLenum)
  fun bind_buffer_range_nv = glBindBufferRangeNV(target : GLenum, index : GLuint, buffer : GLuint, offset : GLintptr, size : GLsizeiptr)
  fun bind_buffer_offset_nv = glBindBufferOffsetNV(target : GLenum, index : GLuint, buffer : GLuint, offset : GLintptr)
  fun bind_buffer_base_nv = glBindBufferBaseNV(target : GLenum, index : GLuint, buffer : GLuint)
  fun transform_feedback_varyings_nv = glTransformFeedbackVaryingsNV(program : GLuint, count : GLsizei, locations : GLint*, buffer_mode : GLenum)
  fun active_varying_nv = glActiveVaryingNV(program : GLuint, name : GLchar*)
  fun get_varying_location_nv = glGetVaryingLocationNV(program : GLuint, name : GLchar*) : GLint
  fun get_active_varying_nv = glGetActiveVaryingNV(program : GLuint, index : GLuint, buf_size : GLsizei, length : GLsizei*, size : GLsizei*, type : GLenum*, name : GLchar*)
  fun get_transform_feedback_varying_nv = glGetTransformFeedbackVaryingNV(program : GLuint, index : GLuint, location : GLint*)
  fun transform_feedback_stream_attribs_nv = glTransformFeedbackStreamAttribsNV(count : GLsizei, attribs : GLint*, nbuffers : GLsizei, bufstreams : GLint*, buffer_mode : GLenum)
  fun bind_transform_feedback_nv = glBindTransformFeedbackNV(target : GLenum, id : GLuint)
  fun delete_transform_feedbacks_nv = glDeleteTransformFeedbacksNV(n : GLsizei, ids : GLuint*)
  fun gen_transform_feedbacks_nv = glGenTransformFeedbacksNV(n : GLsizei, ids : GLuint*)
  fun is_transform_feedback_nv = glIsTransformFeedbackNV(id : GLuint) : GLboolean
  fun pause_transform_feedback_nv = glPauseTransformFeedbackNV
  fun resume_transform_feedback_nv = glResumeTransformFeedbackNV
  fun draw_transform_feedback_nv = glDrawTransformFeedbackNV(mode : GLenum, id : GLuint)
  fun vdpau_init_nv = glVDPAUInitNV(vdp_device : Void*, get_proc_address : Void*)
  fun vdpau_fini_nv = glVDPAUFiniNV
  fun vdpau_register_video_surface_nv = glVDPAURegisterVideoSurfaceNV(vdp_surface : Void*, target : GLenum, num_texture_names : GLsizei, texture_names : GLuint*) : GLvdpauSurfaceNv
  alias GLvdpauSurfaceNv = GLintptr
  fun vdpau_register_output_surface_nv = glVDPAURegisterOutputSurfaceNV(vdp_surface : Void*, target : GLenum, num_texture_names : GLsizei, texture_names : GLuint*) : GLvdpauSurfaceNv
  fun vdpau_is_surface_nv = glVDPAUIsSurfaceNV(surface : GLvdpauSurfaceNv) : GLboolean
  fun vdpau_unregister_surface_nv = glVDPAUUnregisterSurfaceNV(surface : GLvdpauSurfaceNv)
  fun vdpau_get_surfaceiv_nv = glVDPAUGetSurfaceivNV(surface : GLvdpauSurfaceNv, pname : GLenum, buf_size : GLsizei, length : GLsizei*, values : GLint*)
  fun vdpau_surface_access_nv = glVDPAUSurfaceAccessNV(surface : GLvdpauSurfaceNv, access : GLenum)
  fun vdpau_map_surfaces_nv = glVDPAUMapSurfacesNV(num_surfaces : GLsizei, surfaces : GLvdpauSurfaceNv*)
  fun vdpau_unmap_surfaces_nv = glVDPAUUnmapSurfacesNV(num_surface : GLsizei, surfaces : GLvdpauSurfaceNv*)
  fun flush_vertex_array_range_nv = glFlushVertexArrayRangeNV
  fun vertex_array_range_nv = glVertexArrayRangeNV(length : GLsizei, pointer : Void*)
  fun are_programs_resident_nv = glAreProgramsResidentNV(n : GLsizei, programs : GLuint*, residences : GLboolean*) : GLboolean
  fun bind_program_nv = glBindProgramNV(target : GLenum, id : GLuint)
  fun delete_programs_nv = glDeleteProgramsNV(n : GLsizei, programs : GLuint*)
  fun execute_program_nv = glExecuteProgramNV(target : GLenum, id : GLuint, params : GLfloat*)
  fun gen_programs_nv = glGenProgramsNV(n : GLsizei, programs : GLuint*)
  fun get_program_parameterdv_nv = glGetProgramParameterdvNV(target : GLenum, index : GLuint, pname : GLenum, params : GLdouble*)
  fun get_program_parameterfv_nv = glGetProgramParameterfvNV(target : GLenum, index : GLuint, pname : GLenum, params : GLfloat*)
  fun get_programiv_nv = glGetProgramivNV(id : GLuint, pname : GLenum, params : GLint*)
  fun get_program_string_nv = glGetProgramStringNV(id : GLuint, pname : GLenum, program : GLubyte*)
  fun get_track_matrixiv_nv = glGetTrackMatrixivNV(target : GLenum, address : GLuint, pname : GLenum, params : GLint*)
  fun get_vertex_attribdv_nv = glGetVertexAttribdvNV(index : GLuint, pname : GLenum, params : GLdouble*)
  fun get_vertex_attribfv_nv = glGetVertexAttribfvNV(index : GLuint, pname : GLenum, params : GLfloat*)
  fun get_vertex_attribiv_nv = glGetVertexAttribivNV(index : GLuint, pname : GLenum, params : GLint*)
  fun get_vertex_attrib_pointerv_nv = glGetVertexAttribPointervNV(index : GLuint, pname : GLenum, pointer : Void**)
  fun is_program_nv = glIsProgramNV(id : GLuint) : GLboolean
  fun load_program_nv = glLoadProgramNV(target : GLenum, id : GLuint, len : GLsizei, program : GLubyte*)
  fun program_parameter4d_nv = glProgramParameter4dNV(target : GLenum, index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun program_parameter4dv_nv = glProgramParameter4dvNV(target : GLenum, index : GLuint, v : GLdouble*)
  fun program_parameter4f_nv = glProgramParameter4fNV(target : GLenum, index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun program_parameter4fv_nv = glProgramParameter4fvNV(target : GLenum, index : GLuint, v : GLfloat*)
  fun program_parameters4dv_nv = glProgramParameters4dvNV(target : GLenum, index : GLuint, count : GLsizei, v : GLdouble*)
  fun program_parameters4fv_nv = glProgramParameters4fvNV(target : GLenum, index : GLuint, count : GLsizei, v : GLfloat*)
  fun request_resident_programs_nv = glRequestResidentProgramsNV(n : GLsizei, programs : GLuint*)
  fun track_matrix_nv = glTrackMatrixNV(target : GLenum, address : GLuint, matrix : GLenum, transform : GLenum)
  fun vertex_attrib_pointer_nv = glVertexAttribPointerNV(index : GLuint, fsize : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun vertex_attrib1d_nv = glVertexAttrib1dNV(index : GLuint, x : GLdouble)
  fun vertex_attrib1dv_nv = glVertexAttrib1dvNV(index : GLuint, v : GLdouble*)
  fun vertex_attrib1f_nv = glVertexAttrib1fNV(index : GLuint, x : GLfloat)
  fun vertex_attrib1fv_nv = glVertexAttrib1fvNV(index : GLuint, v : GLfloat*)
  fun vertex_attrib1s_nv = glVertexAttrib1sNV(index : GLuint, x : GLshort)
  fun vertex_attrib1sv_nv = glVertexAttrib1svNV(index : GLuint, v : GLshort*)
  fun vertex_attrib2d_nv = glVertexAttrib2dNV(index : GLuint, x : GLdouble, y : GLdouble)
  fun vertex_attrib2dv_nv = glVertexAttrib2dvNV(index : GLuint, v : GLdouble*)
  fun vertex_attrib2f_nv = glVertexAttrib2fNV(index : GLuint, x : GLfloat, y : GLfloat)
  fun vertex_attrib2fv_nv = glVertexAttrib2fvNV(index : GLuint, v : GLfloat*)
  fun vertex_attrib2s_nv = glVertexAttrib2sNV(index : GLuint, x : GLshort, y : GLshort)
  fun vertex_attrib2sv_nv = glVertexAttrib2svNV(index : GLuint, v : GLshort*)
  fun vertex_attrib3d_nv = glVertexAttrib3dNV(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble)
  fun vertex_attrib3dv_nv = glVertexAttrib3dvNV(index : GLuint, v : GLdouble*)
  fun vertex_attrib3f_nv = glVertexAttrib3fNV(index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat)
  fun vertex_attrib3fv_nv = glVertexAttrib3fvNV(index : GLuint, v : GLfloat*)
  fun vertex_attrib3s_nv = glVertexAttrib3sNV(index : GLuint, x : GLshort, y : GLshort, z : GLshort)
  fun vertex_attrib3sv_nv = glVertexAttrib3svNV(index : GLuint, v : GLshort*)
  fun vertex_attrib4d_nv = glVertexAttrib4dNV(index : GLuint, x : GLdouble, y : GLdouble, z : GLdouble, w : GLdouble)
  fun vertex_attrib4dv_nv = glVertexAttrib4dvNV(index : GLuint, v : GLdouble*)
  fun vertex_attrib4f_nv = glVertexAttrib4fNV(index : GLuint, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun vertex_attrib4fv_nv = glVertexAttrib4fvNV(index : GLuint, v : GLfloat*)
  fun vertex_attrib4s_nv = glVertexAttrib4sNV(index : GLuint, x : GLshort, y : GLshort, z : GLshort, w : GLshort)
  fun vertex_attrib4sv_nv = glVertexAttrib4svNV(index : GLuint, v : GLshort*)
  fun vertex_attrib4ub_nv = glVertexAttrib4ubNV(index : GLuint, x : GLubyte, y : GLubyte, z : GLubyte, w : GLubyte)
  fun vertex_attrib4ubv_nv = glVertexAttrib4ubvNV(index : GLuint, v : GLubyte*)
  fun vertex_attribs1dv_nv = glVertexAttribs1dvNV(index : GLuint, count : GLsizei, v : GLdouble*)
  fun vertex_attribs1fv_nv = glVertexAttribs1fvNV(index : GLuint, count : GLsizei, v : GLfloat*)
  fun vertex_attribs1sv_nv = glVertexAttribs1svNV(index : GLuint, count : GLsizei, v : GLshort*)
  fun vertex_attribs2dv_nv = glVertexAttribs2dvNV(index : GLuint, count : GLsizei, v : GLdouble*)
  fun vertex_attribs2fv_nv = glVertexAttribs2fvNV(index : GLuint, count : GLsizei, v : GLfloat*)
  fun vertex_attribs2sv_nv = glVertexAttribs2svNV(index : GLuint, count : GLsizei, v : GLshort*)
  fun vertex_attribs3dv_nv = glVertexAttribs3dvNV(index : GLuint, count : GLsizei, v : GLdouble*)
  fun vertex_attribs3fv_nv = glVertexAttribs3fvNV(index : GLuint, count : GLsizei, v : GLfloat*)
  fun vertex_attribs3sv_nv = glVertexAttribs3svNV(index : GLuint, count : GLsizei, v : GLshort*)
  fun vertex_attribs4dv_nv = glVertexAttribs4dvNV(index : GLuint, count : GLsizei, v : GLdouble*)
  fun vertex_attribs4fv_nv = glVertexAttribs4fvNV(index : GLuint, count : GLsizei, v : GLfloat*)
  fun vertex_attribs4sv_nv = glVertexAttribs4svNV(index : GLuint, count : GLsizei, v : GLshort*)
  fun vertex_attribs4ubv_nv = glVertexAttribs4ubvNV(index : GLuint, count : GLsizei, v : GLubyte*)
  fun vertex_attrib_i1i_ext = glVertexAttribI1iEXT(index : GLuint, x : GLint)
  fun vertex_attrib_i2i_ext = glVertexAttribI2iEXT(index : GLuint, x : GLint, y : GLint)
  fun vertex_attrib_i3i_ext = glVertexAttribI3iEXT(index : GLuint, x : GLint, y : GLint, z : GLint)
  fun vertex_attrib_i4i_ext = glVertexAttribI4iEXT(index : GLuint, x : GLint, y : GLint, z : GLint, w : GLint)
  fun vertex_attrib_i1ui_ext = glVertexAttribI1uiEXT(index : GLuint, x : GLuint)
  fun vertex_attrib_i2ui_ext = glVertexAttribI2uiEXT(index : GLuint, x : GLuint, y : GLuint)
  fun vertex_attrib_i3ui_ext = glVertexAttribI3uiEXT(index : GLuint, x : GLuint, y : GLuint, z : GLuint)
  fun vertex_attrib_i4ui_ext = glVertexAttribI4uiEXT(index : GLuint, x : GLuint, y : GLuint, z : GLuint, w : GLuint)
  fun vertex_attrib_i1iv_ext = glVertexAttribI1ivEXT(index : GLuint, v : GLint*)
  fun vertex_attrib_i2iv_ext = glVertexAttribI2ivEXT(index : GLuint, v : GLint*)
  fun vertex_attrib_i3iv_ext = glVertexAttribI3ivEXT(index : GLuint, v : GLint*)
  fun vertex_attrib_i4iv_ext = glVertexAttribI4ivEXT(index : GLuint, v : GLint*)
  fun vertex_attrib_i1uiv_ext = glVertexAttribI1uivEXT(index : GLuint, v : GLuint*)
  fun vertex_attrib_i2uiv_ext = glVertexAttribI2uivEXT(index : GLuint, v : GLuint*)
  fun vertex_attrib_i3uiv_ext = glVertexAttribI3uivEXT(index : GLuint, v : GLuint*)
  fun vertex_attrib_i4uiv_ext = glVertexAttribI4uivEXT(index : GLuint, v : GLuint*)
  fun vertex_attrib_i4bv_ext = glVertexAttribI4bvEXT(index : GLuint, v : GLbyte*)
  fun vertex_attrib_i4sv_ext = glVertexAttribI4svEXT(index : GLuint, v : GLshort*)
  fun vertex_attrib_i4ubv_ext = glVertexAttribI4ubvEXT(index : GLuint, v : GLubyte*)
  fun vertex_attrib_i4usv_ext = glVertexAttribI4usvEXT(index : GLuint, v : GLushort*)
  fun vertex_attrib_i_pointer_ext = glVertexAttribIPointerEXT(index : GLuint, size : GLint, type : GLenum, stride : GLsizei, pointer : Void*)
  fun get_vertex_attrib_iiv_ext = glGetVertexAttribIivEXT(index : GLuint, pname : GLenum, params : GLint*)
  fun get_vertex_attrib_iuiv_ext = glGetVertexAttribIuivEXT(index : GLuint, pname : GLenum, params : GLuint*)
  fun begin_video_capture_nv = glBeginVideoCaptureNV(video_capture_slot : GLuint)
  fun bind_video_capture_stream_buffer_nv = glBindVideoCaptureStreamBufferNV(video_capture_slot : GLuint, stream : GLuint, frame_region : GLenum, offset : GLintptrArb)
  fun bind_video_capture_stream_texture_nv = glBindVideoCaptureStreamTextureNV(video_capture_slot : GLuint, stream : GLuint, frame_region : GLenum, target : GLenum, texture : GLuint)
  fun end_video_capture_nv = glEndVideoCaptureNV(video_capture_slot : GLuint)
  fun get_video_captureiv_nv = glGetVideoCaptureivNV(video_capture_slot : GLuint, pname : GLenum, params : GLint*)
  fun get_video_capture_streamiv_nv = glGetVideoCaptureStreamivNV(video_capture_slot : GLuint, stream : GLuint, pname : GLenum, params : GLint*)
  fun get_video_capture_streamfv_nv = glGetVideoCaptureStreamfvNV(video_capture_slot : GLuint, stream : GLuint, pname : GLenum, params : GLfloat*)
  fun get_video_capture_streamdv_nv = glGetVideoCaptureStreamdvNV(video_capture_slot : GLuint, stream : GLuint, pname : GLenum, params : GLdouble*)
  fun video_capture_nv = glVideoCaptureNV(video_capture_slot : GLuint, sequence_num : GLuint*, capture_time : GLuint64Ext*) : GLenum
  fun video_capture_stream_parameteriv_nv = glVideoCaptureStreamParameterivNV(video_capture_slot : GLuint, stream : GLuint, pname : GLenum, params : GLint*)
  fun video_capture_stream_parameterfv_nv = glVideoCaptureStreamParameterfvNV(video_capture_slot : GLuint, stream : GLuint, pname : GLenum, params : GLfloat*)
  fun video_capture_stream_parameterdv_nv = glVideoCaptureStreamParameterdvNV(video_capture_slot : GLuint, stream : GLuint, pname : GLenum, params : GLdouble*)
  fun hint_pgi = glHintPGI(target : GLenum, mode : GLint)
  fun detail_tex_func_sgis = glDetailTexFuncSGIS(target : GLenum, n : GLsizei, points : GLfloat*)
  fun get_detail_tex_func_sgis = glGetDetailTexFuncSGIS(target : GLenum, points : GLfloat*)
  fun fog_func_sgis = glFogFuncSGIS(n : GLsizei, points : GLfloat*)
  fun get_fog_func_sgis = glGetFogFuncSGIS(points : GLfloat*)
  fun sample_mask_sgis = glSampleMaskSGIS(value : GLclampf, invert : GLboolean)
  fun sample_pattern_sgis = glSamplePatternSGIS(pattern : GLenum)
  fun pixel_tex_gen_parameteri_sgis = glPixelTexGenParameteriSGIS(pname : GLenum, param : GLint)
  fun pixel_tex_gen_parameteriv_sgis = glPixelTexGenParameterivSGIS(pname : GLenum, params : GLint*)
  fun pixel_tex_gen_parameterf_sgis = glPixelTexGenParameterfSGIS(pname : GLenum, param : GLfloat)
  fun pixel_tex_gen_parameterfv_sgis = glPixelTexGenParameterfvSGIS(pname : GLenum, params : GLfloat*)
  fun get_pixel_tex_gen_parameteriv_sgis = glGetPixelTexGenParameterivSGIS(pname : GLenum, params : GLint*)
  fun get_pixel_tex_gen_parameterfv_sgis = glGetPixelTexGenParameterfvSGIS(pname : GLenum, params : GLfloat*)
  fun point_parameterf_sgis = glPointParameterfSGIS(pname : GLenum, param : GLfloat)
  fun point_parameterfv_sgis = glPointParameterfvSGIS(pname : GLenum, params : GLfloat*)
  fun sharpen_tex_func_sgis = glSharpenTexFuncSGIS(target : GLenum, n : GLsizei, points : GLfloat*)
  fun get_sharpen_tex_func_sgis = glGetSharpenTexFuncSGIS(target : GLenum, points : GLfloat*)
  fun tex_image4dsgis = glTexImage4DSGIS(target : GLenum, level : GLint, internalformat : GLenum, width : GLsizei, height : GLsizei, depth : GLsizei, size4d : GLsizei, border : GLint, format : GLenum, type : GLenum, pixels : Void*)
  fun tex_sub_image4dsgis = glTexSubImage4DSGIS(target : GLenum, level : GLint, xoffset : GLint, yoffset : GLint, zoffset : GLint, woffset : GLint, width : GLsizei, height : GLsizei, depth : GLsizei, size4d : GLsizei, format : GLenum, type : GLenum, pixels : Void*)
  fun texture_color_mask_sgis = glTextureColorMaskSGIS(red : GLboolean, green : GLboolean, blue : GLboolean, alpha : GLboolean)
  fun get_tex_filter_func_sgis = glGetTexFilterFuncSGIS(target : GLenum, filter : GLenum, weights : GLfloat*)
  fun tex_filter_func_sgis = glTexFilterFuncSGIS(target : GLenum, filter : GLenum, n : GLsizei, weights : GLfloat*)
  fun async_marker_sgix = glAsyncMarkerSGIX(marker : GLuint)
  fun finish_async_sgix = glFinishAsyncSGIX(markerp : GLuint*) : GLint
  fun poll_async_sgix = glPollAsyncSGIX(markerp : GLuint*) : GLint
  fun gen_async_markers_sgix = glGenAsyncMarkersSGIX(range : GLsizei) : GLuint
  fun delete_async_markers_sgix = glDeleteAsyncMarkersSGIX(marker : GLuint, range : GLsizei)
  fun is_async_marker_sgix = glIsAsyncMarkerSGIX(marker : GLuint) : GLboolean
  fun flush_raster_sgix = glFlushRasterSGIX
  fun fragment_color_material_sgix = glFragmentColorMaterialSGIX(face : GLenum, mode : GLenum)
  fun fragment_lightf_sgix = glFragmentLightfSGIX(light : GLenum, pname : GLenum, param : GLfloat)
  fun fragment_lightfv_sgix = glFragmentLightfvSGIX(light : GLenum, pname : GLenum, params : GLfloat*)
  fun fragment_lighti_sgix = glFragmentLightiSGIX(light : GLenum, pname : GLenum, param : GLint)
  fun fragment_lightiv_sgix = glFragmentLightivSGIX(light : GLenum, pname : GLenum, params : GLint*)
  fun fragment_light_modelf_sgix = glFragmentLightModelfSGIX(pname : GLenum, param : GLfloat)
  fun fragment_light_modelfv_sgix = glFragmentLightModelfvSGIX(pname : GLenum, params : GLfloat*)
  fun fragment_light_modeli_sgix = glFragmentLightModeliSGIX(pname : GLenum, param : GLint)
  fun fragment_light_modeliv_sgix = glFragmentLightModelivSGIX(pname : GLenum, params : GLint*)
  fun fragment_materialf_sgix = glFragmentMaterialfSGIX(face : GLenum, pname : GLenum, param : GLfloat)
  fun fragment_materialfv_sgix = glFragmentMaterialfvSGIX(face : GLenum, pname : GLenum, params : GLfloat*)
  fun fragment_materiali_sgix = glFragmentMaterialiSGIX(face : GLenum, pname : GLenum, param : GLint)
  fun fragment_materialiv_sgix = glFragmentMaterialivSGIX(face : GLenum, pname : GLenum, params : GLint*)
  fun get_fragment_lightfv_sgix = glGetFragmentLightfvSGIX(light : GLenum, pname : GLenum, params : GLfloat*)
  fun get_fragment_lightiv_sgix = glGetFragmentLightivSGIX(light : GLenum, pname : GLenum, params : GLint*)
  fun get_fragment_materialfv_sgix = glGetFragmentMaterialfvSGIX(face : GLenum, pname : GLenum, params : GLfloat*)
  fun get_fragment_materialiv_sgix = glGetFragmentMaterialivSGIX(face : GLenum, pname : GLenum, params : GLint*)
  fun light_envi_sgix = glLightEnviSGIX(pname : GLenum, param : GLint)
  fun frame_zoom_sgix = glFrameZoomSGIX(factor : GLint)
  fun igloo_interface_sgix = glIglooInterfaceSGIX(pname : GLenum, params : Void*)
  fun get_instruments_sgix = glGetInstrumentsSGIX : GLint
  fun instruments_buffer_sgix = glInstrumentsBufferSGIX(size : GLsizei, buffer : GLint*)
  fun poll_instruments_sgix = glPollInstrumentsSGIX(marker_p : GLint*) : GLint
  fun read_instruments_sgix = glReadInstrumentsSGIX(marker : GLint)
  fun start_instruments_sgix = glStartInstrumentsSGIX
  fun stop_instruments_sgix = glStopInstrumentsSGIX(marker : GLint)
  fun get_list_parameterfv_sgix = glGetListParameterfvSGIX(list : GLuint, pname : GLenum, params : GLfloat*)
  fun get_list_parameteriv_sgix = glGetListParameterivSGIX(list : GLuint, pname : GLenum, params : GLint*)
  fun list_parameterf_sgix = glListParameterfSGIX(list : GLuint, pname : GLenum, param : GLfloat)
  fun list_parameterfv_sgix = glListParameterfvSGIX(list : GLuint, pname : GLenum, params : GLfloat*)
  fun list_parameteri_sgix = glListParameteriSGIX(list : GLuint, pname : GLenum, param : GLint)
  fun list_parameteriv_sgix = glListParameterivSGIX(list : GLuint, pname : GLenum, params : GLint*)
  fun pixel_tex_gen_sgix = glPixelTexGenSGIX(mode : GLenum)
  fun deformation_map3d_sgix = glDeformationMap3dSGIX(target : GLenum, u1 : GLdouble, u2 : GLdouble, ustride : GLint, uorder : GLint, v1 : GLdouble, v2 : GLdouble, vstride : GLint, vorder : GLint, w1 : GLdouble, w2 : GLdouble, wstride : GLint, worder : GLint, points : GLdouble*)
  fun deformation_map3f_sgix = glDeformationMap3fSGIX(target : GLenum, u1 : GLfloat, u2 : GLfloat, ustride : GLint, uorder : GLint, v1 : GLfloat, v2 : GLfloat, vstride : GLint, vorder : GLint, w1 : GLfloat, w2 : GLfloat, wstride : GLint, worder : GLint, points : GLfloat*)
  fun deform_sgix = glDeformSGIX(mask : GLbitfield)
  fun load_identity_deformation_map_sgix = glLoadIdentityDeformationMapSGIX(mask : GLbitfield)
  fun reference_plane_sgix = glReferencePlaneSGIX(equation : GLdouble*)
  fun sprite_parameterf_sgix = glSpriteParameterfSGIX(pname : GLenum, param : GLfloat)
  fun sprite_parameterfv_sgix = glSpriteParameterfvSGIX(pname : GLenum, params : GLfloat*)
  fun sprite_parameteri_sgix = glSpriteParameteriSGIX(pname : GLenum, param : GLint)
  fun sprite_parameteriv_sgix = glSpriteParameterivSGIX(pname : GLenum, params : GLint*)
  fun tag_sample_buffer_sgix = glTagSampleBufferSGIX
  fun color_table_sgi = glColorTableSGI(target : GLenum, internalformat : GLenum, width : GLsizei, format : GLenum, type : GLenum, table : Void*)
  fun color_table_parameterfv_sgi = glColorTableParameterfvSGI(target : GLenum, pname : GLenum, params : GLfloat*)
  fun color_table_parameteriv_sgi = glColorTableParameterivSGI(target : GLenum, pname : GLenum, params : GLint*)
  fun copy_color_table_sgi = glCopyColorTableSGI(target : GLenum, internalformat : GLenum, x : GLint, y : GLint, width : GLsizei)
  fun get_color_table_sgi = glGetColorTableSGI(target : GLenum, format : GLenum, type : GLenum, table : Void*)
  fun get_color_table_parameterfv_sgi = glGetColorTableParameterfvSGI(target : GLenum, pname : GLenum, params : GLfloat*)
  fun get_color_table_parameteriv_sgi = glGetColorTableParameterivSGI(target : GLenum, pname : GLenum, params : GLint*)
  fun finish_texture_sunx = glFinishTextureSUNX
  fun global_alpha_factorb_sun = glGlobalAlphaFactorbSUN(factor : GLbyte)
  fun global_alpha_factors_sun = glGlobalAlphaFactorsSUN(factor : GLshort)
  fun global_alpha_factori_sun = glGlobalAlphaFactoriSUN(factor : GLint)
  fun global_alpha_factorf_sun = glGlobalAlphaFactorfSUN(factor : GLfloat)
  fun global_alpha_factord_sun = glGlobalAlphaFactordSUN(factor : GLdouble)
  fun global_alpha_factorub_sun = glGlobalAlphaFactorubSUN(factor : GLubyte)
  fun global_alpha_factorus_sun = glGlobalAlphaFactorusSUN(factor : GLushort)
  fun global_alpha_factorui_sun = glGlobalAlphaFactoruiSUN(factor : GLuint)
  fun draw_mesh_arrays_sun = glDrawMeshArraysSUN(mode : GLenum, first : GLint, count : GLsizei, width : GLsizei)
  fun replacement_codeui_sun = glReplacementCodeuiSUN(code : GLuint)
  fun replacement_codeus_sun = glReplacementCodeusSUN(code : GLushort)
  fun replacement_codeub_sun = glReplacementCodeubSUN(code : GLubyte)
  fun replacement_codeuiv_sun = glReplacementCodeuivSUN(code : GLuint*)
  fun replacement_codeusv_sun = glReplacementCodeusvSUN(code : GLushort*)
  fun replacement_codeubv_sun = glReplacementCodeubvSUN(code : GLubyte*)
  fun replacement_code_pointer_sun = glReplacementCodePointerSUN(type : GLenum, stride : GLsizei, pointer : Void**)
  fun color4ub_vertex2f_sun = glColor4ubVertex2fSUN(r : GLubyte, g : GLubyte, b : GLubyte, a : GLubyte, x : GLfloat, y : GLfloat)
  fun color4ub_vertex2fv_sun = glColor4ubVertex2fvSUN(c : GLubyte*, v : GLfloat*)
  fun color4ub_vertex3f_sun = glColor4ubVertex3fSUN(r : GLubyte, g : GLubyte, b : GLubyte, a : GLubyte, x : GLfloat, y : GLfloat, z : GLfloat)
  fun color4ub_vertex3fv_sun = glColor4ubVertex3fvSUN(c : GLubyte*, v : GLfloat*)
  fun color3f_vertex3f_sun = glColor3fVertex3fSUN(r : GLfloat, g : GLfloat, b : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun color3f_vertex3fv_sun = glColor3fVertex3fvSUN(c : GLfloat*, v : GLfloat*)
  fun normal3f_vertex3f_sun = glNormal3fVertex3fSUN(nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun normal3f_vertex3fv_sun = glNormal3fVertex3fvSUN(n : GLfloat*, v : GLfloat*)
  fun color4f_normal3f_vertex3f_sun = glColor4fNormal3fVertex3fSUN(r : GLfloat, g : GLfloat, b : GLfloat, a : GLfloat, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun color4f_normal3f_vertex3fv_sun = glColor4fNormal3fVertex3fvSUN(c : GLfloat*, n : GLfloat*, v : GLfloat*)
  fun tex_coord2f_vertex3f_sun = glTexCoord2fVertex3fSUN(s : GLfloat, t : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun tex_coord2f_vertex3fv_sun = glTexCoord2fVertex3fvSUN(tc : GLfloat*, v : GLfloat*)
  fun tex_coord4f_vertex4f_sun = glTexCoord4fVertex4fSUN(s : GLfloat, t : GLfloat, p : GLfloat, q : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun tex_coord4f_vertex4fv_sun = glTexCoord4fVertex4fvSUN(tc : GLfloat*, v : GLfloat*)
  fun tex_coord2f_color4ub_vertex3f_sun = glTexCoord2fColor4ubVertex3fSUN(s : GLfloat, t : GLfloat, r : GLubyte, g : GLubyte, b : GLubyte, a : GLubyte, x : GLfloat, y : GLfloat, z : GLfloat)
  fun tex_coord2f_color4ub_vertex3fv_sun = glTexCoord2fColor4ubVertex3fvSUN(tc : GLfloat*, c : GLubyte*, v : GLfloat*)
  fun tex_coord2f_color3f_vertex3f_sun = glTexCoord2fColor3fVertex3fSUN(s : GLfloat, t : GLfloat, r : GLfloat, g : GLfloat, b : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun tex_coord2f_color3f_vertex3fv_sun = glTexCoord2fColor3fVertex3fvSUN(tc : GLfloat*, c : GLfloat*, v : GLfloat*)
  fun tex_coord2f_normal3f_vertex3f_sun = glTexCoord2fNormal3fVertex3fSUN(s : GLfloat, t : GLfloat, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun tex_coord2f_normal3f_vertex3fv_sun = glTexCoord2fNormal3fVertex3fvSUN(tc : GLfloat*, n : GLfloat*, v : GLfloat*)
  fun tex_coord2f_color4f_normal3f_vertex3f_sun = glTexCoord2fColor4fNormal3fVertex3fSUN(s : GLfloat, t : GLfloat, r : GLfloat, g : GLfloat, b : GLfloat, a : GLfloat, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun tex_coord2f_color4f_normal3f_vertex3fv_sun = glTexCoord2fColor4fNormal3fVertex3fvSUN(tc : GLfloat*, c : GLfloat*, n : GLfloat*, v : GLfloat*)
  fun tex_coord4f_color4f_normal3f_vertex4f_sun = glTexCoord4fColor4fNormal3fVertex4fSUN(s : GLfloat, t : GLfloat, p : GLfloat, q : GLfloat, r : GLfloat, g : GLfloat, b : GLfloat, a : GLfloat, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat, w : GLfloat)
  fun tex_coord4f_color4f_normal3f_vertex4fv_sun = glTexCoord4fColor4fNormal3fVertex4fvSUN(tc : GLfloat*, c : GLfloat*, n : GLfloat*, v : GLfloat*)
  fun replacement_codeui_vertex3f_sun = glReplacementCodeuiVertex3fSUN(rc : GLuint, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_vertex3fv_sun = glReplacementCodeuiVertex3fvSUN(rc : GLuint*, v : GLfloat*)
  fun replacement_codeui_color4ub_vertex3f_sun = glReplacementCodeuiColor4ubVertex3fSUN(rc : GLuint, r : GLubyte, g : GLubyte, b : GLubyte, a : GLubyte, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_color4ub_vertex3fv_sun = glReplacementCodeuiColor4ubVertex3fvSUN(rc : GLuint*, c : GLubyte*, v : GLfloat*)
  fun replacement_codeui_color3f_vertex3f_sun = glReplacementCodeuiColor3fVertex3fSUN(rc : GLuint, r : GLfloat, g : GLfloat, b : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_color3f_vertex3fv_sun = glReplacementCodeuiColor3fVertex3fvSUN(rc : GLuint*, c : GLfloat*, v : GLfloat*)
  fun replacement_codeui_normal3f_vertex3f_sun = glReplacementCodeuiNormal3fVertex3fSUN(rc : GLuint, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_normal3f_vertex3fv_sun = glReplacementCodeuiNormal3fVertex3fvSUN(rc : GLuint*, n : GLfloat*, v : GLfloat*)
  fun replacement_codeui_color4f_normal3f_vertex3f_sun = glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc : GLuint, r : GLfloat, g : GLfloat, b : GLfloat, a : GLfloat, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_color4f_normal3f_vertex3fv_sun = glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc : GLuint*, c : GLfloat*, n : GLfloat*, v : GLfloat*)
  fun replacement_codeui_tex_coord2f_vertex3f_sun = glReplacementCodeuiTexCoord2fVertex3fSUN(rc : GLuint, s : GLfloat, t : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_tex_coord2f_vertex3fv_sun = glReplacementCodeuiTexCoord2fVertex3fvSUN(rc : GLuint*, tc : GLfloat*, v : GLfloat*)
  fun replacement_codeui_tex_coord2f_normal3f_vertex3f_sun = glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc : GLuint, s : GLfloat, t : GLfloat, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_tex_coord2f_normal3f_vertex3fv_sun = glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc : GLuint*, tc : GLfloat*, n : GLfloat*, v : GLfloat*)
  fun replacement_codeui_tex_coord2f_color4f_normal3f_vertex3f_sun = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc : GLuint, s : GLfloat, t : GLfloat, r : GLfloat, g : GLfloat, b : GLfloat, a : GLfloat, nx : GLfloat, ny : GLfloat, nz : GLfloat, x : GLfloat, y : GLfloat, z : GLfloat)
  fun replacement_codeui_tex_coord2f_color4f_normal3f_vertex3fv_sun = glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc : GLuint*, tc : GLfloat*, c : GLfloat*, n : GLfloat*, v : GLfloat*)
  fun blend_equation_separate_ati = glBlendEquationSeparateATI(mode_rgb : GLenum, mode_a : GLenum)
  fun egl_image_target_texture2does = glEGLImageTargetTexture2DOES(target : GLenum, image : GLeglImageOes)
  alias GLeglImageOes = Void*
  fun egl_image_target_renderbuffer_storage_oes = glEGLImageTargetRenderbufferStorageOES(target : GLenum, image : GLeglImageOes)
end

